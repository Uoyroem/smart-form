{"version":3,"file":"smart-system.bundle.min.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,mqBCLvD,MAAMC,EAOTC,WAAAA,GACIC,KAAKC,MAAQ,IAAIC,IACjBF,KAAKG,cAAgB,IAAIC,IACzBJ,KAAKK,eAAiB,IAAID,IAC1BJ,KAAKM,mBAAqB,GAC1BN,KAAKO,kBAAoB,EAC7B,CAEAC,eAAAA,GACI,OAAOR,KAAKM,kBAChB,CAEAG,oBAAAA,GACIT,KAAKG,cAAgB,IAAIC,IACzBJ,KAAKK,eAAiB,IAAID,IAC1BJ,KAAKC,MAAQ,IAAIC,IACjBF,KAAKO,kBAAoB,GAEzB,MAAMG,EAAeV,KAAKQ,kBAE1B,IAAK,MAAOG,EAAWC,KAAeF,EAClCV,KAAKC,MAAMY,IAAIF,GACfX,KAAKC,MAAMY,IAAID,GACVZ,KAAKG,cAAcW,IAAIH,IACxBX,KAAKG,cAAcY,IAAIJ,EAAW,IAAIT,KAErCF,KAAKG,cAAcW,IAAIF,IACxBZ,KAAKG,cAAcY,IAAIH,EAAY,IAAIV,KAEtCF,KAAKK,eAAeS,IAAIH,IACzBX,KAAKK,eAAeU,IAAIJ,EAAW,IAAIT,KAEtCF,KAAKK,eAAeS,IAAIF,IACzBZ,KAAKK,eAAeU,IAAIH,EAAY,IAAIV,KAE5CF,KAAKG,cAAcd,IAAIsB,GAAYE,IAAID,GACvCZ,KAAKK,eAAehB,IAAIuB,GAAaC,IAAIF,GAE7C,MAAMK,EAAW,IAAIZ,IACrB,IAAK,MAAOO,EAAWD,KAAiBV,KAAKG,cACzCa,EAASD,IAAIJ,EAAWD,EAAaO,MAEzC,MAAMC,EAAe,GACrB,IAAK,MAAOP,EAAWQ,KAAWH,EACf,IAAXG,GACAD,EAAME,KAAKT,GAGnB,KAAOO,EAAMG,OAAS,GAAG,CACrB,MAAMrC,EAAMkC,EAAMI,QAClBtB,KAAKO,kBAAkBa,KAAKpC,GAC5B,IAAK,MAAM4B,KAAcZ,KAAKK,eAAehB,IAAIL,GAC7CgC,EAASD,IAAIH,EAAYI,EAAS3B,IAAIuB,GAAc,GACnB,IAA7BI,EAAS3B,IAAIuB,IACbM,EAAME,KAAKR,EAGvB,CACA,GAAIZ,KAAKO,kBAAkBc,SAAWrB,KAAKC,MAAMgB,KAC7C,MAAM,IAAIM,MAAM,gCAExB,CAEAC,aAAAA,CAAcb,EAAgBC,GAC1BZ,KAAKM,mBAAmBc,KAAK,CAACT,EAAWC,GAC7C,CAEA,QAAIa,GACA,OAAOzB,KAAKC,KAChB,CAEA,oBAAIyB,GACA,OAAO1B,KAAKO,iBAChB,CAEA,gBAAIoB,GACA,OAAO3B,KAAKG,aAChB,CAEA,iBAAIyB,GACA,OAAO5B,KAAKK,cAChB,EChFG,MAAMwB,UAAsB/B,EACvBgC,WAAU,KAAwB,IAAI1B,IAA5B,GAElBL,WAAAA,GACIgC,QACA/B,KAAK8B,WAAa,IAAI1B,GAC1B,CAESI,eAAAA,GACL,MAAME,EAAmC,GACzC,IAAK,MAAO1B,EAAKgD,KAAWhC,KAAK8B,WAC7B,IAAK,MAAMlB,KAAcoB,EAAOC,UAC5BvB,EAAaU,KAAK,CAACpC,EAAK4B,IAGhC,OAAOmB,MAAMvB,kBAAkB0B,OAAOxB,EAC1C,CAEAyB,SAAAA,CAAUnD,EAAagD,GACnBhC,KAAK8B,WAAWf,IAAI/B,EAAKgD,EAC7B,CAEA,oBAAMI,GAAoF,IAArE,aAAEC,EAAe,MAA6CC,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnF,IAAK,MAAME,KAAQxC,KAAK0B,iBAAkB,CACtC,GAAoB,MAAhBW,GAAyF,IAAjErC,KAAK2B,aAAatC,IAAImD,GAAOC,aAAaJ,GAAcpB,KAChF,SAEJ,MAAMe,EAAShC,KAAK8B,WAAWzC,IAAImD,GACnC,GAAc,MAAVR,EAAgB,CAChB,MAAMU,QAA6BV,EAAOW,WACtCN,GACAK,EAAqBE,SAAQC,IAAiBR,EAAaxB,IAAIgC,EAAY,GAEnF,MACQR,GACAA,EAAaxB,IAAI2B,EAG7B,CACJ,EC5CJ,SAASM,EAAUC,EAAQC,GACvB,GAAID,IAAMC,EAAG,OAAO,EAEpB,GAAiB,iBAAND,GAA+B,iBAANC,GAAwB,OAAND,GAAoB,OAANC,EAChE,OAAO,EAGX,MAAMC,EAAQ,IAAI/C,IAAIhB,OAAOuC,KAAKsB,IAC5BG,EAAQ,IAAIhD,IAAIhB,OAAOuC,KAAKuB,IAElC,GAAIC,EAAMhC,OAASiC,EAAMjC,KAAM,OAAO,EACtC,IAAK,MAAMjC,KAAOiE,EACd,IAAKH,EAAUC,EAAE/D,GAAMgE,EAAEhE,IACrB,OAAO,EAIf,OAAO,CACX,CAEO,SAASmE,EAAqBC,EAAmBC,GACpD,MAAO,GAAGD,KAAaC,GAC3B,CAIO,MAAMC,EAGTvD,WAAAA,CAAYyC,GACRxC,KAAKwC,KAAOA,CAChB,CAEAe,QAAAA,CAASC,GAET,EAGG,MAAMC,UAAmCH,EAC5CvD,WAAAA,GACIgC,MAAM,WACV,CAEAwB,QAAAA,CAASC,GAET,EAKG,IAAKE,EAA0B,SAA1BA,GAA0B,OAA1BA,EAA0B,0DAA1BA,EAA0B,sCAA1BA,EAA0B,oEAA1BA,EAA0B,gDAA1BA,EAA0B,0CAA1BA,EAA0B,oDAA1BA,EAA0B,kCAA1BA,EAA0B,8BAA1BA,EAA0B,0CAA1BA,CAA0B,MAY/B,MAAMC,EACT,aAAOC,GACH,OAAO,IAAIC,CACf,CAEA,WAAOC,GACH,OAAO,IAAIC,CACf,CAEA,aAAOC,GACH,OAAO,IAAIC,CACf,CAEA,WAAOC,GACH,OAAO,IAAIC,CACf,CAEA,aAAOC,GAAkC,IAA3B,SAAEC,GAAW,GAAO/B,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClC,OAAO,IAAIgC,GAAsBD,SAASA,EAC9C,CAEA,eAAOE,GACH,OAAO,IAAIC,CACf,CAEA,YAAOC,GACH,OAAO,IAAIC,CACf,CAEA,oBAAOC,CAAcC,GACjB,OAAOA,aAAmBC,kBAAoBD,aAAmBE,mBAAqBF,aAAmBG,mBAC7G,CAEA,sBAAOC,CAAgBJ,GACnB,OAAQA,EAAQK,MACZ,IAAK,aACD,OAAOjF,KAAKoE,SAChB,IAAK,kBACD,OAAOpE,KAAKoE,SAASC,WACzB,IAAK,SACD,OAAOrE,KAAKgE,SAChB,IAAK,OACD,OAAOhE,KAAK8D,OAChB,IAAK,WACD,OAAO9D,KAAK8D,OAAOoB,OACvB,IAAK,WACD,OAAOlF,KAAKuE,WAChB,IAAK,QACD,OAAOvE,KAAKyE,QAChB,IAAK,OACD,OAAOzE,KAAKkE,OAChB,QACI,MAAM,IAAI3C,MAAM,mBAAmBqD,aAE/C,CAIA7E,WAAAA,CAAYyC,GACRxC,KAAKwC,KAAOA,CAChB,CAEA2C,OAAAA,CAAQpC,EAAQC,GAAmB,OAAOD,IAAMC,CAAG,CACnDoC,OAAAA,GAAY,CACZC,aAAAA,GAAkB,MAAO,QAAU,CAEnCC,KAAAA,GACA,CAEAC,aAAAA,CAAc/B,GACV,OAAOA,EAAMgC,UACjB,CAEAC,iBAAAA,CAAkBjC,EAAkBH,GAChC,OAAOG,EAAMkC,aAAarC,EAC9B,CAEAsC,aAAAA,CAAcnC,EAAkBoC,GAC5B,OAAOpC,EAAMqC,SAASD,EAC1B,CAEAE,iBAAAA,CAAkBtC,EAAkBH,EAAiBuC,GACjD,OAAOpC,EAAMuC,aAAa1C,EAASuC,EACvC,CAEAI,eAAAA,CAAgBpB,GACZ,OAAKjB,EAAcgB,cAAcC,GAG7BA,EAAQK,OAASjF,KAAKqF,gBACf,CAAC,KAAM3B,EAA2BuC,eAEtC,CAACrB,EAAQ/E,MAAO6D,EAA2BwC,6BALvC,CAAC,KAAMxC,EAA2ByC,gBAMjD,CAEAC,eAAAA,CAAgBxB,EAAkBgB,GAC9B,OAAKjC,EAAcgB,cAAcC,GAG7BA,EAAQK,OAASjF,KAAKqF,gBACf3B,EAA2BuC,eAEtCrB,EAAQ/E,MAAQ+F,EACTlC,EAA2B2C,mBANvB3C,EAA2ByC,eAO1C,CAEAG,mBAAAA,CAAoB1B,EAAkBvB,GAClC,OAAKM,EAAcgB,cAAcC,GAG7BA,EAAQK,OAASjF,KAAKqF,gBACf,MAAC9C,EAAWmB,EAA2BuC,eAElC,aAAZ5C,EACO,CAACuB,EAAQ2B,SAAU7C,EAA2B8C,kCAElD,MAACjE,EAAWmB,EAA2B+C,qBARnC,MAAClE,EAAWmB,EAA2ByC,gBAStD,CAEAO,mBAAAA,CAAoB9B,EAAkBvB,EAAiBuC,GACnD,OAAKjC,EAAcgB,cAAcC,GAG7BA,EAAQK,OAASjF,KAAKqF,gBACf3B,EAA2BuC,cAEtB,aAAZ5C,GACAuB,EAAQ2B,SAAWI,QAAQf,GACpBlC,EAA2BkD,wBAE/BlD,EAA2B+C,oBATvB/C,EAA2ByC,eAU1C,CAEAU,eAAAA,GACI,OAAO,IACX,CAEAC,cAAAA,GACI,MAAMC,EAAO,IAAI3G,IAGjB,OAFA2G,EAAKhG,IAAI,YAAY,GACrBgG,EAAKhG,IAAI,SAAS,GACXgG,CACX,CAEAC,UAAAA,CAAWC,GACP,OAAOjH,KAAKwC,OAASyE,EAAUzE,IACnC,EAGG,MAAMuB,UAA0BJ,EAGnC5D,WAAAA,GACIgC,MAAM,UACN/B,KAAKkH,OAAQ,CACjB,CAEAhC,IAAAA,GAAyB,IAApBrF,IAAKyC,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,KAAAA,UAAA,GAEN,OADAtC,KAAKkH,MAAQrH,EACNG,IACX,CAEAqF,aAAAA,GACI,OAAOrF,KAAKkH,MAAQ,WAAa,MACrC,EAGG,MAAMjD,UAA4BN,EAC7BwD,WAAqB,EAC7BpH,WAAAA,GACIgC,MAAM,SACV,CAEAsD,aAAAA,GACI,MAAO,QACX,EAGG,MAAMlB,UAA0BR,EACnC5D,WAAAA,GACIgC,MAAM,OACV,CAEAsD,aAAAA,GACI,MAAO,MACX,CAEAF,OAAAA,CAAQpC,EAAQC,GACZ,OAAOD,EAAEqE,iBAAmBpE,EAAEoE,cAClC,EAGG,MAAM1C,UAA2Bf,EACpC5D,WAAAA,GACIgC,MAAM,QACV,CAEAsD,aAAAA,GACI,MAAO,OACX,CAEAyB,cAAAA,GACI,MAAMC,EAAOhF,MAAM+E,iBAEnB,OADAC,EAAKhG,IAAI,WAAW,GACbgG,CACX,CAESxB,aAAAA,CAAc/B,GACnB,OAAOA,EAAMkC,aAAa,WAAalC,EAAMgC,WAAa,IAC9D,CAESG,aAAAA,CAAcnC,EAAkBoC,GACrC,OAAOpC,EAAMuC,aAAa,UAAuB,MAAZH,GAAoBpC,EAAMgC,aAAeI,EAClF,CAESU,mBAAAA,CAAoB1B,EAA2BvB,GACpD,MAAOxD,EAAOwH,GAAUtF,MAAMuE,oBAAoB1B,EAASvB,GAC3D,OAAIgE,IAAW3D,EAA2B+C,oBAC/B,CAAC5G,EAAOwH,GAEH,YAAZhE,EACO,CAACuB,EAAQ0C,QAAS5D,EAA2B8C,kCAEjD,MAACjE,EAAWmB,EAA2B+C,oBAClD,CAESC,mBAAAA,CAAoB9B,EAA2BvB,EAAiBuC,GACrE,MAAMyB,EAAStF,MAAM2E,oBAAoB9B,EAASvB,EAASuC,GAC3D,OAAIyB,IAAW3D,EAA2B+C,oBAA4BY,EACtD,YAAZhE,GACAuB,EAAQ0C,QAAUX,QAAQf,GACnBlC,EAA2BkD,wBAE/BlD,EAA2B6D,wBACtC,EAGG,MAAM/C,UAA8Bb,EACvC5D,WAAAA,GACIgC,MAAM,WACV,CAEAsD,aAAAA,GACI,MAAO,UACX,CAEAyB,cAAAA,GACI,MAAMC,EAAOhF,MAAM+E,iBAEnB,OADAC,EAAKhG,IAAI,WAAW,GACbgG,CACX,CAESxB,aAAAA,CAAc/B,GACnB,MAAM3D,EAAQ2D,EAAMgC,WACpB,MAAI,CAAC,GAAI,MAAMgC,SAAS3H,GAAe2D,EAAMkC,aAAa,WACnDlC,EAAMkC,aAAa,WAAa7F,EAAQ,IACnD,CAES8F,aAAAA,CAAcnC,EAAkBoC,GACrC,MAAI,CAAC,GAAI,MAAM4B,SAAShE,EAAMgC,YAAoBhC,EAAMuC,aAAa,UAAWH,GACzEpC,EAAMuC,aAAa,UAAuB,MAAZH,GAAoBpC,EAAMgC,aAAeI,EAClF,CAESU,mBAAAA,CAAoB1B,EAA2BvB,GACpD,MAAOxD,EAAOwH,GAAUtF,MAAMuE,oBAAoB1B,EAASvB,GAC3D,OAAIgE,IAAW3D,EAA2B+C,oBAC/B,CAAC5G,EAAOwH,GAEH,YAAZhE,EACO,CAACuB,EAAQ0C,QAAS5D,EAA2B8C,kCAEjD,MAACjE,EAAWmB,EAA2B+C,oBAClD,CAESC,mBAAAA,CAAoB9B,EAA2BvB,EAAiBuC,GACrE,MAAMyB,EAAStF,MAAM2E,oBAAoB9B,EAASvB,EAASuC,GAC3D,OAAIyB,IAAW3D,EAA2B+C,oBAA4BY,EACtD,YAAZhE,GACAuB,EAAQ0C,QAAUX,QAAQf,GACnBlC,EAA2BkD,wBAE/BlD,EAA2B6D,wBACtC,EAGG,MAAMjD,UAA4BX,EAIrC5D,WAAAA,GACIgC,MAAM,UACN/B,KAAKyH,WAAY,EAIjBzH,KAAK0H,IAAM/D,EAAcG,MAC7B,CAEAuB,aAAAA,GACI,OAAOrF,KAAKyH,UAAY,kBAAoB,YAChD,CAEAX,cAAAA,GACI,MAAMC,EAAOhF,MAAM+E,iBAEnB,OADAC,EAAKhG,IAAI,sBAAsB,GACxBgG,CACX,CAEA1C,QAAAA,GAAsC,IAA7BxE,IAAcyC,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,KAAAA,UAAA,GAEnB,OADAtC,KAAKyH,UAAY5H,EACVG,IACX,CAEA2H,EAAAA,CAAG1C,GAEC,OADAjF,KAAK0H,IAAMzC,EACJjF,IACX,CAESgG,eAAAA,CAAgBpB,GACrB,OAAKjB,EAAcgB,cAAcC,GAG7BA,EAAQK,OAASjF,KAAKqF,gBACf,MAAC9C,EAAWmB,EAA2BuC,eAE9CjG,KAAKyH,UACE,CAACG,MAAMC,KAAKjD,EAAQkD,iBAAiBC,GAAUA,EAAOlI,QAAQ6D,EAA2BwC,6BAE7F,CAACtB,EAAQ/E,MAAO6D,EAA2BwC,6BARvC,MAAC3D,EAAWmB,EAA2ByC,gBAStD,CAESC,eAAAA,CAAgBxB,EAA4BgB,GACjD,IAAKjC,EAAcgB,cAAcC,GAC7B,OAAOlB,EAA2ByC,gBAEtC,GAAIvB,EAAQK,OAASjF,KAAKqF,gBACtB,OAAO3B,EAA2BuC,cAEtC,IAAI+B,EAUJ,OARIA,EADAhI,KAAKyH,UACK7B,EAASqC,KAAKpI,GACb+E,EAAQsD,cAAc,iBAAiBrI,SAGxC,CACN+E,EAAQsD,cAAc,iBAAiBtC,QAG3CoC,EAAQG,MAAKJ,GAAoB,MAAVA,IAAwBrE,EAA2B0E,qBAC7EJ,EAAgCpF,SAAQmF,IACrCA,EAAOM,UAAW,CAAI,IAEnB3E,EAA2B2C,kBACtC,EAGG,MAAMxC,UAA4BF,EACrC5D,WAAAA,GACIgC,MAAM,SACV,CAEAoD,OAAAA,CAAQpC,EAAQC,GACZ,OAAOF,EAAUC,EAAGC,EACxB,EAGG,IAAKsF,EAAmB,SAAnBA,GAAmB,OAAnBA,EAAAA,EAAmB,iBAAnBA,EAAAA,EAAmB,yBAAnBA,CAAmB,MAgCxB,MAAMC,UAA8BC,MACvCzI,WAAAA,CAAmB0I,GACf1G,MAAM,UAAW,CAAE2G,YAAY,IAAQ,KADxBD,QAAAA,CAEnB,EAyBG,MAAME,EAIT5I,WAAAA,GAA2B,IAAf6I,EAAOtG,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAClBtC,KAAK6I,SAAW,GAChB7I,KAAK8I,SAAWF,CACpB,CAEAG,oBAAAA,GACI,KAAO/I,KAAK6I,SAASxH,OAASrB,KAAK8I,UAAU,CACzC,MAAME,EAAQhJ,KAAK6I,SAASI,WAAUC,GAAKA,EAAEC,YAC7C,IAAe,IAAXH,EAAc,MAClBhJ,KAAK6I,SAASO,OAAOJ,EAAO,EAChC,CACJ,CAEAnI,GAAAA,CAAIwI,GACA,IAAIC,EAAiD,KACjDD,EAAOpE,OAASqD,EAAoBiB,MACpCD,EAAatJ,KAAKwJ,eAAeH,EAAO7F,MAAO,CAAEyB,KAAMqD,EAAoBiB,QACpEF,EAAOpE,OAASqD,EAAoBmB,YAC3CH,EAAatJ,KAAKwJ,eAAeH,EAAO7F,MAAO,CAAEyB,KAAMqD,EAAoBmB,UAAWpG,QAASgG,EAAOhG,WAExF,MAAdiG,IACAA,EAAWI,MAAO,GAEtB1J,KAAK6I,SAASzH,KAAKiI,GACnBrJ,KAAK+I,sBACT,CAEAY,MAAAA,CAAON,GACHrJ,KAAK6I,SAASO,OAAOpJ,KAAK6I,SAASe,QAAQP,GAAS,EACxD,CAKAG,cAAAA,CAAehG,GAAsO,IAApN,iBAAEqG,GAAmB,EAAI,KAAEH,GAAO,EAAI,UAAEP,GAAY,EAAK,KAAElE,EAAO,KAAI,QAAE5B,EAAU,MAA8Ff,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7MmG,EAAUzI,KAAK8J,gBAAgBtG,EAAO,CAAEqG,mBAAkBH,OAAMP,YAAWlE,SAI/E,OAHIA,IAASqD,EAAoBmB,WAAwB,MAAXpG,IAC1CoF,EAAWA,EAAuCsB,QAAOV,GAAUA,EAAOhG,UAAYA,KAEnFoF,EAAQuB,IAAI,EACvB,CAKAF,eAAAA,CAAgBtG,GAA4M,IAA1L,iBAAEqG,GAAmB,EAAI,KAAEH,GAAO,EAAI,UAAEP,GAAY,EAAK,KAAElE,EAAO,MAA8F3C,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9LmG,EAAUzI,KAAK6I,SAASkB,QAAOV,GAAUA,EAAO7F,QAAUA,IAK9D,OAJY,MAARyB,IAAgBwD,EAAUA,EAAQsB,QAAOV,GAAUA,EAAOpE,OAASA,KAC3D,MAARyE,IAAgBjB,EAAUA,EAAQsB,QAAOV,GAAUA,EAAOK,OAASA,KACtD,MAAbP,IAAqBV,EAAUA,EAAQsB,QAAOV,GAAUA,EAAOF,YAAcA,KAC7EU,IAAoBpB,EAAUA,EAAQsB,QAAOV,GAAUA,EAAOY,WAAazG,EAAM0G,mBAC9EzB,CACX,CAEA0B,UAAAA,CAAW3G,GACP,OAAsF,IAA/ExD,KAAK8J,gBAAgBtG,EAAO,CAAEqG,kBAAkB,EAAMH,MAAM,IAAQrI,MAC/E,CAEA+I,aAAAA,CAAc3B,GACVA,EAAQ7F,SAAQyG,IAAYA,EAAOF,WAAY,CAAI,IACnDnJ,KAAK+I,sBACT,CAEA,oBAAOsB,CAAchB,GACjB,OAAIA,EAAOpE,OAASqD,EAAoBiB,MAC7BF,EAAO7F,MAAMhB,KAEpB6G,EAAOpE,OAASqD,EAAoBmB,UAC7BtG,EAAqBkG,EAAO7F,MAAMhB,KAAM6G,EAAOhG,SAEnD,IACX,CAEA,qBAAOiH,CAAe7B,GAClB,MAAMpG,EAAe,IAAInC,IACzB,IAAK,MAAMmJ,KAAUZ,EAAS,CAC1B,MAAM5F,EAAc7C,KAAKqK,cAAchB,GACpB,MAAfxG,GACJR,EAAaxB,IAAIgC,EACrB,CACA,OAAOR,CACX,CAEAkI,cAAAA,CAAe/G,GAAiG,IAA/EyB,EAAgC3C,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAMkI,EAAelI,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,IAAAA,UAAA,GACrF,MAAMmI,EAAczK,KAAK8J,gBAAgBtG,EAAO,CAAEqG,kBAAkB,EAAM5E,SAK1E,OAJKuF,IACDxK,KAAKoK,cAAcpK,KAAK8J,gBAAgBtG,EAAO,CAAEqG,kBAAkB,EAAMH,KAAM,KAAMzE,UACrFzB,EAAMkH,cAAc,IAAInC,EAAsBkC,KAE3C9B,EAAmB2B,eAAeG,EAC7C,EAWG,MAAME,UAAkBC,YAW3B7K,WAAAA,CAAYyC,EAAcyC,GAAuJ,IAAlI,UAAE4F,EAAY,KAAI,cAAEC,EAAgB,MAAuFxI,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1KP,QACA/B,KAAK+K,MAAQvI,EACbxC,KAAKgL,MAAQ/F,EACbjF,KAAKiL,sBAAwB,IAAI/K,IAEjCF,KAAKkL,cAAgBlL,KAAKiF,KAAK4B,kBAC/B7G,KAAKmL,UAAY,IAAI/K,IAErBJ,KAAKoL,aAAepL,KAAKiF,KAAK6B,iBAC9B9G,KAAKqL,SAAW,IAAIjL,IAEpBJ,KAAKsL,WAAaT,GAAa,IAAIlC,EAAmB,IACtD3I,KAAKuL,iBAAmB,UACxBvL,KAAKwL,gBAAgB,CAAEvB,SAAU,YACZ,MAAjBa,GACA9K,KAAKyL,uBAAuBX,EAEpC,CAEA,QAAIY,GACA,OAAO1L,IACX,CAEA,mBAAIkK,GACA,OAAOlK,KAAKuL,gBAChB,CAEA,WAAII,GACA,MAAO,CACHC,gBAAgB,EAChBC,UAAW,KACX5B,SAAU,KACV6B,KAAK,EACLvB,gBAAgB,EAExB,CAEA,aAAIM,GACA,OAAO7K,KAAKsL,UAChB,CAEA,QAAI9I,GACA,OAAOxC,KAAK+K,KAChB,CAEA,QAAI9F,GACA,OAAOjF,KAAKgL,KAChB,CAEAe,gBAAAA,GACI/L,KAAKoL,aAAe,IAAIhL,GAC5B,CAEA4L,KAAAA,GAAyG,IAAnG,SAAE/B,EAAW,KAAI,UAAE4B,EAAY,KAAI,eAAEtB,GAAiB,GAAyBjI,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrF2H,IAAajK,KAAKuL,iBAClBU,QAAQC,IAAI,oDAAqDjC,EAAUjK,KAAKwC,MAChFxC,KAAK6F,SAAS7F,KAAKkL,cAAe,CAAEY,KAAK,EAAM7B,WAAU4B,cACzD,IAAK,MAAOxI,EAASxD,KAAUG,KAAKoL,aAAae,UAC7CnM,KAAK+F,aAAa1C,EAASxD,EAAO,CAAEiM,KAAK,EAAM7B,WAAU4B,cAE7D,OAAO7L,KAAKuK,eAAe,MAAOA,EACtC,CAEAiB,eAAAA,CAAeY,GAAgF,IAA/E,SAAEnC,EAAQ,UAAE4B,EAAY,MAA+CO,EAC9EpM,KAAKiL,sBAAsBnK,IAAImJ,KAChCgC,QAAQC,IAAI,yEAA0EjC,EAAUjK,KAAKwC,MACrGxC,KAAKiL,sBAAsBpK,IAAIoJ,GAC/BjK,KAAKmL,UAAUpK,IAAIkJ,EAAU,MAC7BjK,KAAKqL,SAAStK,IAAIkJ,EAAU,IAAI7J,KAChCJ,KAAKgM,MAAM,CAAE/B,WAAU4B,YAAWtB,gBAAgB,IAE1D,CAEA8B,WAAAA,CAAWC,GAA+G,IAA9G,SAAErC,EAAQ,UAAE4B,EAAY,KAAI,eAAEtB,GAAiB,GAAgD+B,EACvGL,QAAQC,IAAI,2EAA4ElM,KAAKwC,KAAMxC,KAAKuL,iBAAkBtB,GAC1HjK,KAAKwL,gBAAgB,CAAEvB,WAAU4B,cACjC,MAAMU,EAAWvM,KAAKmL,UAAU9L,IAAIW,KAAKuL,kBACnC3F,EAAW5F,KAAKmL,UAAU9L,IAAI4K,GACpC,IAAKjK,KAAKiF,KAAKE,QAAQoH,EAAU3G,GAAW,CACxC,MAAMyD,EAA0B,CAC5BY,WACAhF,KAAMqD,EAAoBiB,MAC1B/F,MAAOxD,KACP6L,YACAU,WACA3G,WACA1B,KAAM,IAAIsI,KACV9C,MAAM,EACNP,WAAW,GAEfnJ,KAAK6K,UAAUhK,IAAIwI,EACvB,CAEA,IAAK,MAAOhG,EAASuC,KAAa5F,KAAKqL,SAAShM,IAAI4K,GAAWkC,UAAW,CACtE,MAAMI,EAAWvM,KAAKqL,SAAShM,IAAIW,KAAKuL,kBAAmBlM,IAAIgE,GAC/D,GAAIkJ,IAAa3G,EAAU,CACvB,MAAMyD,EAA0B,CAC5BY,WACAhF,KAAMqD,EAAoBmB,UAC1BjG,MAAOxD,KACP6L,YACAxI,UACAkJ,WACA3G,WACA1B,KAAM,IAAIsI,KACV9C,MAAM,EACNP,WAAW,GAEfnJ,KAAK6K,UAAUhK,IAAIwI,EACvB,CACJ,CAEA,OADArJ,KAAKuL,iBAAmBtB,EACjBjK,KAAKuK,eAAe,MAAOA,EACtC,CAMAkB,sBAAAA,CAAuBX,GAEnB,OADAA,EAActJ,cAAcxB,KAAKwC,KAAMW,EAAqBnD,KAAKwC,KAAM,aAC/DxC,KAAKiF,KAAKI,iBACd,IAAK,WACL,IAAK,QACDyF,EAActJ,cAAcxB,KAAKwC,KAAMW,EAAqBnD,KAAKwC,KAAM,YAGnF,CAEAiK,UAAAA,CAAWC,GACP,OAAO,IAAIC,MAAM3M,KAAM,CACnBX,GAAAA,CAAIuN,EAAQC,EAAaC,GACrB,OAAQD,GACJ,IAAK,OACD,OAAOD,EACX,IAAK,UACD,OAAOF,EACX,IAAK,aACD,OAAO,eAACK,EAA8BzK,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKsK,EAAOH,WAAW,IAAKC,KAAiBK,GAAe,EAC3G,IAAK,WACD,OAAO,eAACA,EAA8BzK,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKsK,EAAOpH,SAAS,IAAKkH,KAAiBK,GAAe,EACzG,IAAK,eACD,OAAO,SAAC1J,GAAe,IAAE0J,EAA8BzK,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKsK,EAAOlH,aAAarC,EAAS,IAAKqJ,KAAiBK,GAAe,EACvI,IAAK,WACD,OAAO,SAACnH,GAAa,IAAEmH,EAA8BzK,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKsK,EAAO/G,SAASD,EAAU,IAAK8G,KAAiBK,GAAe,EAClI,IAAK,eACD,OAAO,SAAC1J,EAAiBuC,GAAa,IAAEmH,EAA8BzK,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKsK,EAAO7G,aAAa1C,EAASuC,EAAU,IAAK8G,KAAiBK,GAAe,EAChK,QACI,MAAMlN,EAAQmN,QAAQ3N,IAAIuN,EAAQC,EAAaC,GAC/C,MAAwB,mBAAVjN,EAAuBA,EAAMoN,KAAKL,GAAU/M,EAEtE,GAER,CAEA2F,QAAAA,GAA8F,IAArF,SAAEyE,EAAW,KAAI,IAAE6B,GAAM,EAAK,eAAEF,GAAiB,GAAwBtJ,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClF,OAAIwJ,GACA7B,IAAajK,KAAKuL,iBAClBvL,KAAKwL,gBAAgB,CAAEvB,aAChBjK,KAAKmL,UAAU9L,IAAI4K,IAE1B2B,GAAkB5L,KAAK0F,aAAa,WAAY,CAAEuE,aAC3C,KAEJjK,KAAKiF,KAAKM,cAAcvF,KAAKyM,WAAW,CAAExC,WAAU6B,KAAK,IACpE,CAEAoB,eAAAA,CAAgBtH,GACZ5F,KAAKkL,cAAgBtF,CACzB,CAEAC,QAAAA,CAASD,GAA+H,IAAhH,SAAEqE,EAAW,KAAI,IAAE6B,GAAM,EAAK,UAAED,EAAY,KAAI,eAAEtB,GAAiB,GAAyBjI,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpH,GAAIwJ,EAAK,CACLD,IAAc7L,KACdiK,IAAajK,KAAKuL,iBAClBvL,KAAKwL,gBAAgB,CAAEvB,WAAU4B,cACjC,MAAMU,EAAWvM,KAAKwF,SAAS,CAAEyE,WAAU6B,KAAK,IAChD,GAAI9L,KAAKiF,KAAKE,QAAQoH,EAAU3G,GAAW,OAAO,IAAI1F,IACtDF,KAAKmL,UAAUpK,IAAIkJ,EAAUrE,GAC7B,MAAMyD,EAA0B,CAC5BY,WACAhF,KAAMqD,EAAoBiB,MAC1B/F,MAAOxD,KACP6L,YACAU,WACA3G,WACA1B,KAAM,IAAIsI,KACV9C,MAAM,EACNP,WAAW,GAIf,OAFA8C,QAAQC,IAAI,sCAAuC,CAAEK,WAAU3G,WAAUqE,aACzEjK,KAAK6K,UAAUhK,IAAIwI,GACZrJ,KAAKuK,eAAejC,EAAoBiB,OAAQgB,EAC3D,CACA,OAAOvK,KAAKiF,KAAKU,cAAc3F,KAAKyM,WAAW,CAAExC,WAAU6B,KAAK,EAAMvB,iBAAgBsB,cAAcjG,EACxG,CAEAF,YAAAA,CAAarC,GAA+E,IAA9D,SAAE4G,EAAW,KAAI,IAAE6B,GAAM,GAAyBxJ,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChF,OAAIwJ,GACA7B,IAAajK,KAAKuL,iBAClBvL,KAAKwL,gBAAgB,CAAEvB,aACVjK,KAAKqL,SAAShM,IAAI4K,GAClB5K,IAAIgE,IAEdrD,KAAKiF,KAAKQ,kBAAkBzF,KAAKyM,WAAW,CAAEX,KAAK,EAAM7B,aAAa5G,EACjF,CAEA8J,mBAAAA,CAAoB9J,EAAiBuC,GACjC5F,KAAKoL,aAAarK,IAAIsC,EAASuC,EACnC,CAEAG,YAAAA,CAAa1C,EAAiBuC,GAA+H,IAAhH,SAAEqE,EAAW,KAAI,UAAE4B,EAAY,KAAI,eAAEtB,GAAiB,EAAK,IAAEuB,GAAM,GAAyBxJ,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzI,GAAIwJ,EAAK,CACLD,IAAc7L,KACdiK,IAAajK,KAAKuL,iBAClBvL,KAAKwL,gBAAgB,CAAEvB,WAAU4B,cACjC,MAAMU,EAAWvM,KAAK0F,aAAarC,EAAS,CAAE4G,aAC9C,GAAIsC,IAAa3G,EAAU,OAAO,IAAI1F,IACtCF,KAAKqL,SAAShM,IAAI4K,GAAWlJ,IAAIsC,EAASuC,GAC1C,MAAMyD,EAA0B,CAC5BY,WACAhF,KAAMqD,EAAoBmB,UAC1BjG,MAAOxD,KACP6L,YACAxI,UACAkJ,WACA3G,WACA1B,KAAM,IAAIsI,KACV9C,MAAM,EACNP,WAAW,GAIf,OAFAnJ,KAAK6K,UAAUhK,IAAIwI,GACnB4C,QAAQC,IAAI,gCAAiC/I,EAAqBnD,KAAKwC,KAAMa,GAAU,iBAAkB,CAAEkJ,WAAU3G,WAAUqE,aACxHjK,KAAKuK,eAAejC,EAAoBmB,WAAYc,EAC/D,CACA,OAAOvK,KAAKiF,KAAKa,kBAAkB9F,KAAKyM,WAAW,CAAExC,WAAU6B,KAAK,EAAMD,YAAWtB,mBAAmBlH,EAASuC,EACrH,CAEA2E,cAAAA,GAA8F,IAA/EtF,EAAgC3C,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAMkI,EAAelI,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,IAAAA,UAAA,GACnE,OAAOtC,KAAK6K,UAAUN,eAAevK,KAAMiF,EAAMuF,EACrD,EAGG,MAAM4C,EACTrN,WAAAA,CAAmBsN,GAAyB,KAAzBA,WAAAA,CAA2B,CAE9CZ,UAAAA,CAAWC,GACP,OAAO,IAAIC,MAAM3M,KAAM,CACnBX,GAAAA,CAAIuN,EAAQC,EAAaC,GACrB,OAAQD,GACJ,IAAK,OACD,OAAOD,EACX,IAAK,UACD,OAAOF,EACX,IAAK,aACD,OAAO,eAACK,EAA8BzK,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKsK,EAAOH,WAAW,IAAKC,KAAiBK,GAAe,EAC3G,IAAK,WACD,OAAO,eAACA,EAA8BzK,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKsK,EAAOpH,SAAS,IAAKkH,KAAiBK,GAAe,EACzG,IAAK,eACD,OAAO,SAAC1J,GAAe,IAAE0J,EAA8BzK,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKsK,EAAOlH,aAAarC,EAAS,IAAKqJ,KAAiBK,GAAe,EACvI,IAAK,WACD,OAAO,SAACnH,GAAa,IAAEmH,EAA8BzK,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKsK,EAAO/G,SAASD,EAAU,IAAK8G,KAAiBK,GAAe,EAClI,IAAK,eACD,OAAO,SAAC1J,EAAiBuC,GAAa,IAAEmH,EAA8BzK,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKsK,EAAO7G,aAAa1C,EAASuC,EAAU,IAAK8G,KAAiBK,GAAe,EAChK,QACI,MAAMlN,EAAQmN,QAAQ3N,IAAIuN,EAAQC,EAAaC,GAC/C,MAAwB,mBAAVjN,EAAuBA,EAAMoN,KAAKL,GAAU/M,EAEtE,GAER,CAEA2F,QAAAA,GAA8F,IAArF,SAAEyE,EAAW,KAAI,eAAE2B,GAAiB,EAAI,IAAEE,GAAM,GAAyBxJ,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClF,OAAOtC,KAAKqN,WAAWpF,KAAIzE,GAASA,EAAMgC,SAAS,CAAEyE,WAAU2B,iBAAgBE,UAAQwB,MAAKzN,GAAkB,MAATA,GACzG,CAEA6F,YAAAA,CAAarC,GAA+E,IAA9D,SAAE4G,EAAW,KAAI,IAAE6B,GAAM,GAAyBxJ,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChF,OAAOtC,KAAKqN,WAAWpF,KAAIzE,GAASA,EAAMkC,aAAarC,EAAS,CAAE4G,WAAU6B,UAAQwB,MAAKzN,GAAkB,MAATA,GACtG,CAEAgG,QAAAA,CAAShG,GAA4H,IAAhH,SAAEoK,EAAW,KAAI,UAAE4B,EAAY,KAAI,eAAEtB,GAAiB,EAAK,IAAEuB,GAAM,GAAyBxJ,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjH,OAAOtC,KAAKqN,WAAWpF,KAAIzE,GAASA,EAAMqC,SAAShG,EAAO,CAAEoK,WAAU4B,YAAWtB,iBAAgBuB,UAAQwB,MAAKjL,GAAsC,IAAtBA,EAAapB,QAAe,IAAIf,GAClK,CAEA6F,YAAAA,CAAa1C,EAAiBxD,GAA4H,IAAhH,SAAEoK,EAAW,KAAI,UAAE4B,EAAY,KAAI,eAAEtB,GAAiB,EAAK,IAAEuB,GAAM,GAAyBxJ,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtI,OAAOtC,KAAKqN,WAAWpF,KAAIzE,GAASA,EAAMuC,aAAa1C,EAASxD,EAAO,CAAEoK,WAAU4B,YAAWtB,iBAAgBuB,UAAQwB,MAAKjL,GAAsC,IAAtBA,EAAapB,QAAe,IAAIf,GAC/K,CAEAqK,cAAAA,GAA8F,IAA/EtF,EAAgC3C,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAMkI,EAAelI,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,IAAAA,UAAA,GACnE,OAAOtC,KAAKqN,WAAWpF,KAAIzE,GAASA,EAAM+G,eAAetF,EAAMuF,KAAS8C,MAAKjL,GAAsC,IAAtBA,EAAapB,QAAe,IAAIf,GACjI,EAGG,MAAeqN,EAIlBxN,WAAAA,CAAYyD,GACRxD,KAAKwD,MAAQA,EACbxD,KAAKiF,KAAOzB,EAAMyB,IACtB,EAMG,MAAMuI,UAA+BD,EASxCxN,WAAAA,CAAYyD,EAAkBoB,GAG1B,GAFA7C,MAAMyB,GACNxD,KAAK4E,QAAUA,EACX5E,KAAKiF,KAAKI,kBAAoBrF,KAAK4E,QAAQK,KAC3C,MAAM,IAAI1D,MAAM,0BAEpBvB,KAAKyN,2BAA6BzN,KAAKyN,2BAA2BR,KAAKjN,MACvEA,KAAK0N,gCAAkC1N,KAAK0N,gCAAgCT,KAAKjN,MACjFA,KAAK2N,iCAAmC3N,KAAK2N,iCAAiCV,KAAKjN,MACnFA,KAAK4N,qBAAuB,KAC5B5N,KAAK6N,kBAAoB,IAAIC,kBAAkBC,IAC3C,IAAK,MAAMC,KAAYD,EACG,eAAlBC,EAAS/I,MAEA,aADD+I,EAASC,eAETjO,KAAKkO,oBAAoB,WAIzC,GAER,CAESC,IAAAA,GACLnO,KAAKwD,MAAM0J,gBAAgBlN,KAAKoO,oBAChCpO,KAAKwD,MAAM2J,oBAAoB,WAAYnN,KAAKqO,qBAAqB,aACrErO,KAAKwD,MAAM2J,oBAAoB,WAAW,GAC1CnN,KAAKwD,MAAM2J,oBAAoB,YAAanN,KAAK4E,QAAQ0J,eACrD,CAAC,QAAS,YAAY9G,SAASxH,KAAKiF,KAAKI,kBACzCrF,KAAKwD,MAAM2J,oBAAoB,UAAWnN,KAAKqO,qBAAqB,YAExErO,KAAKwD,MAAMwI,MAAM,CAAEzB,gBAAgB,EAAMsB,UAAW7L,OAEpDA,KAAKwD,MAAM+K,iBAAiB,UAAWvO,KAAKyN,4BACxC,CAAC,OAAQ,SAAU,YAAYjG,SAASxH,KAAKiF,KAAKI,iBAClDrF,KAAK4E,QAAQ2J,iBAAiB,QAASvO,KAAK0N,iCAE5C1N,KAAK4E,QAAQ2J,iBAAiB,SAAUvO,KAAK2N,kCAGjD3N,KAAK6N,kBAAkBW,QAAQxO,KAAK4E,QAAS,CACzC6J,YAAY,EACZC,gBAAiB,CAAC,aAE1B,CAESC,MAAAA,GACL3O,KAAKwD,MAAMoL,oBAAoB,UAAW5O,KAAKyN,4BAC3C,CAAC,OAAQ,SAAU,YAAYjG,SAASxH,KAAKiF,KAAKI,iBAClDrF,KAAK4E,QAAQgK,oBAAoB,QAAS5O,KAAK0N,iCAE/C1N,KAAK4E,QAAQgK,oBAAoB,SAAU5O,KAAK2N,kCAEpD3N,KAAK6N,kBAAkBgB,YAC3B,CAEAnB,+BAAAA,CAAgCoB,GAC5B7C,QAAQC,IAAI,kEACZlM,KAAKwD,MAAMuC,aAAa,SAAS,EAAM,CAAE8F,UAAW7L,KAAMuK,gBAAgB,IAC1EvK,KAAK+O,iBACT,CAEApB,gCAAAA,CAAiCmB,GAC7B9O,KAAKwD,MAAMuC,aAAa,SAAS,EAAM,CAAE8F,UAAW7L,KAAMuK,gBAAgB,IACtE,CAAC,QAAS,YAAY/C,SAASxH,KAAKiF,KAAKI,iBACzCrF,KAAKkO,oBAAoB,WAEzBlO,KAAK+O,iBAEb,CAEAtB,0BAAAA,CAA2BqB,GACvB,MAAMrG,EAAWqG,EAAgCrG,QAAQsB,QAAOV,GAAUA,EAAOwC,YAAc7L,OAC/F,IAAK,MAAMqJ,KAAUZ,EACbY,EAAOpE,OAASqD,EAAoBiB,MACpCvJ,KAAKgP,oBACE3F,EAAOpE,OAASqD,EAAoBmB,WAC3CzJ,KAAKiP,sBAAsB5F,EAAOhG,QAG9C,CAEA2L,iBAAAA,GACI/C,QAAQC,IAAI,oEACZ,MAAMrM,EAAQG,KAAKwD,MAAMgC,SAAS,CAAEsG,KAAK,IACnCzE,EAASrH,KAAKiF,KAAKmB,gBAAgBpG,KAAK4E,QAAS/E,GACnDwH,IAAW3D,EAA2B2C,mBACtC4F,QAAQC,IAAI,0FAA2F7E,EAG/G,CAEA+G,gBAAAA,GACI,MAAOvO,EAAOwH,GAAUrH,KAAKiF,KAAKe,gBAAgBhG,KAAK4E,SAIvD,OAHIyC,IAAW3D,EAA2BwC,6BACtC+F,QAAQiD,KAAK,0FAA2F7H,GAErGxH,CACX,CAEAkP,eAAAA,GACI9C,QAAQC,IAAI,gEACZlM,KAAKwD,MAAMqC,SAAS7F,KAAKoO,mBAAoB,CAAEvC,UAAW7L,KAAMuK,gBAAgB,EAAMuB,KAAK,GAC/F,CAEAmD,qBAAAA,CAAsB5L,GAClB4I,QAAQC,IAAI,6EACZ,MAAMrM,EAAQG,KAAKwD,MAAMkC,aAAarC,EAAS,CAAEyI,KAAK,IAChDzE,EAASrH,KAAKiF,KAAKyB,oBAAoB1G,KAAK4E,QAASvB,EAASxD,GACpE,GAAIwH,IAAW3D,EAA2BkD,uBAG1C,GAAIS,IAAW3D,EAA2B+C,oBAwC1CwF,QAAQC,IAAI,+FAAgG7E,QAvCxG,OAAQhE,GACJ,IAAK,UACD,MAAM8L,EAAYnP,KAAKwD,MAAMkC,aAAa,aACT,MAA7B1F,KAAK4N,uBACLuB,EAAUP,oBAAoB,gBAAiB5O,KAAK4N,sBACpD5N,KAAK4N,qBAAuB,MAE5B/N,EACgC,SAA5BsP,EAAUC,MAAMC,SAChBF,EAAUC,MAAMC,QAAU,GAC1BC,uBAAsB,KAClBH,EAAUI,QAAQC,QAAU,MAAM,KAGtCL,EAAUI,QAAQC,QAAU,QAGA,SAA5BL,EAAUC,MAAMC,UAChBrP,KAAK4N,qBAAwBkB,IACzBK,EAAUC,MAAMC,QAAU,MAAM,EAEpCF,EAAUZ,iBAAiB,gBAAiBvO,KAAK4N,qBAAsB,CAAE6B,MAAM,KAEnFN,EAAUI,QAAQC,QAAU,SAEhC,MACJ,IAAK,WACDxP,KAAK4E,QAAQ8K,UAAUC,OAAO,aAAc9P,GAC5C,MACJ,IAAK,qBAEGA,GACAG,KAAKgP,oBAQzB,CAEAX,oBAAAA,CAAqBhL,GACjB,MAAOxD,EAAOwH,GAAUrH,KAAKiF,KAAKqB,oBAAoBtG,KAAK4E,QAASvB,GAIpE,OAHIgE,IAAW3D,EAA2B8C,kCACtCyF,QAAQiD,KAAK,8FAA+F7H,GAEzGxH,CACX,CAEAqO,mBAAAA,CAAoB7K,GAChB4I,QAAQC,IAAI,oEACZlM,KAAKwD,MAAMuC,aAAa1C,EAASrD,KAAKqO,qBAAqBhL,GAAU,CAAEwI,UAAW7L,KAAMuK,gBAAgB,GAC5G,EAGG,MAAMqF,UAAmBhF,YAG5B7K,WAAAA,GACIgC,QACA/B,KAAK6P,KAAO,GACZ7P,KAAKyN,2BAA6BzN,KAAKyN,2BAA2BR,KAAKjN,KAC3E,CAEAyN,0BAAAA,CAA2BqB,GACvB9O,KAAK0K,cAAc,IAAInC,EAAuBuG,EAAgCrG,SAClF,CAEA5H,GAAAA,CAAI2C,GAEA,OADAA,EAAQA,EAAMkI,MACV1L,KAAK6P,KAAKrI,SAAShE,KACvBA,EAAM+K,iBAAiB,UAAWvO,KAAKyN,4BACvCzN,KAAK6P,KAAKzO,KAAKoC,IACR,EACX,CAEAmG,MAAAA,CAAOnG,GAEH,OADAA,EAAQA,EAAMkI,OACT1L,KAAK6P,KAAKrI,SAAShE,KACxBA,EAAMoL,oBAAoB,UAAW5O,KAAKyN,4BAC1CzN,KAAK6P,KAAKzG,OAAOpJ,KAAK6P,KAAKjG,QAAQpG,GAAQ,IACpC,EACX,CAEAnE,GAAAA,CAAI+D,GACA,MAAM0M,EAAS9P,KAAK6P,KAAK9F,QAAOvG,GAASA,EAAMhB,OAASY,IACxD,OAAyB,IAAlB0M,EAAOzO,OAAeyO,EAAO,GAAK,IAAI1C,EAAe0C,EAChE,CAEA,CAACnQ,OAAOoQ,YACJ,OAAO,IAAI7P,IAAIF,KAAK6P,KAAK5H,KAAIzE,GAASA,EAAMhB,QAAOwN,QACvD,EAQG,MAAeC,GAIf,MAAMC,UAAmCD,EACnCE,MAAAA,CAAOC,EAAY3H,GACxBA,EAAQsB,QAAOV,GACXA,EAAOwC,YAAcuE,GACiB,UAAtC/G,EAAO7F,MAAMyB,KAAKI,iBAClBgE,EAAOpE,OAASqD,EAAoBmB,WACjB,YAAnBJ,EAAOhG,SACPgG,EAAOzD,WACThD,SAAQyG,IACN+G,EAAKN,OAAOD,KAAK9F,QAAOvG,GACpBA,EAAMhB,OAAS6G,EAAO7F,MAAMhB,MACG,UAA/BgB,EAAMyB,KAAKI,iBACX7B,GAAS6F,EAAO7F,OAChBA,EAAMkC,aAAa,aACrB9C,SAAQY,IACNA,EAAMuC,aAAa,WAAW,EAAO,CAAE8F,UAAWuE,EAAM7F,gBAAgB,GAAO,GACjF,GAEV,EAGG,MAAM8F,UAA4CJ,EAC5CE,MAAAA,CAAOC,EAAY3H,GAED,KADvBA,EAAUA,EAAQsB,QAAOV,GAAUA,EAAOwC,YAAcuE,KAC5C/O,QACZ+O,EAAKtF,cAAc1I,eAAe,CAAEC,aAAcsG,EAAmB2B,eAAe7B,IACxF,EAGG,MAAM6H,UAAa1F,YAQtB7K,WAAAA,CAAWwQ,GAAsC,IAArC,KAAEH,GAAiCG,EAC3CxO,QACA/B,KAAKoQ,KAAOA,EACZpQ,KAAK6K,UAAY,IAAIlC,EACrB3I,KAAK8K,cAAgB,IAAIjJ,EACzB7B,KAAK8P,OAAS,IAAIF,EAClB5P,KAAKwQ,aAAe,GACpBxQ,KAAKyQ,iBAAmB,GACxBzQ,KAAK0Q,eAAiB1Q,KAAK0Q,eAAezD,KAAKjN,KACnD,CAEA,WAAM2Q,GACe,MAAb3Q,KAAKoQ,OACLpQ,KAAKoQ,KAAKV,UAAU7O,IAAI,gBACxBb,KAAKoQ,KAAKQ,YAAa,EAEvB5Q,KAAKoQ,KAAK7B,iBAAiB,UAAWO,IAClCA,EAAM+B,iBACN7Q,KAAK8Q,SAASC,MAAK,IAAM/Q,KAAKgM,SAAQ,IAG1ChM,KAAKoQ,KAAK7B,iBAAiB,SAAUO,IACjCA,EAAM+B,iBACN7Q,KAAKgM,OAAO,IAGhBhM,KAAK8P,OAAOvB,iBAAiB,UAAWvO,KAAK0Q,gBAC7C1Q,KAAKgR,uBAAuB,IAAId,GAChClQ,KAAKgR,uBAAuB,IAAIX,GAChCrQ,KAAKiR,mBAEb,CAEAP,cAAAA,CAAe5B,GACX,MAAMrG,EAAWqG,EAAgCrG,QACjD,IAAK,MAAMyI,KAAkBlR,KAAKyQ,iBAC9BS,EAAef,OAAOnQ,KAAMyI,EAEpC,CAEAuI,sBAAAA,CAAuBE,GACnBlR,KAAKyQ,iBAAiBrP,KAAK8P,EAC/B,CAEAC,WAAAA,GACI,MAAMC,EAAgC,CAAC,EACvC,IAAK,MAAMhO,KAAapD,KAAK8P,OACzBsB,EAAShO,GAAapD,KAAK8P,OAAOzQ,IAAI+D,GAAWoC,WAErD,OAAO4L,CACX,CAEAH,gBAAAA,GACI,IAAK,MAAMrM,KAAW5E,KAAKoQ,KAAKiB,SAAU,CACtC,IAAK1N,EAAcgB,cAAcC,GAC7B,SAEJ,GAAqB,KAAjBA,EAAQpC,KAAa,SACzB,MAAMgB,EAAQ,IAAImH,EAAU/F,EAAQpC,KAAMmB,EAAcqB,gBAAgBJ,GAAU,CAAEiG,UAAW7K,KAAK6K,UAAWC,cAAe9K,KAAK8K,gBAC7HwG,EAAqB,IAAI9D,EAAuBhK,EAAOoB,GAC7D0M,EAAmBnD,OACnBnO,KAAKwQ,aAAapP,KAAKkQ,GACvBtR,KAAK8P,OAAOjP,IAAI2C,EACpB,CACJ,CAEA+N,UAAAA,CAAW/O,GACP,OAAOxC,KAAKoQ,KAAKiB,SAASG,UAAUhP,EACxC,CAEA,cAAMe,GACF,OAAO,CACX,CAEA,YAAMuN,SACS9Q,KAAKuD,UAGpB,CAEAyI,KAAAA,GACI,IAAK,MAAMxI,KAASxD,KAAK8P,OAAOD,KAC5BrM,EAAMwI,MAAM,CAAEH,UAAW7L,OAE7BA,KAAK8K,cAAc1I,gBACvB,CAEAqP,oBAAAA,CAAqBrO,EAAmBsO,EAA+CzP,GACnFjC,KAAK8K,cAAc3I,UAAUgB,EAAqBC,EAAW,YAAa,CACtE6B,KAAM,eACNtC,SAAUgP,UACN,MAAMpL,QAAiBmL,IAGvB,OADc1R,KAAK8P,OAAOzQ,IAAI+D,GAAWqJ,WAAW,CAAEZ,UAAW7L,OACpD+F,aAAa,WAAYQ,EAAU,CAAEgE,gBAAgB,GAAO,EAE7EtI,aAER,CAEA2P,oBAAAA,CAAqBxO,EAAmByO,EAA+C5P,GACnFjC,KAAKyR,qBAAqBrO,GAAWuO,gBAAmBE,KAAe5P,GACvEjC,KAAK8K,cAAc3I,UAAUgB,EAAqBC,EAAW,WAAY,CACrE6B,KAAM,eACNtC,SAAUgP,UACN,MAAMnC,QAAgBqC,IAGtB,OADc7R,KAAK8P,OAAOzQ,IAAI+D,GAAWqJ,WAAW,CAAEZ,UAAW7L,OACpD+F,aAAa,UAAWyJ,EAAS,CAAEjF,gBAAgB,GAAO,EAE3EtI,UAAW,CAACkB,EAAqBC,EAAW,cAEpD,CAEA0O,sBAAAA,CAAuB1O,EAAmB2O,EAA0BC,EAAmC/P,GACnGjC,KAAK8P,OAAOjP,IAAI,IAAI8J,EAAUvH,EAAW2O,EAAW,CAAElH,UAAW7K,KAAK6K,UAAWC,cAAe9K,KAAK8K,iBACrG9K,KAAK8K,cAAc3I,UAAUiB,EAAW,CACpC6B,KAAM,iBACNtC,SAAUgP,UACN,MAAM9R,QAAcmS,IAGpB,OADchS,KAAK8P,OAAOzQ,IAAI+D,GACjByC,SAAShG,EAAO,CAAEgM,UAAW7L,KAAMuK,gBAAgB,GAAO,EAE3EtI,aAER,CAEAgQ,sBAAAA,CAAuB7O,EAAmB8O,EAAwCjQ,GAC9EjC,KAAK8K,cAActJ,cAAc4B,EAAWD,EAAqBC,EAAW,aAC5EpD,KAAK8K,cAAc3I,UAAUgB,EAAqBC,EAAW,YAAa,CACtE6B,KAAM,iBACNtC,SAAUgP,UACN,MAAMnO,EAAQxD,KAAK8P,OAAOzQ,IAAI+D,GAAWqJ,WAAW,CAAEZ,UAAW7L,OAC3DmS,EAAQ3O,EAAMkC,aAAa,SAEjC,GADAlC,EAAMuC,aAAa,YAAaoM,GAC5BA,EACA,OAAO3O,EAAM+G,iBAEjB,MAAM1K,QAAcqS,IAGpB,OADA1O,EAAMuC,aAAa,WAA2C,IAA/BvC,EAAMqC,SAAShG,GAAOoB,MAC9CuC,EAAM+G,gBAAgB,EAEjCtI,UAAW,CAACkB,EAAqBC,EAAW,YAAanB,IAEjE,CAEAmQ,iCAAAA,CAAkChP,EAAmBiP,EAAkDC,EAAgDrQ,GACnJjC,KAAK8K,cAAc3I,UAAUiB,EAAW,CACpC6B,KAAM,6BACNtC,SAAUgP,UACN,MAAMY,QAAsBF,IACtBrK,QAAgBsK,IAChBE,EAAgBxS,KAAKuR,WAAWnO,GAChCI,EAAQxD,KAAK8P,OAAOzQ,IAAI+D,GAAWqJ,WAAW,CAAEZ,UAAW7L,OAC3DyS,EAAgBjP,EAAMgC,SAAS,CAAEoG,gBAAgB,IACvDpI,EAAMqC,SAAS0M,EAAc1S,OAC7B2S,EAAcE,UAAY,GAC1B,IAAK,MAAM3K,IAAU,CAACwK,KAAkBvK,GAAU,CAC9C,MAAM2K,EAAgBC,SAASC,cAAc,UAC7CF,EAAc9S,MAAQkI,EAAOlI,MAC7B8S,EAAcG,YAAc/K,EAAO+K,YACnCN,EAAcxK,QAAQnH,IAAI8R,EAC9B,CAIA,OAHAnP,EAAMqC,SAAS4M,GACfjP,EAAMuC,aAAa,WAA+B,IAAnBiC,EAAQ3G,QACvCmC,EAAMuC,aAAa,qBAAyC,IAAnBiC,EAAQ3G,QAC1CmC,EAAM+G,gBAAgB,EAEjCtI,aAER,E","sources":["webpack://SmartSystem/webpack/bootstrap","webpack://SmartSystem/webpack/runtime/define property getters","webpack://SmartSystem/webpack/runtime/hasOwnProperty shorthand","webpack://SmartSystem/webpack/runtime/make namespace object","webpack://SmartSystem/./lib/core/dependency-graph.ts","webpack://SmartSystem/./lib/core/effect-manager.ts","webpack://SmartSystem/./lib/core/form.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export class DependencyGraph<Key = string> {\r\n    private _keys: Set<Key>;\r\n    private _dependentMap: Map<Key, Set<Key>>;\r\n    private _dependencyMap: Map<Key, Set<Key>>;\r\n    private _addedDependencies: [Key, Key][];\r\n    private _topologicalOrder: Key[];\r\n\r\n    constructor() {\r\n        this._keys = new Set<Key>();\r\n        this._dependentMap = new Map();\r\n        this._dependencyMap = new Map();\r\n        this._addedDependencies = [];\r\n        this._topologicalOrder = [];\r\n    }\r\n\r\n    getDependencies(): readonly [Key, Key][] {\r\n        return this._addedDependencies;\r\n    }\r\n\r\n    buildDependenciesMap(): void {\r\n        this._dependentMap = new Map();\r\n        this._dependencyMap = new Map();\r\n        this._keys = new Set();\r\n        this._topologicalOrder = [];\r\n\r\n        const dependencies = this.getDependencies();\r\n\r\n        for (const [dependent, dependency] of dependencies) {\r\n            this._keys.add(dependent);\r\n            this._keys.add(dependency);\r\n            if (!this._dependentMap.has(dependent)) {\r\n                this._dependentMap.set(dependent, new Set());\r\n            }\r\n            if (!this._dependentMap.has(dependency)) {\r\n                this._dependentMap.set(dependency, new Set());\r\n            }\r\n            if (!this._dependencyMap.has(dependent)) {\r\n                this._dependencyMap.set(dependent, new Set());\r\n            }\r\n            if (!this._dependencyMap.has(dependency)) {\r\n                this._dependencyMap.set(dependency, new Set());\r\n            }\r\n            this._dependentMap.get(dependent)!.add(dependency);\r\n            this._dependencyMap.get(dependency)!.add(dependent);\r\n        }\r\n        const inDegree = new Map();\r\n        for (const [dependent, dependencies] of this._dependentMap) {\r\n            inDegree.set(dependent, dependencies.size);\r\n        }\r\n        const queue: Key[] = [];\r\n        for (const [dependent, degree] of inDegree) {\r\n            if (degree === 0) {\r\n                queue.push(dependent);\r\n            }\r\n        }\r\n        while (queue.length > 0) {\r\n            const key = queue.shift()!;\r\n            this._topologicalOrder.push(key);\r\n            for (const dependency of this._dependencyMap.get(key)!) {\r\n                inDegree.set(dependency, inDegree.get(dependency) - 1);\r\n                if (inDegree.get(dependency) === 0) {\r\n                    queue.push(dependency);\r\n                }\r\n            }\r\n        }\r\n        if (this._topologicalOrder.length !== this._keys.size) {\r\n            throw new Error(\"There are cyclic dependencies\");\r\n        }\r\n    }\r\n\r\n    addDependency(dependent: Key, dependency: Key): void {\r\n        this._addedDependencies.push([dependent, dependency]);\r\n    }\r\n\r\n    get keys(): ReadonlySet<Key> {\r\n        return this._keys;\r\n    }\r\n\r\n    get topologicalOrder(): readonly Key[] {\r\n        return this._topologicalOrder;\r\n    }\r\n\r\n    get dependentMap(): ReadonlyMap<Key, ReadonlySet<Key>> {\r\n        return this._dependentMap;\r\n    }\r\n\r\n    get dependencyMap(): ReadonlyMap<Key, ReadonlySet<Key>> {\r\n        return this._dependencyMap;\r\n    }\r\n}","import { DependencyGraph } from \"./dependency-graph\";\r\n\r\nexport interface Effect {\r\n    type: string;\r\n    callback: () => Promise<Set<string>> | Set<string>;\r\n    dependsOn: string[];\r\n}\r\n\r\nexport class EffectManager extends DependencyGraph {\r\n    private _keyEffect: Map<string, Effect> = new Map();\r\n\r\n    constructor() {\r\n        super();\r\n        this._keyEffect = new Map();\r\n    }\r\n\r\n    override getDependencies(): readonly [string, string][] {\r\n        const dependencies: [string, string][] = [];\r\n        for (const [key, effect] of this._keyEffect) {\r\n            for (const dependency of effect.dependsOn) {\r\n                dependencies.push([key, dependency])\r\n            }\r\n        }\r\n        return super.getDependencies().concat(dependencies);\r\n    }\r\n\r\n    addEffect(key: string, effect: Effect) {\r\n        this._keyEffect.set(key, effect)\r\n    }\r\n\r\n    async triggerEffects({ changedNames = null }: { changedNames?: Set<string> | null } = {}) {\r\n        for (const name of this.topologicalOrder) {\r\n            if (changedNames != null && this.dependentMap.get(name)!.intersection(changedNames).size === 0) {\r\n                continue;\r\n            }\r\n            const effect = this._keyEffect.get(name);\r\n            if (effect != null) {\r\n                const changedNamesByEffect = await effect.callback();\r\n                if (changedNames) {\r\n                    changedNamesByEffect.forEach(changedName => { changedNames.add(changedName); });\r\n                }\r\n            } else {\r\n                if (changedNames) {\r\n                    changedNames.add(name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { EffectManager } from \"./effect-manager\";\r\nexport { EffectManager };\r\n\r\nfunction deepEqual(a: any, b: any): boolean {\r\n    if (a === b) return true;\r\n\r\n    if (typeof a !== \"object\" || typeof b !== \"object\" || a === null || b === null) {\r\n        return false;\r\n    }\r\n\r\n    const aKeys = new Set(Object.keys(a));\r\n    const bKeys = new Set(Object.keys(b));\r\n\r\n    if (aKeys.size !== bKeys.size) return false;\r\n    for (const key of aKeys) {\r\n        if (!deepEqual(a[key], b[key])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getMetaDependencyKey(fieldName: string, metaKey: string) {\r\n    return `${fieldName}:${metaKey}`;\r\n}\r\n\r\n\r\n\r\nexport class FormFieldValidator {\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    validate(field: FormField) {\r\n\r\n    }\r\n}\r\n\r\nexport class FormFieldValidatorRequired extends FormFieldValidator {\r\n    constructor() {\r\n        super(\"Required\");\r\n    }\r\n\r\n    validate(field: FormField): void {\r\n\r\n    }\r\n}\r\n\r\nexport type FormElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\nexport enum FormFieldTypeElementStatus {\r\n    VALUE_SUCCESSFULLY_RECEIVED = \"value-successfully-received\",\r\n    VALUE_SET_SUCCESS = \"value-set-success\",\r\n    META_VALUE_SUCCESSFULLY_RECEIVED = \"meta-value-successfully-received\",\r\n    META_VALUE_SET_SUCCESS = \"meta-value-set-success\",\r\n    FAILED_TO_SET_VALUE = \"failed-to-set-value\",\r\n    FAILED_TO_SET_META_VALUE = \"failed-to-set-meta-value\",\r\n    INVALID_ELEMENT = \"invalid-element\",\r\n    TYPE_MISMATCH = \"type-mismatch\",\r\n    META_KEY_NOT_EXISTS = \"meta-key-not-exists\"\r\n}\r\n\r\nexport class FormFieldType {\r\n    static object() {\r\n        return new FormFieldTypeObject();\r\n    }\r\n\r\n    static text() {\r\n        return new FormFieldTypeText();\r\n    }\r\n\r\n    static number() {\r\n        return new FormFieldTypeNumber();\r\n    }\r\n\r\n    static date() {\r\n        return new FormFieldTypeDate();\r\n    }\r\n\r\n    static select({ multiple = false } = {}) {\r\n        return new FormFieldTypeSelect().multiple(multiple);\r\n    }\r\n\r\n    static checkbox() {\r\n        return new FormFieldTypeCheckbox();\r\n    }\r\n\r\n    static radio() {\r\n        return new FormFieldTypeRadio();\r\n    }\r\n\r\n    static isFormElement(element: Element): element is FormElement {\r\n        return element instanceof HTMLInputElement || element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement;\r\n    }\r\n\r\n    static fromFormElement(element: FormElement): FormFieldType {\r\n        switch (element.type) {\r\n            case \"select-one\":\r\n                return this.select();\r\n            case \"select-multiple\":\r\n                return this.select().multiple();\r\n            case \"number\":\r\n                return this.number();\r\n            case \"text\":\r\n                return this.text();\r\n            case \"textarea\":\r\n                return this.text().area();\r\n            case \"checkbox\":\r\n                return this.checkbox();\r\n            case \"radio\":\r\n                return this.radio();\r\n            case \"date\":\r\n                return this.date();\r\n            default:\r\n                throw new Error(`As element type ${element} not has`);\r\n        }\r\n    }\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    isEqual(a: any, b: any): boolean { return a === b; }\r\n    isEmpty() { }\r\n    asElementType() { return \"hidden\"; }\r\n\r\n    fetch() {\r\n    }\r\n\r\n    getFieldValue(field: FormField): any {\r\n        return field.getValue();\r\n    }\r\n\r\n    getFieldMetaValue(field: FormField, metaKey: string): any {\r\n        return field.getMetaValue(metaKey);\r\n    }\r\n\r\n    setFieldValue(field: FormField, newValue: any): Set<string> {\r\n        return field.setValue(newValue);\r\n    }\r\n\r\n    setFieldMetaValue(field: FormField, metaKey: string, newValue: any): Set<string> {\r\n        return field.setMetaValue(metaKey, newValue);\r\n    }\r\n\r\n    getElementValue(element: Element): [any, FormFieldTypeElementStatus] {\r\n        if (!FormFieldType.isFormElement(element)) {\r\n            return [null, FormFieldTypeElementStatus.INVALID_ELEMENT];\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return [null, FormFieldTypeElementStatus.TYPE_MISMATCH];\r\n        }\r\n        return [element.value, FormFieldTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED];\r\n    }\r\n\r\n    setElementValue(element: Element, newValue: any): FormFieldTypeElementStatus {\r\n        if (!FormFieldType.isFormElement(element)) {\r\n            return FormFieldTypeElementStatus.INVALID_ELEMENT;\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return FormFieldTypeElementStatus.TYPE_MISMATCH;\r\n        }\r\n        element.value = newValue;\r\n        return FormFieldTypeElementStatus.VALUE_SET_SUCCESS;\r\n    }\r\n\r\n    getElementMetaValue(element: Element, metaKey: string): [any, FormFieldTypeElementStatus] {\r\n        if (!FormFieldType.isFormElement(element)) {\r\n            return [undefined, FormFieldTypeElementStatus.INVALID_ELEMENT];\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return [undefined, FormFieldTypeElementStatus.TYPE_MISMATCH];\r\n        }\r\n        if (metaKey === \"disabled\") {\r\n            return [element.disabled, FormFieldTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [undefined, FormFieldTypeElementStatus.META_KEY_NOT_EXISTS]\r\n    }\r\n\r\n    setElementMetaValue(element: Element, metaKey: string, newValue: any): FormFieldTypeElementStatus {\r\n        if (!FormFieldType.isFormElement(element)) {\r\n            return FormFieldTypeElementStatus.INVALID_ELEMENT;\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return FormFieldTypeElementStatus.TYPE_MISMATCH;\r\n        }\r\n        if (metaKey === \"disabled\") {\r\n            element.disabled = Boolean(newValue);\r\n            return FormFieldTypeElementStatus.META_VALUE_SET_SUCCESS;\r\n        }\r\n        return FormFieldTypeElementStatus.META_KEY_NOT_EXISTS;\r\n    }\r\n\r\n    getInitialValue(): any {\r\n        return null;\r\n    }\r\n\r\n    getInitialMeta(): Map<string, any> {\r\n        const meta = new Map();\r\n        meta.set(\"disabled\", false);\r\n        meta.set(\"dirty\", false);\r\n        return meta;\r\n    }\r\n\r\n    isSameType(otherType: FormFieldType): boolean {\r\n        return this.name === otherType.name;\r\n    }\r\n}\r\n\r\nexport class FormFieldTypeText extends FormFieldType {\r\n    private _area: boolean;\r\n\r\n    constructor() {\r\n        super(\"String\");\r\n        this._area = false;\r\n    }\r\n\r\n    area(value = true): this {\r\n        this._area = value;\r\n        return this;\r\n    }\r\n\r\n    asElementType(): string {\r\n        return this._area ? \"textarea\" : \"text\";\r\n    }\r\n}\r\n\r\nexport class FormFieldTypeNumber extends FormFieldType {\r\n    private _precision: number = 2;\r\n    constructor() {\r\n        super(\"Number\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"number\";\r\n    }\r\n}\r\n\r\nexport class FormFieldTypeDate extends FormFieldType {\r\n    constructor() {\r\n        super(\"Date\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"date\";\r\n    }\r\n\r\n    isEqual(a: any, b: any): boolean {\r\n        return a.toDateString() === b.toDateString();\r\n    }\r\n}\r\n\r\nexport class FormFieldTypeRadio extends FormFieldType {\r\n    constructor() {\r\n        super(\"Radio\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"radio\";\r\n    }\r\n\r\n    getInitialMeta(): Map<string, any> {\r\n        const meta = super.getInitialMeta();\r\n        meta.set(\"checked\", false);\r\n        return meta;\r\n    }\r\n\r\n    override getFieldValue(field: FormField): any {\r\n        return field.getMetaValue(\"checked\") ? field.getValue() : null;\r\n    }\r\n\r\n    override setFieldValue(field: FormField, newValue: any): any {\r\n        return field.setMetaValue(\"checked\", newValue != null && field.getValue() === newValue);\r\n    }\r\n\r\n    override getElementMetaValue(element: HTMLInputElement, metaKey: string): [any, FormFieldTypeElementStatus] {\r\n        const [value, status] = super.getElementMetaValue(element, metaKey);\r\n        if (status !== FormFieldTypeElementStatus.META_KEY_NOT_EXISTS) {\r\n            return [value, status];\r\n        }\r\n        if (metaKey === \"checked\") {\r\n            return [element.checked, FormFieldTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [undefined, FormFieldTypeElementStatus.META_KEY_NOT_EXISTS];\r\n    }\r\n\r\n    override setElementMetaValue(element: HTMLInputElement, metaKey: string, newValue: any): FormFieldTypeElementStatus {\r\n        const status = super.setElementMetaValue(element, metaKey, newValue);\r\n        if (status !== FormFieldTypeElementStatus.META_KEY_NOT_EXISTS) return status;\r\n        if (metaKey === \"checked\") {\r\n            element.checked = Boolean(newValue);\r\n            return FormFieldTypeElementStatus.META_VALUE_SET_SUCCESS;\r\n        }\r\n        return FormFieldTypeElementStatus.FAILED_TO_SET_META_VALUE;\r\n    }\r\n}\r\n\r\nexport class FormFieldTypeCheckbox extends FormFieldType {\r\n    constructor() {\r\n        super(\"Checkbox\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"checkbox\";\r\n    }\r\n\r\n    getInitialMeta(): Map<string, any> {\r\n        const meta = super.getInitialMeta();\r\n        meta.set(\"checked\", false);\r\n        return meta;\r\n    }\r\n\r\n    override getFieldValue(field: FormField): any {\r\n        const value = field.getValue();\r\n        if ([\"\", \"on\"].includes(value)) return field.getMetaValue(\"checked\");\r\n        return field.getMetaValue(\"checked\") ? value : null;\r\n    }\r\n\r\n    override setFieldValue(field: FormField, newValue: any): any {\r\n        if ([\"\", \"on\"].includes(field.getValue())) return field.setMetaValue(\"checked\", newValue);\r\n        return field.setMetaValue(\"checked\", newValue != null && field.getValue() === newValue);\r\n    }\r\n\r\n    override getElementMetaValue(element: HTMLInputElement, metaKey: string): [any, FormFieldTypeElementStatus] {\r\n        const [value, status] = super.getElementMetaValue(element, metaKey);\r\n        if (status !== FormFieldTypeElementStatus.META_KEY_NOT_EXISTS) {\r\n            return [value, status];\r\n        }\r\n        if (metaKey === \"checked\") {\r\n            return [element.checked, FormFieldTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [undefined, FormFieldTypeElementStatus.META_KEY_NOT_EXISTS];\r\n    }\r\n\r\n    override setElementMetaValue(element: HTMLInputElement, metaKey: string, newValue: any): FormFieldTypeElementStatus {\r\n        const status = super.setElementMetaValue(element, metaKey, newValue);\r\n        if (status !== FormFieldTypeElementStatus.META_KEY_NOT_EXISTS) return status;\r\n        if (metaKey === \"checked\") {\r\n            element.checked = Boolean(newValue);\r\n            return FormFieldTypeElementStatus.META_VALUE_SET_SUCCESS;\r\n        }\r\n        return FormFieldTypeElementStatus.FAILED_TO_SET_META_VALUE;\r\n    }\r\n}\r\n\r\nexport class FormFieldTypeSelect extends FormFieldType {\r\n    private _multiple: boolean;\r\n    private _of: FormFieldType;\r\n\r\n    constructor() {\r\n        super(\"select\");\r\n        this._multiple = false;\r\n        /**\r\n         * @type {FormFieldType}\r\n         */\r\n        this._of = FormFieldType.text();\r\n    }\r\n\r\n    asElementType(): string {\r\n        return this._multiple ? \"select-multiple\" : \"select-one\";\r\n    }\r\n\r\n    getInitialMeta(): Map<string, any> {\r\n        const meta = super.getInitialMeta();\r\n        meta.set(\"optionsInitialized\", false);\r\n        return meta;\r\n    }\r\n\r\n    multiple(value: boolean = true): this {\r\n        this._multiple = value;\r\n        return this;\r\n    }\r\n\r\n    of(type: FormFieldType): this {\r\n        this._of = type;\r\n        return this;\r\n    }\r\n\r\n    override getElementValue(element: HTMLSelectElement): [any, FormFieldTypeElementStatus] {\r\n        if (!FormFieldType.isFormElement(element)) {\r\n            return [undefined, FormFieldTypeElementStatus.INVALID_ELEMENT];\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return [undefined, FormFieldTypeElementStatus.TYPE_MISMATCH];\r\n        }\r\n        if (this._multiple) {\r\n            return [Array.from(element.selectedOptions, option => option.value), FormFieldTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [element.value, FormFieldTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED];\r\n    }\r\n\r\n    override setElementValue(element: HTMLSelectElement, newValue: any): FormFieldTypeElementStatus {\r\n        if (!FormFieldType.isFormElement(element)) {\r\n            return FormFieldTypeElementStatus.INVALID_ELEMENT;\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return FormFieldTypeElementStatus.TYPE_MISMATCH;\r\n        }\r\n        let options: (HTMLOptionElement | null)[];\r\n        if (this._multiple) {\r\n            options = newValue.map((value: any): HTMLOptionElement | null => {\r\n                return element.querySelector(`option[value=\"${value}\"]`);\r\n            });\r\n        } else {\r\n            options = [\r\n                element.querySelector(`option[value=\"${newValue}\"]`)\r\n            ]\r\n        }\r\n        if (options.some(option => option == null)) return FormFieldTypeElementStatus.FAILED_TO_SET_VALUE;\r\n        (options as HTMLOptionElement[]).forEach(option => {\r\n            option.selected = true;\r\n        });\r\n        return FormFieldTypeElementStatus.VALUE_SET_SUCCESS;\r\n    }\r\n}\r\n\r\nexport class FormFieldTypeObject extends FormFieldType {\r\n    constructor() {\r\n        super(\"Object\");\r\n    }\r\n\r\n    isEqual(a: any, b: any): boolean {\r\n        return deepEqual(a, b);\r\n    }\r\n}\r\n\r\nexport enum FormFieldChangeType {\r\n    Value,\r\n    MetaValue\r\n}\r\n\r\nexport interface FormFieldValueChange {\r\n    stateKey: string;\r\n    type: FormFieldChangeType.Value;\r\n    field: FormField;\r\n    oldValue: any;\r\n    newValue: any;\r\n    initiator: any;\r\n    processed: boolean;\r\n    last: boolean;\r\n    date: Date;\r\n}\r\n\r\nexport interface FormFieldMetaValueChange {\r\n    stateKey: string;\r\n    type: FormFieldChangeType.MetaValue;\r\n    field: FormField;\r\n    metaKey: string;\r\n    oldValue: any;\r\n    newValue: any;\r\n    initiator: any;\r\n    processed: boolean;\r\n    last: boolean;\r\n    date: Date;\r\n}\r\n\r\nexport type FormFieldChange = FormFieldValueChange | FormFieldMetaValueChange;\r\n\r\nexport class FormFieldChangesEvent extends Event {\r\n    constructor(public changes: FormFieldChange[]) {\r\n        super(\"changes\", { cancelable: true });\r\n    }\r\n}\r\n\r\ninterface FormFieldChangeFilter {\r\n    type?: FormFieldChangeType | null;\r\n    onlyCurrentState?: boolean;\r\n    last?: boolean | null;\r\n    processed?: boolean | null;\r\n}\r\n\r\ninterface FormFieldAnyChangeFilter extends FormFieldChangeFilter {\r\n    type?: FormFieldChangeType | null;\r\n    metaKey?: never;\r\n}\r\n\r\ninterface FormFieldValueChangeFilter extends FormFieldChangeFilter {\r\n    type: FormFieldChangeType.Value;\r\n    metaKey?: never;\r\n}\r\n\r\ninterface FormFieldMetaValueChangeFilter extends FormFieldChangeFilter {\r\n    type: FormFieldChangeType.MetaValue;\r\n    metaKey?: string | null;\r\n}\r\n\r\nexport class FormFieldChangeSet {\r\n    private _changes: FormFieldChange[];\r\n    private _maxSize: number;\r\n\r\n    constructor(maxSize = 128) {\r\n        this._changes = [];\r\n        this._maxSize = maxSize;\r\n    }\r\n\r\n    trimProcessedChanges() {\r\n        while (this._changes.length > this._maxSize) {\r\n            const index = this._changes.findIndex(c => c.processed);\r\n            if (index === -1) break;\r\n            this._changes.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    add(change: FormFieldChange): void {\r\n        let lastChange: FormFieldChange | undefined | null = null;\r\n        if (change.type === FormFieldChangeType.Value) {\r\n            lastChange = this.getFieldChange(change.field, { type: FormFieldChangeType.Value });\r\n        } else if (change.type === FormFieldChangeType.MetaValue) {\r\n            lastChange = this.getFieldChange(change.field, { type: FormFieldChangeType.MetaValue, metaKey: change.metaKey });\r\n        }\r\n        if (lastChange != null) {\r\n            lastChange.last = false;\r\n        }\r\n        this._changes.push(change);\r\n        this.trimProcessedChanges();\r\n    }\r\n\r\n    remove(change: FormFieldChange): void {\r\n        this._changes.splice(this._changes.indexOf(change), 1);\r\n    }\r\n\r\n    getFieldChange(field: FormField, filter: FormFieldValueChangeFilter): FormFieldValueChange | undefined;\r\n    getFieldChange(field: FormField, filter: FormFieldMetaValueChangeFilter): FormFieldMetaValueChange | undefined;\r\n    getFieldChange(field: FormField, filter: FormFieldAnyChangeFilter): FormFieldChange | undefined;\r\n    getFieldChange(field: FormField, { onlyCurrentState = true, last = true, processed = false, type = null, metaKey = null }: FormFieldAnyChangeFilter | FormFieldValueChangeFilter | FormFieldMetaValueChangeFilter = {}): FormFieldChange | undefined {\r\n        let changes = this.getFieldChanges(field, { onlyCurrentState, last, processed, type });\r\n        if (type === FormFieldChangeType.MetaValue && metaKey != null) {\r\n            changes = (changes as FormFieldMetaValueChange[]).filter(change => change.metaKey === metaKey);\r\n        }\r\n        return changes.at(-1);\r\n    }\r\n\r\n    getFieldChanges(field: FormField, filter?: FormFieldValueChangeFilter): FormFieldValueChange[];\r\n    getFieldChanges(field: FormField, filter?: FormFieldMetaValueChangeFilter): FormFieldMetaValueChange[];\r\n    getFieldChanges(field: FormField, filter?: FormFieldAnyChangeFilter): FormFieldChange[];\r\n    getFieldChanges(field: FormField, { onlyCurrentState = true, last = true, processed = false, type = null }: FormFieldAnyChangeFilter | FormFieldValueChangeFilter | FormFieldMetaValueChangeFilter = {}): FormFieldChange[] {\r\n        let changes = this._changes.filter(change => change.field === field);\r\n        if (type != null) { changes = changes.filter(change => change.type === type); }\r\n        if (last != null) { changes = changes.filter(change => change.last === last); }\r\n        if (processed != null) { changes = changes.filter(change => change.processed === processed); }\r\n        if (onlyCurrentState) { changes = changes.filter(change => change.stateKey === field.currentStateKey); }\r\n        return changes\r\n    }\r\n\r\n    hasChanges(field: FormField): boolean {\r\n        return this.getFieldChanges(field, { onlyCurrentState: true, last: true }).length !== 0;\r\n    }\r\n\r\n    markProcessed(changes: FormFieldChange[]): void {\r\n        changes.forEach(change => { change.processed = true; });\r\n        this.trimProcessedChanges();\r\n    }\r\n\r\n    static asChangedName(change: FormFieldChange): string | null {\r\n        if (change.type === FormFieldChangeType.Value) {\r\n            return change.field.name;\r\n        }\r\n        if (change.type === FormFieldChangeType.MetaValue) {\r\n            return getMetaDependencyKey(change.field.name, change.metaKey);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static asChangedNames(changes: FormFieldChange[]): Set<string> {\r\n        const changedNames = new Set<string>();\r\n        for (const change of changes) {\r\n            const changedName = this.asChangedName(change);\r\n            if (changedName == null) continue;\r\n            changedNames.add(changedName);\r\n        }\r\n        return changedNames;\r\n    }\r\n\r\n    processChanges(field: FormField, type: FormFieldChangeType | null = null, dryRun: boolean = false): Set<string> {\r\n        const lastChanges = this.getFieldChanges(field, { onlyCurrentState: true, type });\r\n        if (!dryRun) {\r\n            this.markProcessed(this.getFieldChanges(field, { onlyCurrentState: true, last: null, type }));\r\n            field.dispatchEvent(new FormFieldChangesEvent(lastChanges));\r\n        }\r\n        return FormFieldChangeSet.asChangedNames(lastChanges);\r\n    }\r\n}\r\n\r\nexport interface FormFieldContext {\r\n    stateKey?: string | null;\r\n    initiator?: any | null;\r\n    processChanges?: boolean;\r\n    disabledIsNull?: boolean;\r\n    raw?: boolean;\r\n}\r\n\r\nexport class FormField extends EventTarget {\r\n    private _name: string;\r\n    private _type: FormFieldType;\r\n    private _changeSet: FormFieldChangeSet;\r\n    private _initializedStateKeys: Set<string>;\r\n    private _initialValue: any;\r\n    private _valueMap: Map<string, any>;\r\n    private _initialMeta: Map<string, any>;\r\n    private _metaMap: Map<string, Map<string, any>>;\r\n    private _currentStateKey: string;\r\n\r\n    constructor(name: string, type: FormFieldType, { changeSet = null, effectManager = null }: { changeSet?: FormFieldChangeSet | null, effectManager?: EffectManager | null } = {}) {\r\n        super();\r\n        this._name = name;\r\n        this._type = type;\r\n        this._initializedStateKeys = new Set();\r\n\r\n        this._initialValue = this.type.getInitialValue();\r\n        this._valueMap = new Map();\r\n\r\n        this._initialMeta = this.type.getInitialMeta();\r\n        this._metaMap = new Map();\r\n\r\n        this._changeSet = changeSet ?? new FormFieldChangeSet(32);\r\n        this._currentStateKey = \"default\";\r\n        this.initializeState({ stateKey: \"default\" });\r\n        if (effectManager != null) {\r\n            this.initializeDependencies(effectManager);\r\n        }\r\n    }\r\n\r\n    get self(): this {\r\n        return this;\r\n    }\r\n\r\n    get currentStateKey() {\r\n        return this._currentStateKey;\r\n    }\r\n\r\n    get context(): FormFieldContext {\r\n        return {\r\n            disabledIsNull: true,\r\n            initiator: null,\r\n            stateKey: null,\r\n            raw: false,\r\n            processChanges: false\r\n        };\r\n    }\r\n\r\n    get changeSet(): FormFieldChangeSet {\r\n        return this._changeSet;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get type(): FormFieldType {\r\n        return this._type;\r\n    }\r\n\r\n    clearInitialMeta(): void {\r\n        this._initialMeta = new Map();\r\n    }\r\n\r\n    reset({ stateKey = null, initiator = null, processChanges = false }: FormFieldContext = {}): Set<string> {\r\n        stateKey ??= this._currentStateKey;\r\n        console.log(\"[FormField.reset] Reset state `%s` for field `%s`\", stateKey, this.name);\r\n        this.setValue(this._initialValue, { raw: true, stateKey, initiator });\r\n        for (const [metaKey, value] of this._initialMeta.entries()) {\r\n            this.setMetaValue(metaKey, value, { raw: true, stateKey, initiator });\r\n        }\r\n        return this.processChanges(null, !processChanges);\r\n    }\r\n\r\n    initializeState({ stateKey, initiator = null }: FormFieldContext & { stateKey: string }): void {\r\n        if (!this._initializedStateKeys.has(stateKey)) {\r\n            console.log(\"[FormField.initializeState] Initializing state key `%s` for field `%s`\", stateKey, this.name);\r\n            this._initializedStateKeys.add(stateKey);\r\n            this._valueMap.set(stateKey, null);\r\n            this._metaMap.set(stateKey, new Map());\r\n            this.reset({ stateKey, initiator, processChanges: true });\r\n        }\r\n    }\r\n\r\n    switchState({ stateKey, initiator = null, processChanges = false }: FormFieldContext & { stateKey: string }): Set<string> {\r\n        console.log(\"[FormField.switchState] Switching state for field `%s` from `%s` to `%s`\", this.name, this._currentStateKey, stateKey);\r\n        this.initializeState({ stateKey, initiator });\r\n        const oldValue = this._valueMap.get(this._currentStateKey);\r\n        const newValue = this._valueMap.get(stateKey);\r\n        if (!this.type.isEqual(oldValue, newValue)) {\r\n            const change: FormFieldChange = {\r\n                stateKey,\r\n                type: FormFieldChangeType.Value,\r\n                field: this,\r\n                initiator,\r\n                oldValue,\r\n                newValue,\r\n                date: new Date(),\r\n                last: true,\r\n                processed: false\r\n            };\r\n            this.changeSet.add(change);\r\n        }\r\n\r\n        for (const [metaKey, newValue] of this._metaMap.get(stateKey)!.entries()) {\r\n            const oldValue = this._metaMap.get(this._currentStateKey)!.get(metaKey);\r\n            if (oldValue !== newValue) {\r\n                const change: FormFieldChange = {\r\n                    stateKey,\r\n                    type: FormFieldChangeType.MetaValue,\r\n                    field: this,\r\n                    initiator,\r\n                    metaKey,\r\n                    oldValue,\r\n                    newValue,\r\n                    date: new Date(),\r\n                    last: true,\r\n                    processed: false\r\n                };\r\n                this.changeSet.add(change);\r\n            }\r\n        }\r\n        this._currentStateKey = stateKey;\r\n        return this.processChanges(null, !processChanges);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {EffectManager} effectManager \r\n     */\r\n    initializeDependencies(effectManager: EffectManager) {\r\n        effectManager.addDependency(this.name, getMetaDependencyKey(this.name, \"disabled\"));\r\n        switch (this.type.asElementType()) {\r\n            case \"checkbox\":\r\n            case \"radio\":\r\n                effectManager.addDependency(this.name, getMetaDependencyKey(this.name, \"checked\"));\r\n                break;\r\n        }\r\n    }\r\n\r\n    getAdapter(outerContext: FormFieldContext) {\r\n        return new Proxy(this, {\r\n            get(target, propertyKey, receiver) {\r\n                switch (propertyKey) {\r\n                    case \"self\":\r\n                        return target;\r\n                    case \"context\":\r\n                        return outerContext;\r\n                    case \"getAdapter\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getAdapter({ ...outerContext, ...innerContext });\r\n                    case \"getValue\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getValue({ ...outerContext, ...innerContext });\r\n                    case \"getMetaValue\":\r\n                        return (metaKey: string, innerContext: FormFieldContext = {}) => target.getMetaValue(metaKey, { ...outerContext, ...innerContext });\r\n                    case \"setValue\":\r\n                        return (newValue: any, innerContext: FormFieldContext = {}) => target.setValue(newValue, { ...outerContext, ...innerContext });\r\n                    case \"setMetaValue\":\r\n                        return (metaKey: string, newValue: any, innerContext: FormFieldContext = {}) => target.setMetaValue(metaKey, newValue, { ...outerContext, ...innerContext });\r\n                    default:\r\n                        const value = Reflect.get(target, propertyKey, receiver);\r\n                        return typeof value === \"function\" ? value.bind(target) : value;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getValue({ stateKey = null, raw = false, disabledIsNull = true }: FormFieldContext = {}): any {\r\n        if (raw) {\r\n            stateKey ??= this._currentStateKey\r\n            this.initializeState({ stateKey });\r\n            return this._valueMap.get(stateKey);\r\n        }\r\n        if (disabledIsNull && this.getMetaValue(\"disabled\", { stateKey })) {\r\n            return null;\r\n        }\r\n        return this.type.getFieldValue(this.getAdapter({ stateKey, raw: true }));\r\n    }\r\n\r\n    setInitialValue(newValue: any): void {\r\n        this._initialValue = newValue;\r\n    }\r\n\r\n    setValue(newValue: any, { stateKey = null, raw = false, initiator = null, processChanges = false }: FormFieldContext = {}): Set<string> {\r\n        if (raw) {\r\n            initiator ??= this;\r\n            stateKey ??= this._currentStateKey;\r\n            this.initializeState({ stateKey, initiator });\r\n            const oldValue = this.getValue({ stateKey, raw: true });\r\n            if (this.type.isEqual(oldValue, newValue)) return new Set();\r\n            this._valueMap.set(stateKey, newValue);\r\n            const change: FormFieldChange = {\r\n                stateKey,\r\n                type: FormFieldChangeType.Value,\r\n                field: this,\r\n                initiator,\r\n                oldValue,\r\n                newValue,\r\n                date: new Date(),\r\n                last: true,\r\n                processed: false\r\n            };\r\n            console.log(\"[FormField.setValue] Value changed:\", { oldValue, newValue, stateKey });\r\n            this.changeSet.add(change);\r\n            return this.processChanges(FormFieldChangeType.Value, !processChanges);\r\n        }\r\n        return this.type.setFieldValue(this.getAdapter({ stateKey, raw: true, processChanges, initiator }), newValue);\r\n    }\r\n\r\n    getMetaValue(metaKey: string, { stateKey = null, raw = false }: FormFieldContext = {}): any {\r\n        if (raw) {\r\n            stateKey ??= this._currentStateKey\r\n            this.initializeState({ stateKey });\r\n            const meta = this._metaMap.get(stateKey);\r\n            return meta!.get(metaKey);\r\n        }\r\n        return this.type.getFieldMetaValue(this.getAdapter({ raw: true, stateKey }), metaKey);\r\n    }\r\n\r\n    setInitialMetaValue(metaKey: string, newValue: any): void {\r\n        this._initialMeta.set(metaKey, newValue);\r\n    }\r\n\r\n    setMetaValue(metaKey: string, newValue: any, { stateKey = null, initiator = null, processChanges = false, raw = false }: FormFieldContext = {}): Set<string> {\r\n        if (raw) {\r\n            initiator ??= this;\r\n            stateKey ??= this._currentStateKey;\r\n            this.initializeState({ stateKey, initiator });\r\n            const oldValue = this.getMetaValue(metaKey, { stateKey });\r\n            if (oldValue === newValue) return new Set();\r\n            this._metaMap.get(stateKey)!.set(metaKey, newValue);\r\n            const change: FormFieldChange = {\r\n                stateKey,\r\n                type: FormFieldChangeType.MetaValue,\r\n                field: this,\r\n                initiator,\r\n                metaKey,\r\n                oldValue,\r\n                newValue,\r\n                date: new Date(),\r\n                last: true,\r\n                processed: false\r\n            };\r\n            this.changeSet.add(change);\r\n            console.log(\"[FormField.setMetaValue] Meta\", getMetaDependencyKey(this.name, metaKey), \"value changed:\", { oldValue, newValue, stateKey });\r\n            return this.processChanges(FormFieldChangeType.MetaValue, !processChanges);\r\n        }\r\n        return this.type.setFieldMetaValue(this.getAdapter({ stateKey, raw: true, initiator, processChanges }), metaKey, newValue);\r\n    }\r\n\r\n    processChanges(type: FormFieldChangeType | null = null, dryRun: boolean = false): Set<string> {\r\n        return this.changeSet.processChanges(this, type, dryRun);\r\n    }\r\n}\r\n\r\nexport class FormFieldArray {\r\n    constructor(public fieldArray: FormField[]) { }\r\n\r\n    getAdapter(outerContext: FormFieldContext) {\r\n        return new Proxy(this, {\r\n            get(target, propertyKey, receiver) {\r\n                switch (propertyKey) {\r\n                    case \"self\":\r\n                        return target;\r\n                    case \"context\":\r\n                        return outerContext;\r\n                    case \"getAdapter\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getAdapter({ ...outerContext, ...innerContext });\r\n                    case \"getValue\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getValue({ ...outerContext, ...innerContext });\r\n                    case \"getMetaValue\":\r\n                        return (metaKey: string, innerContext: FormFieldContext = {}) => target.getMetaValue(metaKey, { ...outerContext, ...innerContext });\r\n                    case \"setValue\":\r\n                        return (newValue: any, innerContext: FormFieldContext = {}) => target.setValue(newValue, { ...outerContext, ...innerContext });\r\n                    case \"setMetaValue\":\r\n                        return (metaKey: string, newValue: any, innerContext: FormFieldContext = {}) => target.setMetaValue(metaKey, newValue, { ...outerContext, ...innerContext });\r\n                    default:\r\n                        const value = Reflect.get(target, propertyKey, receiver);\r\n                        return typeof value === \"function\" ? value.bind(target) : value;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getValue({ stateKey = null, disabledIsNull = true, raw = false }: FormFieldContext = {}): any {\r\n        return this.fieldArray.map(field => field.getValue({ stateKey, disabledIsNull, raw })).find(value => value != null);\r\n    }\r\n\r\n    getMetaValue(metaKey: string, { stateKey = null, raw = false }: FormFieldContext = {}): any {\r\n        return this.fieldArray.map(field => field.getMetaValue(metaKey, { stateKey, raw })).find(value => value != null);\r\n    }\r\n\r\n    setValue(value: any, { stateKey = null, initiator = null, processChanges = false, raw = false }: FormFieldContext = {}): Set<string> {\r\n        return this.fieldArray.map(field => field.setValue(value, { stateKey, initiator, processChanges, raw })).find(changedNames => changedNames.size !== 0) ?? new Set();\r\n    }\r\n\r\n    setMetaValue(metaKey: string, value: any, { stateKey = null, initiator = null, processChanges = false, raw = false }: FormFieldContext = {}): Set<string> {\r\n        return this.fieldArray.map(field => field.setMetaValue(metaKey, value, { stateKey, initiator, processChanges, raw })).find(changedNames => changedNames.size !== 0) ?? new Set();\r\n    }\r\n\r\n    processChanges(type: FormFieldChangeType | null = null, dryRun: boolean = false): Set<string> {\r\n        return this.fieldArray.map(field => field.processChanges(type, dryRun)).find(changedNames => changedNames.size !== 0) ?? new Set();\r\n    }\r\n}\r\n\r\nexport abstract class FormFieldLinker {\r\n    public field: FormField;\r\n    public type: FormFieldType;\r\n\r\n    constructor(field: FormField) {\r\n        this.field = field;\r\n        this.type = field.type;\r\n    }\r\n\r\n    abstract link(): void;\r\n    abstract unlink(): void;\r\n}\r\n\r\nexport class FormFieldElementLinker extends FormFieldLinker {\r\n    public element: FormElement;\r\n    private _mutationObserver: MutationObserver;\r\n    private _handleHideContainer: ((event: Event) => void) | null;\r\n    /**\r\n     * \r\n     * @param {FormField} field \r\n     * @param {Element} element \r\n     */\r\n    constructor(field: FormField, element: FormElement) {\r\n        super(field);\r\n        this.element = element;\r\n        if (this.type.asElementType() !== this.element.type) {\r\n            throw new Error(\"For link type is equal\")\r\n        }\r\n        this._fieldChangesEventListener = this._fieldChangesEventListener.bind(this);\r\n        this._elementValueInputEventListener = this._elementValueInputEventListener.bind(this);\r\n        this._elementValueChangeEventListener = this._elementValueChangeEventListener.bind(this);\r\n        this._handleHideContainer = null;\r\n        this._mutationObserver = new MutationObserver((mutations) => {\r\n            for (const mutation of mutations) {\r\n                if (mutation.type === \"attributes\") {\r\n                    switch (mutation.attributeName) {\r\n                        case \"disabled\":\r\n                            this._syncFieldMetaValue(\"disabled\");\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    override link(): void {\r\n        this.field.setInitialValue(this._getElementValue());\r\n        this.field.setInitialMetaValue(\"disabled\", this._getElementMetaValue(\"disabled\"));\r\n        this.field.setInitialMetaValue(\"visible\", true);\r\n        this.field.setInitialMetaValue(\"container\", this.element.parentElement);\r\n        if ([\"radio\", \"checkbox\"].includes(this.type.asElementType())) {\r\n            this.field.setInitialMetaValue(\"checked\", this._getElementMetaValue(\"checked\"));\r\n        }\r\n        this.field.reset({ processChanges: true, initiator: this });\r\n\r\n        this.field.addEventListener(\"changes\", this._fieldChangesEventListener);\r\n        if ([\"text\", \"number\", \"textarea\"].includes(this.type.asElementType())) {\r\n            this.element.addEventListener(\"input\", this._elementValueInputEventListener);\r\n        } else {\r\n            this.element.addEventListener(\"change\", this._elementValueChangeEventListener);\r\n        }\r\n\r\n        this._mutationObserver.observe(this.element, {\r\n            attributes: true,\r\n            attributeFilter: [\"disabled\"]\r\n        });\r\n    }\r\n\r\n    override unlink(): void {\r\n        this.field.removeEventListener(\"changes\", this._fieldChangesEventListener);\r\n        if ([\"text\", \"number\", \"textarea\"].includes(this.type.asElementType())) {\r\n            this.element.removeEventListener(\"input\", this._elementValueInputEventListener);\r\n        } else {\r\n            this.element.removeEventListener(\"change\", this._elementValueChangeEventListener);\r\n        }\r\n        this._mutationObserver.disconnect();\r\n    }\r\n\r\n    _elementValueInputEventListener(event: Event): void {\r\n        console.log(\"[FormFieldElementLinker._elementValueInputEventListener] Event\")\r\n        this.field.setMetaValue(\"dirty\", true, { initiator: this, processChanges: true });\r\n        this._syncFieldValue();\r\n    }\r\n\r\n    _elementValueChangeEventListener(event: Event): void {\r\n        this.field.setMetaValue(\"dirty\", true, { initiator: this, processChanges: true });\r\n        if ([\"radio\", \"checkbox\"].includes(this.type.asElementType())) {\r\n            this._syncFieldMetaValue(\"checked\");\r\n        } else {\r\n            this._syncFieldValue();\r\n        }\r\n    }\r\n\r\n    _fieldChangesEventListener(event: Event) {\r\n        const changes = (event as FormFieldChangesEvent).changes.filter(change => change.initiator !== this);\r\n        for (const change of changes) {\r\n            if (change.type === FormFieldChangeType.Value) {\r\n                this._syncElementValue();\r\n            } else if (change.type === FormFieldChangeType.MetaValue) {\r\n                this._syncElementMetaValue(change.metaKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    _syncElementValue(): void {\r\n        console.log(\"[FormFieldElementLinker._syncElementValue] Syncing element value\");\r\n        const value = this.field.getValue({ raw: true });\r\n        const status = this.type.setElementValue(this.element, value);\r\n        if (status !== FormFieldTypeElementStatus.VALUE_SET_SUCCESS) {\r\n            console.log(\"[FormFieldElementLinker._syncElementMetaValue] Failed to set element value, status `%s`\", status);\r\n            return;\r\n        }\r\n    }\r\n\r\n    _getElementValue(): any {\r\n        const [value, status] = this.type.getElementValue(this.element);\r\n        if (status !== FormFieldTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED) {\r\n            console.warn(\"[FormFieldElementLinker._getElementValue] Failed to get value from element, status `%s`\", status);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    _syncFieldValue(): void {\r\n        console.log(\"[FormFieldElementLinker._syncFieldValue] Syncing field value\");\r\n        this.field.setValue(this._getElementValue(), { initiator: this, processChanges: true, raw: true });\r\n    }\r\n\r\n    _syncElementMetaValue(metaKey: string): void {\r\n        console.log(\"[FormFieldElementLinker._syncElementMetaValue] Syncing element meta value\");\r\n        const value = this.field.getMetaValue(metaKey, { raw: true });\r\n        const status = this.type.setElementMetaValue(this.element, metaKey, value);\r\n        if (status === FormFieldTypeElementStatus.META_VALUE_SET_SUCCESS) {\r\n            return;\r\n        }\r\n        if (status === FormFieldTypeElementStatus.META_KEY_NOT_EXISTS) {\r\n            switch (metaKey) {\r\n                case \"visible\":\r\n                    const container = this.field.getMetaValue(\"container\") as HTMLElement;\r\n                    if (this._handleHideContainer != null) {\r\n                        container.removeEventListener(\"transitionend\", this._handleHideContainer);\r\n                        this._handleHideContainer = null;\r\n                    }\r\n                    if (value) {\r\n                        if (container.style.display === \"none\") {\r\n                            container.style.display = \"\";\r\n                            requestAnimationFrame(() => {\r\n                                container.dataset.visible = \"true\";\r\n                            });\r\n                        } else {\r\n                            container.dataset.visible = \"true\";\r\n                        }\r\n                    } else {\r\n                        if (container.style.display !== \"none\") {\r\n                            this._handleHideContainer = (event: Event) => {\r\n                                container.style.display = \"none\";\r\n                            };\r\n                            container.addEventListener(\"transitionend\", this._handleHideContainer, { once: true });\r\n                        }\r\n                        container.dataset.visible = \"false\";\r\n                    }\r\n                    break;\r\n                case \"autofill\":\r\n                    this.element.classList.toggle(\"autofill\", !!value);\r\n                    break;\r\n                case \"optionsInitialized\":\r\n                    // console.log(\"options initialized\", !!value);\r\n                    if (value) {\r\n                        this._syncElementValue();\r\n                    }\r\n                    break;\r\n            }\r\n            return;\r\n        }\r\n\r\n        console.log(\"[FormFieldElementLinker._syncElementMetaValue] Failed to set element meta value, status `%s`\", status);\r\n    }\r\n\r\n    _getElementMetaValue(metaKey: string): any {\r\n        const [value, status] = this.type.getElementMetaValue(this.element, metaKey);\r\n        if (status !== FormFieldTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED) {\r\n            console.warn(\"[FormFieldElementLinker._getElementMetaValue] Failed to get value from element, status `%s`\", status);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    _syncFieldMetaValue(metaKey: string): void {\r\n        console.log(\"[FormFieldElementLinker._syncFieldMeta] Syncing field meta value\");\r\n        this.field.setMetaValue(metaKey, this._getElementMetaValue(metaKey), { initiator: this, processChanges: true });\r\n    }\r\n}\r\n\r\nexport class FormFields extends EventTarget {\r\n    public list: FormField[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.list = [];\r\n        this._fieldChangesEventListener = this._fieldChangesEventListener.bind(this);\r\n    }\r\n\r\n    _fieldChangesEventListener(event: Event) {\r\n        this.dispatchEvent(new FormFieldChangesEvent((event as FormFieldChangesEvent).changes));\r\n    }\r\n\r\n    add(field: FormField) {\r\n        field = field.self;\r\n        if (this.list.includes(field)) return false;\r\n        field.addEventListener(\"changes\", this._fieldChangesEventListener);\r\n        this.list.push(field);\r\n        return true;\r\n    }\r\n\r\n    remove(field: FormField) {\r\n        field = field.self;\r\n        if (!this.list.includes(field)) return false;\r\n        field.removeEventListener(\"changes\", this._fieldChangesEventListener);\r\n        this.list.splice(this.list.indexOf(field), 1);\r\n        return true;\r\n    }\r\n\r\n    get(fieldName: string): FormField | FormFieldArray {\r\n        const fields = this.list.filter(field => field.name === fieldName)\r\n        return fields.length === 1 ? fields[0] : new FormFieldArray(fields);\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<string> {\r\n        return new Set(this.list.map(field => field.name)).values();\r\n    }\r\n}\r\n\r\nexport interface Option {\r\n    value: string;\r\n    textContent: string;\r\n}\r\n\r\nexport abstract class FormChangesManager {\r\n    abstract manage(form: Form, changes: FormFieldChange[]): void;\r\n}\r\n\r\nexport class FormChangesForRadioManager extends FormChangesManager {\r\n    override manage(form: Form, changes: FormFieldChange[]): void {\r\n        changes.filter(change =>\r\n            change.initiator !== form &&\r\n            change.field.type.asElementType() === \"radio\" &&\r\n            change.type === FormFieldChangeType.MetaValue &&\r\n            change.metaKey === \"checked\" &&\r\n            change.newValue\r\n        ).forEach(change => {\r\n            form.fields.list.filter(field =>\r\n                field.name === change.field.name &&\r\n                field.type.asElementType() === \"radio\" &&\r\n                field != change.field &&\r\n                field.getMetaValue(\"checked\")\r\n            ).forEach(field => {\r\n                field.setMetaValue(\"checked\", false, { initiator: form, processChanges: true });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport class FormChangesForTriggerEffectsManager extends FormChangesManager {\r\n    override manage(form: Form, changes: FormFieldChange[]): void {\r\n        changes = changes.filter(change => change.initiator !== form);\r\n        if (changes.length === 0) return;\r\n        form.effectManager.triggerEffects({ changedNames: FormFieldChangeSet.asChangedNames(changes) });\r\n    }\r\n}\r\n\r\nexport class Form extends EventTarget {\r\n    public form: HTMLFormElement;\r\n    public effectManager: EffectManager;\r\n    public fields: FormFields;\r\n    public fieldLinkers: FormFieldLinker[];\r\n    public changeSet: FormFieldChangeSet;\r\n    private _changesManagers: FormChangesManager[];\r\n\r\n    constructor({ form }: { form: HTMLFormElement }) {\r\n        super();\r\n        this.form = form;\r\n        this.changeSet = new FormFieldChangeSet();\r\n        this.effectManager = new EffectManager();\r\n        this.fields = new FormFields();\r\n        this.fieldLinkers = [];\r\n        this._changesManagers = [];\r\n        this._handleChanges = this._handleChanges.bind(this);\r\n    }\r\n\r\n    async setup() {\r\n        if (this.form != null) {\r\n            this.form.classList.add(\"uoyroem-form\");\r\n            this.form.noValidate = true;\r\n\r\n            this.form.addEventListener(\"submit\", (event) => {\r\n                event.preventDefault();\r\n                this.submit().then(() => this.reset());\r\n            });\r\n\r\n            this.form.addEventListener(\"reset\", (event) => {\r\n                event.preventDefault();\r\n                this.reset();\r\n            });\r\n\r\n            this.fields.addEventListener(\"changes\", this._handleChanges);\r\n            this.registerChangesManager(new FormChangesForRadioManager());\r\n            this.registerChangesManager(new FormChangesForTriggerEffectsManager());\r\n            this.registerElements();\r\n        }\r\n    }\r\n\r\n    _handleChanges(event: Event) {\r\n        const changes = (event as FormFieldChangesEvent).changes;\r\n        for (const changesManager of this._changesManagers) {\r\n            changesManager.manage(this, changes);\r\n        }\r\n    }\r\n\r\n    registerChangesManager(changesManager: FormChangesManager) {\r\n        this._changesManagers.push(changesManager);\r\n    }\r\n\r\n    getFormData(): Record<string, any> {\r\n        const formData: Record<string, any> = {};\r\n        for (const fieldName of this.fields) {\r\n            formData[fieldName] = this.fields.get(fieldName).getValue();\r\n        }\r\n        return formData;\r\n    }\r\n\r\n    registerElements(): void {\r\n        for (const element of this.form.elements) {\r\n            if (!FormFieldType.isFormElement(element)) {\r\n                continue;\r\n            }\r\n            if (element.name === \"\") continue;\r\n            const field = new FormField(element.name, FormFieldType.fromFormElement(element), { changeSet: this.changeSet, effectManager: this.effectManager });\r\n            const fieldElementLinker = new FormFieldElementLinker(field, element);\r\n            fieldElementLinker.link();\r\n            this.fieldLinkers.push(fieldElementLinker);\r\n            this.fields.add(field);\r\n        }\r\n    }\r\n\r\n    getElement(name: string): Element | RadioNodeList | null {\r\n        return this.form.elements.namedItem(name);\r\n    }\r\n\r\n    async validate(): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    async submit(): Promise<void> {\r\n        if (!await this.validate()) {\r\n\r\n        }\r\n    }\r\n\r\n    reset(): void {\r\n        for (const field of this.fields.list) {\r\n            field.reset({ initiator: this });\r\n        }\r\n        this.effectManager.triggerEffects();\r\n    }\r\n\r\n    addDisableWhenEffect(fieldName: string, disableWhen: () => Promise<boolean> | boolean, dependsOn: string[]): void {\r\n        this.effectManager.addEffect(getMetaDependencyKey(fieldName, \"disabled\"), {\r\n            type: \"disable-when\",\r\n            callback: async () => {\r\n                const disabled = await disableWhen();\r\n                // console.log(`[Effect.DisableWhen] Field ${fieldName} disabled: `, disabled);\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                return field.setMetaValue(\"disabled\", disabled, { processChanges: true });\r\n            },\r\n            dependsOn,\r\n        });\r\n    }\r\n\r\n    addVisibleWhenEffect(fieldName: string, visibleWhen: () => Promise<boolean> | boolean, dependsOn: string[]): void {\r\n        this.addDisableWhenEffect(fieldName, async () => !await visibleWhen(), dependsOn);\r\n        this.effectManager.addEffect(getMetaDependencyKey(fieldName, \"visible\"), {\r\n            type: \"visible-when\",\r\n            callback: async () => {\r\n                const visible = await visibleWhen();\r\n                // console.log(`[Effect.VisibleWhen] Field ${fieldName} visible: `, visible);\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                return field.setMetaValue(\"visible\", visible, { processChanges: true });\r\n            },\r\n            dependsOn: [getMetaDependencyKey(fieldName, \"disabled\")]\r\n        });\r\n    }\r\n\r\n    addComputedFieldEffect(fieldName: string, fieldType: FormFieldType, compute: () => Promise<any> | any, dependsOn: string[]): void {\r\n        this.fields.add(new FormField(fieldName, fieldType, { changeSet: this.changeSet, effectManager: this.effectManager }))\r\n        this.effectManager.addEffect(fieldName, {\r\n            type: \"computed-field\",\r\n            callback: async () => {\r\n                const value = await compute();\r\n                // console.log(`[Effect.ComputedField] Field ${fieldName} value: `, value);\r\n                const field = this.fields.get(fieldName);\r\n                return field.setValue(value, { initiator: this, processChanges: true });\r\n            },\r\n            dependsOn\r\n        });\r\n    }\r\n\r\n    addFieldAutofillEffect(fieldName: string, autofillWith: () => Promise<any> | any, dependsOn: string[]): void {\r\n        this.effectManager.addDependency(fieldName, getMetaDependencyKey(fieldName, \"autofill\"));\r\n        this.effectManager.addEffect(getMetaDependencyKey(fieldName, \"autofill\"), {\r\n            type: \"field-autofill\",\r\n            callback: async () => {\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                const dirty = field.getMetaValue(\"dirty\");\r\n                field.setMetaValue(\"autofill\", !dirty);\r\n                if (dirty) {\r\n                    return field.processChanges();\r\n                }\r\n                const value = await autofillWith();\r\n                // console.log(`[Effect.FieldAutofill] Field ${fieldName} value: `, value);\r\n                field.setMetaValue(\"autofill\", field.setValue(value).size !== 0);\r\n                return field.processChanges();\r\n            },\r\n            dependsOn: [getMetaDependencyKey(fieldName, \"dirty\"), ...dependsOn]\r\n        });\r\n    }\r\n\r\n    addSelectOptionsInitializerEffect(fieldName: string, getDefaultOption: () => Promise<Option> | Option, getOptions: () => Promise<Option[]> | Option[], dependsOn: string[]): void {\r\n        this.effectManager.addEffect(fieldName, {\r\n            type: \"select-options-initializer\",\r\n            callback: async () => {\r\n                const defaultOption = await getDefaultOption();\r\n                const options = await getOptions();\r\n                const selectElement = this.getElement(fieldName) as HTMLSelectElement;\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                const selectedValue = field.getValue({ disabledIsNull: false });\r\n                field.setValue(defaultOption.value);\r\n                selectElement.innerHTML = \"\";\r\n                for (const option of [defaultOption, ...options]) {\r\n                    const optionElement = document.createElement(\"option\");\r\n                    optionElement.value = option.value;\r\n                    optionElement.textContent = option.textContent;\r\n                    selectElement.options.add(optionElement);\r\n                }\r\n                field.setValue(selectedValue);\r\n                field.setMetaValue(\"disabled\", options.length === 0);\r\n                field.setMetaValue(\"optionsInitialized\", options.length !== 0);\r\n                return field.processChanges();\r\n            },\r\n            dependsOn\r\n        });\r\n    }\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","DependencyGraph","constructor","this","_keys","Set","_dependentMap","Map","_dependencyMap","_addedDependencies","_topologicalOrder","getDependencies","buildDependenciesMap","dependencies","dependent","dependency","add","has","set","inDegree","size","queue","degree","push","length","shift","Error","addDependency","keys","topologicalOrder","dependentMap","dependencyMap","EffectManager","_keyEffect","super","effect","dependsOn","concat","addEffect","triggerEffects","changedNames","arguments","undefined","name","intersection","changedNamesByEffect","callback","forEach","changedName","deepEqual","a","b","aKeys","bKeys","getMetaDependencyKey","fieldName","metaKey","FormFieldValidator","validate","field","FormFieldValidatorRequired","FormFieldTypeElementStatus","FormFieldType","object","FormFieldTypeObject","text","FormFieldTypeText","number","FormFieldTypeNumber","date","FormFieldTypeDate","select","multiple","FormFieldTypeSelect","checkbox","FormFieldTypeCheckbox","radio","FormFieldTypeRadio","isFormElement","element","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","fromFormElement","type","area","isEqual","isEmpty","asElementType","fetch","getFieldValue","getValue","getFieldMetaValue","getMetaValue","setFieldValue","newValue","setValue","setFieldMetaValue","setMetaValue","getElementValue","TYPE_MISMATCH","VALUE_SUCCESSFULLY_RECEIVED","INVALID_ELEMENT","setElementValue","VALUE_SET_SUCCESS","getElementMetaValue","disabled","META_VALUE_SUCCESSFULLY_RECEIVED","META_KEY_NOT_EXISTS","setElementMetaValue","Boolean","META_VALUE_SET_SUCCESS","getInitialValue","getInitialMeta","meta","isSameType","otherType","_area","_precision","toDateString","status","checked","FAILED_TO_SET_META_VALUE","includes","_multiple","_of","of","Array","from","selectedOptions","option","options","map","querySelector","some","FAILED_TO_SET_VALUE","selected","FormFieldChangeType","FormFieldChangesEvent","Event","changes","cancelable","FormFieldChangeSet","maxSize","_changes","_maxSize","trimProcessedChanges","index","findIndex","c","processed","splice","change","lastChange","Value","getFieldChange","MetaValue","last","remove","indexOf","onlyCurrentState","getFieldChanges","filter","at","stateKey","currentStateKey","hasChanges","markProcessed","asChangedName","asChangedNames","processChanges","dryRun","lastChanges","dispatchEvent","FormField","EventTarget","changeSet","effectManager","_name","_type","_initializedStateKeys","_initialValue","_valueMap","_initialMeta","_metaMap","_changeSet","_currentStateKey","initializeState","initializeDependencies","self","context","disabledIsNull","initiator","raw","clearInitialMeta","reset","console","log","entries","_ref","switchState","_ref2","oldValue","Date","getAdapter","outerContext","Proxy","target","propertyKey","receiver","innerContext","Reflect","bind","setInitialValue","setInitialMetaValue","FormFieldArray","fieldArray","find","FormFieldLinker","FormFieldElementLinker","_fieldChangesEventListener","_elementValueInputEventListener","_elementValueChangeEventListener","_handleHideContainer","_mutationObserver","MutationObserver","mutations","mutation","attributeName","_syncFieldMetaValue","link","_getElementValue","_getElementMetaValue","parentElement","addEventListener","observe","attributes","attributeFilter","unlink","removeEventListener","disconnect","event","_syncFieldValue","_syncElementValue","_syncElementMetaValue","warn","container","style","display","requestAnimationFrame","dataset","visible","once","classList","toggle","FormFields","list","fields","iterator","values","FormChangesManager","FormChangesForRadioManager","manage","form","FormChangesForTriggerEffectsManager","Form","_ref3","fieldLinkers","_changesManagers","_handleChanges","setup","noValidate","preventDefault","submit","then","registerChangesManager","registerElements","changesManager","getFormData","formData","elements","fieldElementLinker","getElement","namedItem","addDisableWhenEffect","disableWhen","async","addVisibleWhenEffect","visibleWhen","addComputedFieldEffect","fieldType","compute","addFieldAutofillEffect","autofillWith","dirty","addSelectOptionsInitializerEffect","getDefaultOption","getOptions","defaultOption","selectElement","selectedValue","innerHTML","optionElement","document","createElement","textContent"],"sourceRoot":""}