{"version":3,"file":"smart-system.bundle.min.js","mappings":"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","sources":["webpack://SmartSystem/webpack/bootstrap","webpack://SmartSystem/webpack/runtime/define property getters","webpack://SmartSystem/webpack/runtime/hasOwnProperty shorthand","webpack://SmartSystem/webpack/runtime/make namespace object","webpack://SmartSystem/./lib/core/dependency-graph.ts","webpack://SmartSystem/./lib/core/effect-manager.ts","webpack://SmartSystem/./lib/core/form.ts","webpack://SmartSystem/./lib/core/table.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export class DependencyGraph<Key = string> {\r\n    private _keys: Set<Key>;\r\n    private _dependentMap: Map<Key, Set<Key>>;\r\n    private _dependencyMap: Map<Key, Set<Key>>;\r\n    private _addedDependencies: [Key, Key][];\r\n    private _topologicalOrder: Key[];\r\n\r\n    constructor() {\r\n        this._keys = new Set<Key>();\r\n        this._dependentMap = new Map();\r\n        this._dependencyMap = new Map();\r\n        this._addedDependencies = [];\r\n        this._topologicalOrder = [];\r\n    }\r\n\r\n    getDependencies(): readonly [Key, Key][] {\r\n        return this._addedDependencies;\r\n    }\r\n\r\n    buildDependenciesMap(): void {\r\n        this._dependentMap = new Map();\r\n        this._dependencyMap = new Map();\r\n        this._keys = new Set();\r\n        this._topologicalOrder = [];\r\n\r\n        const dependencies = this.getDependencies();\r\n\r\n        for (const [dependent, dependency] of dependencies) {\r\n            this._keys.add(dependent);\r\n            this._keys.add(dependency);\r\n            if (!this._dependentMap.has(dependent)) {\r\n                this._dependentMap.set(dependent, new Set());\r\n            }\r\n            if (!this._dependentMap.has(dependency)) {\r\n                this._dependentMap.set(dependency, new Set());\r\n            }\r\n            if (!this._dependencyMap.has(dependent)) {\r\n                this._dependencyMap.set(dependent, new Set());\r\n            }\r\n            if (!this._dependencyMap.has(dependency)) {\r\n                this._dependencyMap.set(dependency, new Set());\r\n            }\r\n            this._dependentMap.get(dependent)!.add(dependency);\r\n            this._dependencyMap.get(dependency)!.add(dependent);\r\n        }\r\n        const inDegree = new Map();\r\n        for (const [dependent, dependencies] of this._dependentMap) {\r\n            inDegree.set(dependent, dependencies.size);\r\n        }\r\n        const queue: Key[] = [];\r\n        for (const [dependent, degree] of inDegree) {\r\n            if (degree === 0) {\r\n                queue.push(dependent);\r\n            }\r\n        }\r\n        while (queue.length > 0) {\r\n            const key = queue.shift()!;\r\n            this._topologicalOrder.push(key);\r\n            for (const dependency of this._dependencyMap.get(key)!) {\r\n                inDegree.set(dependency, inDegree.get(dependency) - 1);\r\n                if (inDegree.get(dependency) === 0) {\r\n                    queue.push(dependency);\r\n                }\r\n            }\r\n        }\r\n        if (this._topologicalOrder.length !== this._keys.size) {\r\n            throw new Error(\"There are cyclic dependencies\");\r\n        }\r\n    }\r\n\r\n    addDependency(dependent: Key, dependency: Key): void {\r\n        this._addedDependencies.push([dependent, dependency]);\r\n    }\r\n\r\n    get keys(): ReadonlySet<Key> {\r\n        return this._keys;\r\n    }\r\n\r\n    get topologicalOrder(): readonly Key[] {\r\n        return this._topologicalOrder;\r\n    }\r\n\r\n    get dependentMap(): ReadonlyMap<Key, ReadonlySet<Key>> {\r\n        return this._dependentMap;\r\n    }\r\n\r\n    get dependencyMap(): ReadonlyMap<Key, ReadonlySet<Key>> {\r\n        return this._dependencyMap;\r\n    }\r\n}","import { DependencyGraph } from \"./dependency-graph\";\r\n\r\nexport interface Effect {\r\n    type: string;\r\n    callback: () => Promise<Set<string>> | Set<string>;\r\n    dependsOn: string[];\r\n}\r\n\r\nexport class EffectManager extends DependencyGraph {\r\n    private _keyEffect: Map<string, Effect> = new Map();\r\n\r\n    constructor() {\r\n        super();\r\n        this._keyEffect = new Map();\r\n    }\r\n\r\n    override getDependencies(): readonly [string, string][] {\r\n        const dependencies: [string, string][] = [];\r\n        for (const [key, effect] of this._keyEffect) {\r\n            for (const dependency of effect.dependsOn) {\r\n                dependencies.push([key, dependency])\r\n            }\r\n        }\r\n        return super.getDependencies().concat(dependencies);\r\n    }\r\n\r\n    addEffect(key: string, effect: Effect) {\r\n        this._keyEffect.set(key, effect)\r\n    }\r\n\r\n    async triggerEffects({ changedNames = null }: { changedNames?: Set<string> | null } = {}) {\r\n        for (const name of this.topologicalOrder) {\r\n            if (changedNames != null && this.dependentMap.get(name)!.intersection(changedNames).size === 0) {\r\n                continue;\r\n            }\r\n            const effect = this._keyEffect.get(name);\r\n            if (effect != null) {\r\n                const changedNamesByEffect = await effect.callback();\r\n                if (changedNames) {\r\n                    changedNamesByEffect.forEach(changedName => { changedNames.add(changedName); });\r\n                }\r\n            } else {\r\n                if (changedNames) {\r\n                    changedNames.add(name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { EffectManager } from \"./effect-manager\";\r\nexport { EffectManager };\r\n\r\nfunction deepEqual(a: any, b: any): boolean {\r\n    if (a === b) return true;\r\n\r\n    if (typeof a !== \"object\" || typeof b !== \"object\" || a === null || b === null) {\r\n        return false;\r\n    }\r\n\r\n    const aKeys = new Set(Object.keys(a));\r\n    const bKeys = new Set(Object.keys(b));\r\n\r\n    if (aKeys.size !== bKeys.size) return false;\r\n    for (const key of aKeys) {\r\n        if (!deepEqual(a[key], b[key])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getMetaDependencyKey(fieldName: string, metaKey: string) {\r\n    return `${fieldName}:${metaKey}`;\r\n}\r\n\r\nexport type FormElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\nexport enum FormTypeElementStatus {\r\n    VALUE_SUCCESSFULLY_RECEIVED = \"value-successfully-received\",\r\n    VALUE_SET_SUCCESS = \"value-set-success\",\r\n    META_VALUE_SUCCESSFULLY_RECEIVED = \"meta-value-successfully-received\",\r\n    META_VALUE_SET_SUCCESS = \"meta-value-set-success\",\r\n    FAILED_TO_SET_VALUE = \"failed-to-set-value\",\r\n    FAILED_TO_SET_META_VALUE = \"failed-to-set-meta-value\",\r\n    INVALID_ELEMENT = \"invalid-element\",\r\n    TYPE_MISMATCH = \"type-mismatch\",\r\n    META_KEY_NOT_EXISTS = \"meta-key-not-exists\"\r\n}\r\n\r\ninterface FormPrimitiveType { }\r\ninterface FormElementType { }\r\n\r\nexport class FormType {\r\n    static object() {\r\n        return new FormTypeObject();\r\n    }\r\n\r\n    static boolean() {\r\n        return new FormTypeBoolean();\r\n    }\r\n\r\n    static text() {\r\n        return new FormTypeText();\r\n    }\r\n\r\n    static number() {\r\n        return new FormTypeNumber();\r\n    }\r\n\r\n    static date() {\r\n        return new FormTypeDate();\r\n    }\r\n\r\n    static select({ multiple = false } = {}) {\r\n        return new FormTypeSelect().multiple(multiple);\r\n    }\r\n\r\n    static checkbox() {\r\n        return new FormTypeCheckbox();\r\n    }\r\n\r\n    static radio() {\r\n        return new FormTypeRadio();\r\n    }\r\n\r\n    static isFormElement(element: Element): element is FormElement {\r\n        return element instanceof HTMLInputElement || element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement;\r\n    }\r\n\r\n    static fromFormElement(element: FormElement): FormType {\r\n        switch (element.type) {\r\n            case \"select-one\":\r\n                return this.select();\r\n            case \"select-multiple\":\r\n                return this.select().multiple();\r\n            case \"number\":\r\n                return this.number();\r\n            case \"text\":\r\n                return this.text();\r\n            case \"textarea\":\r\n                return this.text().area();\r\n            case \"checkbox\":\r\n                return this.checkbox();\r\n            case \"radio\":\r\n                return this.radio();\r\n            case \"date\":\r\n                return this.date();\r\n            default:\r\n                throw new Error(`As element type ${element} not has`);\r\n        }\r\n    }\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    isEqual(a: any, b: any): boolean { return a === b; }\r\n    isEmpty() { }\r\n    asElementType() { return \"hidden\"; }\r\n\r\n    fetch() {\r\n    }\r\n\r\n    getFieldValue(field: FormField): any {\r\n        return field.getValue();\r\n    }\r\n\r\n    getFieldMetaValue(field: FormField, metaKey: string): any {\r\n        return field.getMetaValue(metaKey);\r\n    }\r\n\r\n    setFieldValue(field: FormField, newValue: any): Set<string> {\r\n        return field.setValue(newValue);\r\n    }\r\n\r\n    setFieldMetaValue(field: FormField, metaKey: string, newValue: any): Set<string> {\r\n        return field.setMetaValue(metaKey, newValue);\r\n    }\r\n\r\n    getElementValue(element: Element): [any, FormTypeElementStatus] {\r\n        if (!FormType.isFormElement(element)) {\r\n            return [null, FormTypeElementStatus.INVALID_ELEMENT];\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return [null, FormTypeElementStatus.TYPE_MISMATCH];\r\n        }\r\n        return [element.value, FormTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED];\r\n    }\r\n\r\n    setElementValue(element: Element, newValue: any): FormTypeElementStatus {\r\n        if (!FormType.isFormElement(element)) {\r\n            return FormTypeElementStatus.INVALID_ELEMENT;\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return FormTypeElementStatus.TYPE_MISMATCH;\r\n        }\r\n        element.value = newValue;\r\n        return FormTypeElementStatus.VALUE_SET_SUCCESS;\r\n    }\r\n\r\n    getElementMetaValue(element: Element, metaKey: string): [any, FormTypeElementStatus] {\r\n        if (!FormType.isFormElement(element)) {\r\n            return [undefined, FormTypeElementStatus.INVALID_ELEMENT];\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return [undefined, FormTypeElementStatus.TYPE_MISMATCH];\r\n        }\r\n        if (metaKey === \"disabled\") {\r\n            return [element.disabled, FormTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [undefined, FormTypeElementStatus.META_KEY_NOT_EXISTS]\r\n    }\r\n\r\n    setElementMetaValue(element: Element, metaKey: string, newValue: any): FormTypeElementStatus {\r\n        if (!FormType.isFormElement(element)) {\r\n            return FormTypeElementStatus.INVALID_ELEMENT;\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return FormTypeElementStatus.TYPE_MISMATCH;\r\n        }\r\n        if (metaKey === \"disabled\") {\r\n            element.disabled = Boolean(newValue);\r\n        } else if (metaKey === \"autofill\") {\r\n            element.classList.toggle(\"autofill\", Boolean(newValue));\r\n        } else {\r\n            return FormTypeElementStatus.META_KEY_NOT_EXISTS;\r\n        }\r\n        return FormTypeElementStatus.META_VALUE_SET_SUCCESS;\r\n    }\r\n\r\n    getInitialValue(): any {\r\n        return null;\r\n    }\r\n\r\n    getInitialMeta(): Map<string, InitialMetaItem> {\r\n        const meta = new Map();\r\n        meta.set(\"disabled\", { value: false, resettable: false });\r\n        meta.set(\"dirty\", { value: false, resettable: true });\r\n        return meta;\r\n    }\r\n\r\n    isSameType(otherType: FormType): boolean {\r\n        return this.name === otherType.name;\r\n    }\r\n}\r\n\r\nexport class FormTypeText extends FormType implements FormPrimitiveType, FormElementType {\r\n    private _area: boolean;\r\n\r\n    constructor() {\r\n        super(\"String\");\r\n        this._area = false;\r\n    }\r\n\r\n    area(value = true): this {\r\n        this._area = value;\r\n        return this;\r\n    }\r\n\r\n    asElementType(): string {\r\n        return this._area ? \"textarea\" : \"text\";\r\n    }\r\n}\r\n\r\nexport class FormTypeNumber extends FormType implements FormPrimitiveType, FormElementType {\r\n    constructor() {\r\n        super(\"Number\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"number\";\r\n    }\r\n}\r\n\r\nexport class FormTypeDate extends FormType implements FormPrimitiveType, FormElementType {\r\n    constructor() {\r\n        super(\"Date\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"date\";\r\n    }\r\n\r\n    isEqual(a: any, b: any): boolean {\r\n        return a.toDateString() === b.toDateString();\r\n    }\r\n}\r\n\r\nexport class FormTypeBoolean extends FormType implements FormPrimitiveType, FormElementType {\r\n    constructor() {\r\n        super(\"Boolean\");\r\n    }\r\n}\r\n\r\nexport class FormTypeRadio extends FormType implements FormElementType {\r\n    constructor() {\r\n        super(\"Radio\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"radio\";\r\n    }\r\n\r\n    getInitialMeta(): Map<string, InitialMetaItem> {\r\n        const meta = super.getInitialMeta();\r\n        meta.set(\"checked\", { value: false, resettable: true });\r\n        return meta;\r\n    }\r\n\r\n    override getFieldValue(field: FormField): any {\r\n        return field.getMetaValue(\"checked\") ? field.getValue() : null;\r\n    }\r\n\r\n    override setFieldValue(field: FormField, newValue: any): any {\r\n        return field.setMetaValue(\"checked\", newValue != null && field.getValue() === newValue);\r\n    }\r\n\r\n    override getElementMetaValue(element: HTMLInputElement, metaKey: string): [any, FormTypeElementStatus] {\r\n        const [value, status] = super.getElementMetaValue(element, metaKey);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) {\r\n            return [value, status];\r\n        }\r\n        if (metaKey === \"checked\") {\r\n            return [element.checked, FormTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [undefined, FormTypeElementStatus.META_KEY_NOT_EXISTS];\r\n    }\r\n\r\n    override setElementMetaValue(element: HTMLInputElement, metaKey: string, newValue: any): FormTypeElementStatus {\r\n        const status = super.setElementMetaValue(element, metaKey, newValue);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) return status;\r\n        if (metaKey === \"checked\") {\r\n            element.checked = Boolean(newValue);\r\n            return FormTypeElementStatus.META_VALUE_SET_SUCCESS;\r\n        }\r\n        return FormTypeElementStatus.META_KEY_NOT_EXISTS;\r\n    }\r\n}\r\n\r\nexport class FormTypeCheckbox extends FormType implements FormElementType {\r\n    constructor() {\r\n        super(\"Checkbox\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"checkbox\";\r\n    }\r\n\r\n    getInitialMeta(): Map<string, InitialMetaItem> {\r\n        const meta = super.getInitialMeta();\r\n        meta.set(\"checked\", { value: false, resettable: true });\r\n        return meta;\r\n    }\r\n\r\n    override getFieldValue(field: FormField): any {\r\n        const value = field.getValue();\r\n        if ([\"\", \"on\"].includes(value)) return field.getMetaValue(\"checked\");\r\n        return field.getMetaValue(\"checked\") ? value : null;\r\n    }\r\n\r\n    override setFieldValue(field: FormField, newValue: any): any {\r\n        if ([\"\", \"on\"].includes(field.getValue())) return field.setMetaValue(\"checked\", newValue);\r\n        return field.setMetaValue(\"checked\", newValue != null && field.getValue() === newValue);\r\n    }\r\n\r\n    override getElementMetaValue(element: HTMLInputElement, metaKey: string): [any, FormTypeElementStatus] {\r\n        const [value, status] = super.getElementMetaValue(element, metaKey);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) {\r\n            return [value, status];\r\n        }\r\n        if (metaKey === \"checked\") {\r\n            return [element.checked, FormTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [undefined, FormTypeElementStatus.META_KEY_NOT_EXISTS];\r\n    }\r\n\r\n    override setElementMetaValue(element: HTMLInputElement, metaKey: string, newValue: any): FormTypeElementStatus {\r\n        const status = super.setElementMetaValue(element, metaKey, newValue);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) return status;\r\n        if (metaKey === \"checked\") {\r\n            element.checked = Boolean(newValue);\r\n            return FormTypeElementStatus.META_VALUE_SET_SUCCESS;\r\n        }\r\n        return FormTypeElementStatus.META_KEY_NOT_EXISTS;\r\n    }\r\n}\r\n\r\nexport class FormTypeSelect extends FormType implements FormElementType {\r\n    private _multiple: boolean;\r\n    private _of: FormType;\r\n\r\n    constructor() {\r\n        super(\"select\");\r\n        this._multiple = false;\r\n        /**\r\n         * @type {FormType}\r\n         */\r\n        this._of = FormType.text();\r\n    }\r\n\r\n    asElementType(): string {\r\n        return this._multiple ? \"select-multiple\" : \"select-one\";\r\n    }\r\n\r\n    getInitialMeta(): Map<string, InitialMetaItem> {\r\n        const meta = super.getInitialMeta();\r\n        meta.set(\"options\", { value: [], resettable: false });\r\n        return meta;\r\n    }\r\n\r\n    multiple(value: boolean = true): this {\r\n        this._multiple = value;\r\n        return this;\r\n    }\r\n\r\n    of(type: FormType): this {\r\n        this._of = type;\r\n        return this;\r\n    }\r\n\r\n    override getFieldValue(field: FormField): any {\r\n        const value = field.getValue();\r\n        const options = field.getMetaValue(\"options\") as SelectOption[];\r\n        const optionValues = options.map(option => option.value);\r\n\r\n        if (this._multiple) {\r\n            return value.filter((value: any) => optionValues.some(optionValue => optionValue == value));\r\n        } else {\r\n            return optionValues.some(optionValue => optionValue == value) ? value : options.find((option) => option.selected)?.value ?? options.find(option => !option.disabled)?.value ?? null;\r\n        }\r\n    }\r\n\r\n    override setFieldValue(field: FormField, newValue: any): Set<string> {\r\n        const options = field.getMetaValue(\"options\") as SelectOption[];\r\n        const optionValues = options.map((option: SelectOption) => option.value)\r\n        const validValue = this._multiple\r\n            ? Array.isArray(newValue)\r\n                ? newValue.filter((value: any) => optionValues.some(optionValue => optionValue == value))\r\n                : []\r\n            : optionValues.some(optionValue => optionValue == newValue)\r\n                ? newValue\r\n                : options.find((option) => option.selected)?.value ?? options.find(option => !option.disabled)?.value ?? null;\r\n        return field.setValue(validValue);\r\n    }\r\n\r\n    override getElementValue(element: HTMLSelectElement): [any, FormTypeElementStatus] {\r\n        if (!FormType.isFormElement(element)) {\r\n            return [undefined, FormTypeElementStatus.INVALID_ELEMENT];\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return [undefined, FormTypeElementStatus.TYPE_MISMATCH];\r\n        }\r\n        if (this._multiple) {\r\n            return [Array.from(element.selectedOptions, option => option.value), FormTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [element.value, FormTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED];\r\n    }\r\n\r\n    override getElementMetaValue(element: HTMLSelectElement, metaKey: string): [any, FormTypeElementStatus] {\r\n        const [value, status] = super.getElementMetaValue(element, metaKey);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) {\r\n            return [value, status];\r\n        }\r\n        if (metaKey === \"options\") {\r\n            return [Array.from(element.options, option => ({ value: option.value || option.textContent, disabled: option.disabled, selected: option.selected, textContent: option.textContent })), FormTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [undefined, FormTypeElementStatus.META_KEY_NOT_EXISTS];\r\n    }\r\n\r\n    override setElementValue(element: HTMLSelectElement, newValue: any): FormTypeElementStatus {\r\n        if (!FormType.isFormElement(element)) {\r\n            return FormTypeElementStatus.INVALID_ELEMENT;\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return FormTypeElementStatus.TYPE_MISMATCH;\r\n        }\r\n        Array.from(element.selectedOptions).forEach(option => {\r\n            option.selected = false;\r\n        });\r\n        (this._multiple ? newValue as any[] : [newValue]).map((value: any): HTMLOptionElement | null => {\r\n            return element.querySelector(`option[value=\"${value}\"]`);\r\n        }).filter(option => option != null).forEach(option => {\r\n            option.selected = true;\r\n        });\r\n        return FormTypeElementStatus.VALUE_SET_SUCCESS;\r\n    }\r\n\r\n    override setElementMetaValue(element: HTMLSelectElement, metaKey: string, newValue: any): FormTypeElementStatus {\r\n        const status = super.setElementMetaValue(element, metaKey, newValue);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) return status;\r\n        if (metaKey === \"options\") {\r\n            element.innerHTML = \"\";\r\n            for (const option of newValue) {\r\n                const optionElement = document.createElement(\"option\");\r\n                optionElement.value = option.value;\r\n                optionElement.disabled = option.disabled;\r\n                optionElement.selected = option.selected;\r\n                optionElement.textContent = option.textContent;\r\n                element.options.add(optionElement);\r\n            }\r\n            return FormTypeElementStatus.META_VALUE_SET_SUCCESS;\r\n        }\r\n        return FormTypeElementStatus.META_KEY_NOT_EXISTS;\r\n    }\r\n}\r\n\r\nexport class FormTypeObject extends FormType implements FormPrimitiveType {\r\n    constructor() {\r\n        super(\"Object\");\r\n    }\r\n\r\n    isEqual(a: any, b: any): boolean {\r\n        return deepEqual(a, b);\r\n    }\r\n}\r\n\r\nexport enum FormFieldChangeType {\r\n    Value,\r\n    MetaValue\r\n}\r\n\r\nexport interface FormFieldValueChange {\r\n    stateKey: string;\r\n    type: FormFieldChangeType.Value;\r\n    field: FormField;\r\n    oldValue: any;\r\n    newValue: any;\r\n    initiator: any;\r\n    processed: boolean;\r\n    last: boolean;\r\n    date: Date;\r\n}\r\n\r\nexport interface FormFieldMetaValueChange {\r\n    stateKey: string;\r\n    type: FormFieldChangeType.MetaValue;\r\n    field: FormField;\r\n    metaKey: string;\r\n    oldValue: any;\r\n    newValue: any;\r\n    initiator: any;\r\n    processed: boolean;\r\n    last: boolean;\r\n    date: Date;\r\n}\r\n\r\nexport type FormFieldChange = FormFieldValueChange | FormFieldMetaValueChange;\r\n\r\nexport class FormFieldChangesEvent extends Event {\r\n    constructor(public changes: FormFieldChange[]) {\r\n        super(\"changes\", { cancelable: true });\r\n    }\r\n}\r\n\r\ninterface FormFieldChangeFilter {\r\n    type?: FormFieldChangeType | null;\r\n    onlyCurrentState?: boolean;\r\n    last?: boolean | null;\r\n    processed?: boolean | null;\r\n}\r\n\r\ninterface FormFieldAnyChangeFilter extends FormFieldChangeFilter {\r\n    type?: FormFieldChangeType | null;\r\n    metaKey?: never;\r\n}\r\n\r\ninterface FormFieldValueChangeFilter extends FormFieldChangeFilter {\r\n    type: FormFieldChangeType.Value;\r\n    metaKey?: never;\r\n}\r\n\r\ninterface FormFieldMetaValueChangeFilter extends FormFieldChangeFilter {\r\n    type: FormFieldChangeType.MetaValue;\r\n    metaKey?: string | null;\r\n}\r\n\r\nexport class FormFieldChangeSet {\r\n    private _changes: FormFieldChange[];\r\n    private _maxSize: number;\r\n\r\n    constructor(maxSize = 128) {\r\n        this._changes = [];\r\n        this._maxSize = maxSize;\r\n    }\r\n\r\n    trimProcessedChanges() {\r\n        while (this._changes.length > this._maxSize) {\r\n            const index = this._changes.findIndex(c => c.processed);\r\n            if (index === -1) break;\r\n            this._changes.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    add(change: FormFieldChange): void {\r\n        let lastChange: FormFieldChange | undefined | null = null;\r\n        if (change.type === FormFieldChangeType.Value) {\r\n            lastChange = this.getFieldChange(change.field, { type: FormFieldChangeType.Value });\r\n        } else if (change.type === FormFieldChangeType.MetaValue) {\r\n            lastChange = this.getFieldChange(change.field, { type: FormFieldChangeType.MetaValue, metaKey: change.metaKey });\r\n        }\r\n        if (lastChange != null) {\r\n            lastChange.last = false;\r\n        }\r\n        this._changes.push(change);\r\n        this.trimProcessedChanges();\r\n    }\r\n\r\n    remove(change: FormFieldChange): void {\r\n        this._changes.splice(this._changes.indexOf(change), 1);\r\n    }\r\n\r\n    getFieldChange(field: FormField, filter: FormFieldValueChangeFilter): FormFieldValueChange | undefined;\r\n    getFieldChange(field: FormField, filter: FormFieldMetaValueChangeFilter): FormFieldMetaValueChange | undefined;\r\n    getFieldChange(field: FormField, filter: FormFieldAnyChangeFilter): FormFieldChange | undefined;\r\n    getFieldChange(field: FormField, { onlyCurrentState = true, last = true, processed = false, type = null, metaKey = null }: FormFieldAnyChangeFilter | FormFieldValueChangeFilter | FormFieldMetaValueChangeFilter = {}): FormFieldChange | undefined {\r\n        let changes = this.getFieldChanges(field, { onlyCurrentState, last, processed, type });\r\n        if (type === FormFieldChangeType.MetaValue && metaKey != null) {\r\n            changes = (changes as FormFieldMetaValueChange[]).filter(change => change.metaKey === metaKey);\r\n        }\r\n        return changes.at(-1);\r\n    }\r\n\r\n    getFieldChanges(field: FormField, filter?: FormFieldValueChangeFilter): FormFieldValueChange[];\r\n    getFieldChanges(field: FormField, filter?: FormFieldMetaValueChangeFilter): FormFieldMetaValueChange[];\r\n    getFieldChanges(field: FormField, filter?: FormFieldAnyChangeFilter): FormFieldChange[];\r\n    getFieldChanges(field: FormField, { onlyCurrentState = true, last = true, processed = false, type = null }: FormFieldAnyChangeFilter | FormFieldValueChangeFilter | FormFieldMetaValueChangeFilter = {}): FormFieldChange[] {\r\n        let changes = this._changes.filter(change => change.field === field);\r\n        if (type != null) { changes = changes.filter(change => change.type === type); }\r\n        if (last != null) { changes = changes.filter(change => change.last === last); }\r\n        if (processed != null) { changes = changes.filter(change => change.processed === processed); }\r\n        if (onlyCurrentState) { changes = changes.filter(change => change.stateKey === field.currentStateKey); }\r\n        return changes\r\n    }\r\n\r\n    hasChanges(field: FormField): boolean {\r\n        return this.getFieldChanges(field, { onlyCurrentState: true, last: true }).length !== 0;\r\n    }\r\n\r\n    markProcessed(changes: FormFieldChange[]): void {\r\n        changes.forEach(change => { change.processed = true; });\r\n        this.trimProcessedChanges();\r\n    }\r\n\r\n    static asChangedName(change: FormFieldChange): string | null {\r\n        if (change.type === FormFieldChangeType.Value) {\r\n            return change.field.name;\r\n        }\r\n        if (change.type === FormFieldChangeType.MetaValue) {\r\n            return getMetaDependencyKey(change.field.name, change.metaKey);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static asChangedNames(changes: FormFieldChange[]): Set<string> {\r\n        const changedNames = new Set<string>();\r\n        for (const change of changes) {\r\n            const changedName = this.asChangedName(change);\r\n            if (changedName == null) continue;\r\n            changedNames.add(changedName);\r\n        }\r\n        return changedNames;\r\n    }\r\n\r\n    processChanges(field: FormField, type: FormFieldChangeType | null = null, dryRun: boolean = false): Set<string> {\r\n        const lastChanges = this.getFieldChanges(field, { onlyCurrentState: true, type });\r\n        if (!dryRun) {\r\n            this.markProcessed(this.getFieldChanges(field, { onlyCurrentState: true, last: null, type }));\r\n            field.dispatchEvent(new FormFieldChangesEvent(lastChanges));\r\n        }\r\n        return FormFieldChangeSet.asChangedNames(lastChanges);\r\n    }\r\n}\r\n\r\nexport interface FormFieldContext {\r\n    stateKey?: string | null;\r\n    initiator?: any | null;\r\n    processChanges?: boolean;\r\n    disabledIsNull?: boolean;\r\n    raw?: boolean;\r\n}\r\n\r\nexport interface InitialMetaItem {\r\n    value: any;\r\n    resettable: boolean;\r\n}\r\n\r\nexport class FormField extends EventTarget {\r\n    private _name: string;\r\n    private _type: FormType;\r\n    private _changeSet: FormFieldChangeSet;\r\n    private _initializedStateKeys: Set<string>;\r\n    private _initialValue: any;\r\n    private _valueMap: Map<string, any>;\r\n    private _initialMeta: Map<string, InitialMetaItem>;\r\n    private _metaMap: Map<string, Map<string, any>>;\r\n    private _currentStateKey: string;\r\n\r\n    constructor(name: string, type: FormType, { changeSet = null, effectManager = null }: { changeSet?: FormFieldChangeSet | null, effectManager?: EffectManager | null } = {}) {\r\n        super();\r\n        this._name = name;\r\n        this._type = type;\r\n        this._initializedStateKeys = new Set();\r\n\r\n        this._initialValue = this.type.getInitialValue();\r\n        this._valueMap = new Map();\r\n\r\n        this._initialMeta = this.type.getInitialMeta();\r\n        this._metaMap = new Map();\r\n\r\n        this._changeSet = changeSet ?? new FormFieldChangeSet(32);\r\n        this._currentStateKey = \"default\";\r\n        this.initializeState({ stateKey: \"default\" });\r\n        if (effectManager != null) {\r\n            this.initializeDependencies(effectManager);\r\n        }\r\n    }\r\n\r\n    get self(): this {\r\n        return this;\r\n    }\r\n\r\n    get currentStateKey() {\r\n        return this._currentStateKey;\r\n    }\r\n\r\n    get context(): FormFieldContext {\r\n        return {\r\n            disabledIsNull: true,\r\n            initiator: null,\r\n            stateKey: null,\r\n            raw: false,\r\n            processChanges: false\r\n        };\r\n    }\r\n\r\n    get changeSet(): FormFieldChangeSet {\r\n        return this._changeSet;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get type(): FormType {\r\n        return this._type;\r\n    }\r\n\r\n    clearInitialMeta(): void {\r\n        this._initialMeta = new Map();\r\n    }\r\n\r\n    reset({ stateKey = null, initiator = null, processChanges = false, full = false }: FormFieldContext & { full?: boolean } = {}): Set<string> {\r\n        stateKey ??= this._currentStateKey;\r\n        console.log(\"[FormField.reset] Reset state `%s` for field `%s`\", stateKey, this.name);\r\n        this.setValue(this._initialValue, { raw: true, stateKey, initiator });\r\n        if (full) {\r\n            this._metaMap.set(stateKey, new Map());\r\n        }\r\n        for (const [metaKey, item] of this._initialMeta.entries()) {\r\n            if (!full && !item.resettable) continue;\r\n            this.setMetaValue(metaKey, item.value, { raw: true, stateKey, initiator });\r\n        }\r\n        return this.processChanges(null, !processChanges);\r\n    }\r\n\r\n    initializeState({ stateKey, initiator = null }: FormFieldContext & { stateKey: string }): void {\r\n        if (!this._initializedStateKeys.has(stateKey)) {\r\n            console.log(\"[FormField.initializeState] Initializing state key `%s` for field `%s`\", stateKey, this.name);\r\n            this._initializedStateKeys.add(stateKey);\r\n            this.reset({ stateKey, initiator, processChanges: true, full: true });\r\n        }\r\n    }\r\n\r\n    switchState({ stateKey, initiator = null, processChanges = false }: FormFieldContext & { stateKey: string }): Set<string> {\r\n        console.log(\"[FormField.switchState] Switching state for field `%s` from `%s` to `%s`\", this.name, this._currentStateKey, stateKey);\r\n        this.initializeState({ stateKey, initiator });\r\n        const oldValue = this._valueMap.get(this._currentStateKey);\r\n        const newValue = this._valueMap.get(stateKey);\r\n        if (!this.type.isEqual(oldValue, newValue)) {\r\n            const change: FormFieldChange = {\r\n                stateKey,\r\n                type: FormFieldChangeType.Value,\r\n                field: this,\r\n                initiator,\r\n                oldValue,\r\n                newValue,\r\n                date: new Date(),\r\n                last: true,\r\n                processed: false\r\n            };\r\n            this.changeSet.add(change);\r\n        }\r\n\r\n        for (const [metaKey, newValue] of this._metaMap.get(stateKey)!.entries()) {\r\n            const oldValue = this._metaMap.get(this._currentStateKey)!.get(metaKey);\r\n            if (oldValue !== newValue) {\r\n                const change: FormFieldChange = {\r\n                    stateKey,\r\n                    type: FormFieldChangeType.MetaValue,\r\n                    field: this,\r\n                    initiator,\r\n                    metaKey,\r\n                    oldValue,\r\n                    newValue,\r\n                    date: new Date(),\r\n                    last: true,\r\n                    processed: false\r\n                };\r\n                this.changeSet.add(change);\r\n            }\r\n        }\r\n        this._currentStateKey = stateKey;\r\n        return this.processChanges(null, !processChanges);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {EffectManager} effectManager \r\n     */\r\n    initializeDependencies(effectManager: EffectManager) {\r\n        effectManager.addDependency(this.name, getMetaDependencyKey(this.name, \"disabled\"));\r\n        switch (this.type.asElementType()) {\r\n            case \"checkbox\":\r\n            case \"radio\":\r\n                effectManager.addDependency(this.name, getMetaDependencyKey(this.name, \"checked\"));\r\n                break;\r\n            case \"select-one\":\r\n            case \"select-multiple\":\r\n                effectManager.addDependency(this.name, getMetaDependencyKey(this.name, \"options\"));\r\n                break;\r\n        }\r\n    }\r\n\r\n    getAdapter(outerContext: FormFieldContext) {\r\n        return new Proxy(this, {\r\n            get(target, propertyKey, receiver) {\r\n                switch (propertyKey) {\r\n                    case \"self\":\r\n                        return target;\r\n                    case \"context\":\r\n                        return outerContext;\r\n                    case \"getAdapter\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getAdapter({ ...outerContext, ...innerContext });\r\n                    case \"getValue\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getValue({ ...outerContext, ...innerContext });\r\n                    case \"getMetaValue\":\r\n                        return (metaKey: string, innerContext: FormFieldContext = {}) => target.getMetaValue(metaKey, { ...outerContext, ...innerContext });\r\n                    case \"setValue\":\r\n                        return (newValue: any, innerContext: FormFieldContext = {}) => target.setValue(newValue, { ...outerContext, ...innerContext });\r\n                    case \"setMetaValue\":\r\n                        return (metaKey: string, newValue: any, innerContext: FormFieldContext = {}) => target.setMetaValue(metaKey, newValue, { ...outerContext, ...innerContext });\r\n                    default:\r\n                        const value = Reflect.get(target, propertyKey, receiver);\r\n                        return typeof value === \"function\" ? value.bind(target) : value;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getValue({ stateKey = null, raw = false, disabledIsNull = true }: FormFieldContext = {}): any {\r\n        if (!raw) {\r\n            if (disabledIsNull && this.getMetaValue(\"disabled\", { stateKey })) {\r\n                return null;\r\n            }\r\n            return this.type.getFieldValue(this.getAdapter({ stateKey, raw: true }));\r\n        }\r\n\r\n        stateKey ??= this._currentStateKey\r\n        this.initializeState({ stateKey });\r\n        return this._valueMap.get(stateKey);\r\n    }\r\n\r\n    setInitialValue(newValue: any): void {\r\n        this._initialValue = newValue;\r\n    }\r\n\r\n    setValue(newValue: any, { stateKey = null, raw = false, initiator = null, processChanges = false }: FormFieldContext = {}): Set<string> {\r\n        if (!raw) {\r\n            return this.type.setFieldValue(this.getAdapter({ stateKey, raw: true, processChanges, initiator }), newValue);\r\n        }\r\n        initiator ??= this;\r\n        stateKey ??= this._currentStateKey;\r\n        this.initializeState({ stateKey, initiator });\r\n        const oldValue = this.getValue({ stateKey, raw: true });\r\n        if (this.type.isEqual(oldValue, newValue)) return new Set();\r\n        this._valueMap.set(stateKey, newValue);\r\n        const change: FormFieldChange = {\r\n            stateKey,\r\n            type: FormFieldChangeType.Value,\r\n            field: this,\r\n            initiator,\r\n            oldValue,\r\n            newValue,\r\n            date: new Date(),\r\n            last: true,\r\n            processed: false\r\n        };\r\n        console.log(\"[FormField.setValue] Value changed:\", { oldValue, newValue, stateKey });\r\n        this.changeSet.add(change);\r\n        return this.processChanges(FormFieldChangeType.Value, !processChanges);\r\n    }\r\n\r\n    getMetaValue(metaKey: string, { stateKey = null, raw = false }: FormFieldContext = {}): any {\r\n        if (!raw) {\r\n            return this.type.getFieldMetaValue(this.getAdapter({ raw: true, stateKey }), metaKey);\r\n        }\r\n        stateKey ??= this._currentStateKey\r\n        this.initializeState({ stateKey });\r\n        const meta = this._metaMap.get(stateKey);\r\n        return meta!.get(metaKey);\r\n    }\r\n\r\n    setInitialMetaValue(metaKey: string, newValue: any, { resettable = true }: { resettable?: boolean } = {}): void {\r\n        this._initialMeta.set(metaKey, { value: newValue, resettable });\r\n    }\r\n\r\n    setMetaValue(metaKey: string, newValue: any, { stateKey = null, initiator = null, processChanges = false, raw = false }: FormFieldContext = {}): Set<string> {\r\n        if (!raw) {\r\n            return this.type.setFieldMetaValue(this.getAdapter({ stateKey, raw: true, initiator, processChanges }), metaKey, newValue);\r\n        }\r\n        initiator ??= this;\r\n        stateKey ??= this._currentStateKey;\r\n        this.initializeState({ stateKey, initiator });\r\n        const oldValue = this.getMetaValue(metaKey, { stateKey });\r\n        if (oldValue === newValue) return new Set();\r\n        this._metaMap.get(stateKey)!.set(metaKey, newValue);\r\n        const change: FormFieldChange = {\r\n            stateKey,\r\n            type: FormFieldChangeType.MetaValue,\r\n            field: this,\r\n            initiator,\r\n            metaKey,\r\n            oldValue,\r\n            newValue,\r\n            date: new Date(),\r\n            last: true,\r\n            processed: false\r\n        };\r\n        this.changeSet.add(change);\r\n        console.log(\"[FormField.setMetaValue] Meta\", getMetaDependencyKey(this.name, metaKey), \"value changed:\", { oldValue, newValue, stateKey });\r\n        return this.processChanges(FormFieldChangeType.MetaValue, !processChanges);\r\n    }\r\n\r\n    processChanges(type: FormFieldChangeType | null = null, dryRun: boolean = false): Set<string> {\r\n        return this.changeSet.processChanges(this, type, dryRun);\r\n    }\r\n}\r\n\r\nexport class ContextFormField {\r\n    constructor(public readonly field: FormField, public readonly context: FormFieldContext) { }\r\n}\r\n\r\nexport class FormFieldArray {\r\n    constructor(public fieldArray: FormField[]) { }\r\n\r\n    getAdapter(outerContext: FormFieldContext) {\r\n        return new Proxy(this, {\r\n            get(target, propertyKey, receiver) {\r\n                switch (propertyKey) {\r\n                    case \"self\":\r\n                        return target;\r\n                    case \"context\":\r\n                        return outerContext;\r\n                    case \"getAdapter\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getAdapter({ ...outerContext, ...innerContext });\r\n                    case \"getValue\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getValue({ ...outerContext, ...innerContext });\r\n                    case \"getMetaValue\":\r\n                        return (metaKey: string, innerContext: FormFieldContext = {}) => target.getMetaValue(metaKey, { ...outerContext, ...innerContext });\r\n                    case \"setValue\":\r\n                        return (newValue: any, innerContext: FormFieldContext = {}) => target.setValue(newValue, { ...outerContext, ...innerContext });\r\n                    case \"setMetaValue\":\r\n                        return (metaKey: string, newValue: any, innerContext: FormFieldContext = {}) => target.setMetaValue(metaKey, newValue, { ...outerContext, ...innerContext });\r\n                    default:\r\n                        const value = Reflect.get(target, propertyKey, receiver);\r\n                        return typeof value === \"function\" ? value.bind(target) : value;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getValue({ stateKey = null, disabledIsNull = true, raw = false }: FormFieldContext = {}): any {\r\n        return this.fieldArray.map(field => field.getValue({ stateKey, disabledIsNull, raw })).find(value => value != null);\r\n    }\r\n\r\n    getMetaValue(metaKey: string, { stateKey = null, raw = false }: FormFieldContext = {}): any {\r\n        return this.fieldArray.map(field => field.getMetaValue(metaKey, { stateKey, raw })).find(value => value != null);\r\n    }\r\n\r\n    setValue(value: any, { stateKey = null, initiator = null, processChanges = false, raw = false }: FormFieldContext = {}): Set<string> {\r\n        return this.fieldArray.map(field => field.setValue(value, { stateKey, initiator, processChanges, raw })).find(changedNames => changedNames.size !== 0) ?? new Set();\r\n    }\r\n\r\n    setMetaValue(metaKey: string, value: any, { stateKey = null, initiator = null, processChanges = false, raw = false }: FormFieldContext = {}): Set<string> {\r\n        return this.fieldArray.map(field => field.setMetaValue(metaKey, value, { stateKey, initiator, processChanges, raw })).find(changedNames => changedNames.size !== 0) ?? new Set();\r\n    }\r\n\r\n    processChanges(type: FormFieldChangeType | null = null, dryRun: boolean = false): Set<string> {\r\n        return this.fieldArray.map(field => field.processChanges(type, dryRun)).find(changedNames => changedNames.size !== 0) ?? new Set();\r\n    }\r\n}\r\n\r\nexport abstract class FormFieldLinker {\r\n    public field: FormField;\r\n    public type: FormType;\r\n\r\n    constructor(field: FormField) {\r\n        this.field = field;\r\n        this.type = field.type;\r\n    }\r\n\r\n    abstract link(): void;\r\n    abstract unlink(): void;\r\n}\r\n\r\nexport class FormFieldElementLinker extends FormFieldLinker {\r\n    public element: FormElement;\r\n    private _handleHideContainer: ((event: Event) => void) | null;\r\n    /**\r\n     * \r\n     * @param {FormField} field \r\n     * @param {Element} element \r\n     */\r\n    constructor(field: FormField, element: FormElement) {\r\n        super(field);\r\n        this.element = element;\r\n        if (this.type.asElementType() !== this.element.type) {\r\n            throw new Error(\"For link type is equal\")\r\n        }\r\n        this._fieldChangesEventListener = this._fieldChangesEventListener.bind(this);\r\n        this._elementValueInputEventListener = this._elementValueInputEventListener.bind(this);\r\n        this._elementValueChangeEventListener = this._elementValueChangeEventListener.bind(this);\r\n        this._handleHideContainer = null;\r\n    }\r\n\r\n    override link(): void {\r\n        this.field.setInitialValue(this._getElementValue());\r\n        this.field.setInitialMetaValue(\"disabled\", this._getElementMetaValue(\"disabled\"), { resettable: false });\r\n        this.field.setInitialMetaValue(\"container\", this.element.parentElement, { resettable: false });\r\n        if ([\"radio\", \"checkbox\"].includes(this.type.asElementType())) {\r\n            this.field.setInitialMetaValue(\"checked\", this._getElementMetaValue(\"checked\"));\r\n        }\r\n        if ([\"select-one\", \"select-multiple\"].includes(this.type.asElementType())) {\r\n            this.field.setInitialMetaValue(\"options\", this._getElementMetaValue(\"options\"), { resettable: false })\r\n        }\r\n        this.field.reset({ processChanges: true, initiator: this, full: true });\r\n\r\n        this.field.addEventListener(\"changes\", this._fieldChangesEventListener);\r\n        if ([\"text\", \"number\", \"textarea\"].includes(this.type.asElementType())) {\r\n            this.element.addEventListener(\"input\", this._elementValueInputEventListener);\r\n        } else {\r\n            this.element.addEventListener(\"change\", this._elementValueChangeEventListener);\r\n        }\r\n    }\r\n\r\n    override unlink(): void {\r\n        this.field.removeEventListener(\"changes\", this._fieldChangesEventListener);\r\n        if ([\"text\", \"number\", \"textarea\"].includes(this.type.asElementType())) {\r\n            this.element.removeEventListener(\"input\", this._elementValueInputEventListener);\r\n        } else {\r\n            this.element.removeEventListener(\"change\", this._elementValueChangeEventListener);\r\n        }\r\n    }\r\n\r\n    _elementValueInputEventListener(event: Event): void {\r\n        console.log(\"[FormFieldElementLinker._elementValueInputEventListener] Event\")\r\n        this.field.setMetaValue(\"dirty\", true, { initiator: this, processChanges: true });\r\n        this._syncFieldValue();\r\n    }\r\n\r\n    _elementValueChangeEventListener(event: Event): void {\r\n        this.field.setMetaValue(\"dirty\", true, { initiator: this, processChanges: true });\r\n        if ([\"radio\", \"checkbox\"].includes(this.type.asElementType())) {\r\n            this._syncFieldMetaValue(\"checked\");\r\n        } else {\r\n            this._syncFieldValue();\r\n        }\r\n    }\r\n\r\n    _fieldChangesEventListener(event: Event) {\r\n        const changes = (event as FormFieldChangesEvent).changes.filter(change => change.initiator !== this);\r\n        for (const change of changes) {\r\n            if (change.type === FormFieldChangeType.Value) {\r\n                this._syncElementValue();\r\n            } else if (change.type === FormFieldChangeType.MetaValue) {\r\n                this._syncElementMetaValue(change.metaKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    _syncElementValue(): void {\r\n        console.log(\"[FormFieldElementLinker._syncElementValue] Syncing element value\");\r\n        const value = this.field.getValue({ raw: true });\r\n        const status = this.type.setElementValue(this.element, value);\r\n        if (status !== FormTypeElementStatus.VALUE_SET_SUCCESS) {\r\n            console.log(\"[FormFieldElementLinker._syncElementMetaValue] Failed to set element value, status `%s`\", status);\r\n            return;\r\n        }\r\n    }\r\n\r\n    _getElementValue(): any {\r\n        const [value, status] = this.type.getElementValue(this.element);\r\n        if (status !== FormTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED) {\r\n            console.warn(\"[FormFieldElementLinker._getElementValue] Failed to get value from element, status `%s`\", status);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    _syncFieldValue(): void {\r\n        console.log(\"[FormFieldElementLinker._syncFieldValue] Syncing field value\");\r\n        this.field.setValue(this._getElementValue(), { initiator: this, processChanges: true, raw: true });\r\n    }\r\n\r\n    _syncElementMetaValue(metaKey: string): void {\r\n        console.log(\"[FormFieldElementLinker._syncElementMetaValue] Syncing element meta value\");\r\n        const value = this.field.getMetaValue(metaKey, { raw: true });\r\n        const status = this.type.setElementMetaValue(this.element, metaKey, value);\r\n        if (status === FormTypeElementStatus.META_VALUE_SET_SUCCESS) {\r\n            return;\r\n        }\r\n        if (status === FormTypeElementStatus.META_KEY_NOT_EXISTS) {\r\n            switch (metaKey) {\r\n                case \"visible\":\r\n                    const container = this.field.getMetaValue(\"container\") as HTMLElement;\r\n                    if (this._handleHideContainer != null) {\r\n                        container.removeEventListener(\"transitionend\", this._handleHideContainer);\r\n                        this._handleHideContainer = null;\r\n                    }\r\n                    if (value) {\r\n                        if (container.style.display === \"none\") {\r\n                            container.style.display = \"\";\r\n                            requestAnimationFrame(() => {\r\n                                container.dataset.visible = \"true\";\r\n                            });\r\n                        } else {\r\n                            container.dataset.visible = \"true\";\r\n                        }\r\n                    } else {\r\n                        if (container.style.display !== \"none\") {\r\n                            this._handleHideContainer = (event: Event) => {\r\n                                container.style.display = \"none\";\r\n                            };\r\n                            container.addEventListener(\"transitionend\", this._handleHideContainer, { once: true });\r\n                        }\r\n                        container.dataset.visible = \"false\";\r\n                    }\r\n                    break;\r\n\r\n                case \"options\":\r\n                    if (value.length !== 0) {\r\n                        this._syncElementValue();\r\n                    }\r\n                    break;\r\n            }\r\n            return;\r\n        }\r\n\r\n        console.log(\"[FormFieldElementLinker._syncElementMetaValue] Failed to set element meta value, status `%s`\", status);\r\n    }\r\n\r\n    _getElementMetaValue(metaKey: string): any {\r\n        const [value, status] = this.type.getElementMetaValue(this.element, metaKey);\r\n        if (status !== FormTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED) {\r\n            console.warn(\"[FormFieldElementLinker._getElementMetaValue] Failed to get value from element, status `%s`\", status);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    _syncFieldMetaValue(metaKey: string): void {\r\n        console.log(\"[FormFieldElementLinker._syncFieldMeta] Syncing field meta value\");\r\n        this.field.setMetaValue(metaKey, this._getElementMetaValue(metaKey), { initiator: this, processChanges: true });\r\n    }\r\n}\r\n\r\nexport class FormFields extends EventTarget {\r\n    public list: FormField[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.list = [];\r\n        this._fieldChangesEventListener = this._fieldChangesEventListener.bind(this);\r\n    }\r\n\r\n    _fieldChangesEventListener(event: Event) {\r\n        this.dispatchEvent(new FormFieldChangesEvent((event as FormFieldChangesEvent).changes));\r\n    }\r\n\r\n    add(field: FormField) {\r\n        field = field.self;\r\n        if (this.list.includes(field)) return false;\r\n        field.addEventListener(\"changes\", this._fieldChangesEventListener);\r\n        this.list.push(field);\r\n        return true;\r\n    }\r\n\r\n    remove(field: FormField) {\r\n        field = field.self;\r\n        if (!this.list.includes(field)) return false;\r\n        field.removeEventListener(\"changes\", this._fieldChangesEventListener);\r\n        this.list.splice(this.list.indexOf(field), 1);\r\n        return true;\r\n    }\r\n\r\n    get(fieldName: string): FormField | FormFieldArray {\r\n        const fields = this.list.filter(field => field.name === fieldName)\r\n        return fields.length === 1 ? fields[0] : new FormFieldArray(fields);\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<string> {\r\n        return new Set(this.list.map(field => field.name)).values();\r\n    }\r\n}\r\n\r\nexport interface SelectOption {\r\n    value: string;\r\n    textContent: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n}\r\n\r\nexport abstract class FormChangesManager {\r\n    abstract manage(form: Form, changes: FormFieldChange[]): void;\r\n}\r\n\r\nexport class FormChangesForRadioManager extends FormChangesManager {\r\n    override manage(form: Form, changes: FormFieldChange[]): void {\r\n        changes.filter(change =>\r\n            change.initiator !== form &&\r\n            change.field.type.asElementType() === \"radio\" &&\r\n            change.type === FormFieldChangeType.MetaValue &&\r\n            change.metaKey === \"checked\" &&\r\n            change.newValue\r\n        ).forEach(change => {\r\n            form.fields.list.filter(field =>\r\n                field.name === change.field.name &&\r\n                field.type.asElementType() === \"radio\" &&\r\n                field != change.field &&\r\n                field.getMetaValue(\"checked\")\r\n            ).forEach(field => {\r\n                field.setMetaValue(\"checked\", false, { initiator: form, processChanges: true });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport class FormChangesForTriggerEffectsManager extends FormChangesManager {\r\n    override manage(form: Form, changes: FormFieldChange[]): void {\r\n        changes = changes.filter(change => change.initiator !== form);\r\n        if (changes.length === 0) return;\r\n        form.effectManager.triggerEffects({ changedNames: FormFieldChangeSet.asChangedNames(changes) });\r\n    }\r\n}\r\n\r\nexport class Form extends EventTarget {\r\n    public form: HTMLFormElement;\r\n    public effectManager: EffectManager;\r\n    public fields: FormFields;\r\n    public fieldLinkers: FormFieldLinker[];\r\n    public changeSet: FormFieldChangeSet;\r\n    private _changesManagers: FormChangesManager[];\r\n\r\n    constructor({ form }: { form: HTMLFormElement }) {\r\n        super();\r\n        this.form = form;\r\n        this.changeSet = new FormFieldChangeSet();\r\n        this.effectManager = new EffectManager();\r\n        this.fields = new FormFields();\r\n        this.fieldLinkers = [];\r\n        this._changesManagers = [];\r\n        this._handleChanges = this._handleChanges.bind(this);\r\n    }\r\n\r\n    async setup() {\r\n        if (this.form != null) {\r\n            this.form.classList.add(\"ss-form\");\r\n            this.form.addEventListener(\"submit\", (event) => {\r\n                event.preventDefault();\r\n                this.submit().then(() => this.reset());\r\n            });\r\n\r\n            this.form.addEventListener(\"reset\", (event) => {\r\n                event.preventDefault();\r\n                this.reset();\r\n            });\r\n\r\n            this.fields.addEventListener(\"changes\", this._handleChanges);\r\n            this.registerChangesManager(new FormChangesForRadioManager());\r\n            this.registerChangesManager(new FormChangesForTriggerEffectsManager());\r\n            this.registerElements();\r\n        }\r\n    }\r\n\r\n    _handleChanges(event: Event) {\r\n        const changes = (event as FormFieldChangesEvent).changes;\r\n        for (const changesManager of this._changesManagers) {\r\n            changesManager.manage(this, changes);\r\n        }\r\n    }\r\n\r\n    switchState(stateKey: string) {\r\n        for (const field of this.fields.list) {\r\n            field.switchState({ stateKey, initiator: this, processChanges: true });\r\n        }\r\n        this.effectManager.triggerEffects();\r\n    }\r\n\r\n    registerChangesManager(changesManager: FormChangesManager) {\r\n        this._changesManagers.push(changesManager);\r\n    }\r\n\r\n    getFormData(): Record<string, any> {\r\n        const formData: Record<string, any> = {};\r\n        for (const fieldName of this.fields) {\r\n            formData[fieldName] = this.fields.get(fieldName).getValue();\r\n        }\r\n        return formData;\r\n    }\r\n\r\n    updateFormData(formData: Record<string, any>) {\r\n        for (const fieldName of this.fields) {\r\n            if (!(fieldName in formData)) continue;\r\n            this.fields.get(fieldName).setValue(formData[fieldName], { initiator: this });\r\n        }\r\n        this.effectManager.triggerEffects();\r\n    }\r\n\r\n    registerElements(): void {\r\n        for (const element of this.form.elements) {\r\n            if (!FormType.isFormElement(element)) {\r\n                continue;\r\n            }\r\n            if (element.name === \"\") continue;\r\n            const field = new FormField(element.name, FormType.fromFormElement(element), { changeSet: this.changeSet, effectManager: this.effectManager });\r\n            const fieldElementLinker = new FormFieldElementLinker(field, element);\r\n            fieldElementLinker.link();\r\n            this.fieldLinkers.push(fieldElementLinker);\r\n            this.fields.add(field);\r\n        }\r\n    }\r\n\r\n    getElement(name: string): Element | RadioNodeList | null {\r\n        return this.form.elements.namedItem(name);\r\n    }\r\n\r\n    async submit(): Promise<void> {\r\n\r\n    }\r\n\r\n    reset(): void {\r\n        for (const field of this.fields.list) {\r\n            field.reset({ initiator: this });\r\n        }\r\n        this.effectManager.triggerEffects();\r\n    }\r\n\r\n    addDisableWhenEffect(fieldName: string, disableWhen: () => Promise<boolean> | boolean, dependsOn: string[]): void {\r\n        this.effectManager.addEffect(getMetaDependencyKey(fieldName, \"disabled\"), {\r\n            type: \"disable-when\",\r\n            callback: async () => {\r\n                const disabled = await disableWhen();\r\n                // console.log(`[Effect.DisableWhen] Field ${fieldName} disabled: `, disabled);\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                return field.setMetaValue(\"disabled\", disabled, { processChanges: true });\r\n            },\r\n            dependsOn,\r\n        });\r\n    }\r\n\r\n    addVisibleWhenEffect(fieldName: string, visibleWhen: () => Promise<boolean> | boolean, dependsOn: string[]): void {\r\n        this.addDisableWhenEffect(fieldName, async () => !await visibleWhen(), dependsOn);\r\n        this.effectManager.addEffect(getMetaDependencyKey(fieldName, \"visible\"), {\r\n            type: \"visible-when\",\r\n            callback: async () => {\r\n                const visible = await visibleWhen();\r\n                // console.log(`[Effect.VisibleWhen] Field ${fieldName} visible: `, visible);\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                return field.setMetaValue(\"visible\", visible, { processChanges: true });\r\n            },\r\n            dependsOn: [getMetaDependencyKey(fieldName, \"disabled\")]\r\n        });\r\n    }\r\n\r\n    addComputedFieldEffect(fieldName: string, fieldType: FormType, compute: () => Promise<any> | any, dependsOn: string[]): void {\r\n        this.fields.add(new FormField(fieldName, fieldType, { changeSet: this.changeSet, effectManager: this.effectManager }))\r\n        this.effectManager.addEffect(fieldName, {\r\n            type: \"computed-field\",\r\n            callback: async () => {\r\n                const value = await compute();\r\n                // console.log(`[Effect.ComputedField] Field ${fieldName} value: `, value);\r\n                const field = this.fields.get(fieldName);\r\n                return field.setValue(value, { initiator: this, processChanges: true });\r\n            },\r\n            dependsOn\r\n        });\r\n    }\r\n\r\n    addFieldAutofillEffect(fieldName: string, autofillWith: () => Promise<any> | any, dependsOn: string[]): void {\r\n        this.effectManager.addDependency(fieldName, getMetaDependencyKey(fieldName, \"autofill\"));\r\n        this.effectManager.addEffect(getMetaDependencyKey(fieldName, \"autofill\"), {\r\n            type: \"field-autofill\",\r\n            callback: async () => {\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                const dirty = field.getMetaValue(\"dirty\");\r\n                field.setMetaValue(\"autofill\", !dirty);\r\n                if (dirty) {\r\n                    return field.processChanges();\r\n                }\r\n                const value = await autofillWith();\r\n                // console.log(`[Effect.FieldAutofill] Field ${fieldName} value: `, value);\r\n                field.setMetaValue(\"autofill\", field.setValue(value).size !== 0);\r\n                return field.processChanges();\r\n            },\r\n            dependsOn: [getMetaDependencyKey(fieldName, \"dirty\"), ...dependsOn]\r\n        });\r\n    }\r\n\r\n    addSelectOptionsInitializerEffect(fieldName: string, getDefaultOption: () => Promise<SelectOption> | SelectOption, getOptions: () => Promise<SelectOption[]> | SelectOption[], dependsOn: string[]): void {\r\n        this.effectManager.addEffect(getMetaDependencyKey(fieldName, \"options\"), {\r\n            type: \"select-options-initializer\",\r\n            callback: async () => {\r\n                const defaultOption = await getDefaultOption();\r\n                const options = await getOptions();\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                const selectedValue = field.getValue({ disabledIsNull: false });\r\n                field.setValue(selectedValue);\r\n                field.setMetaValue(\"disabled\", options.length === 0);\r\n                field.setMetaValue(\"options\", [defaultOption, ...options]);\r\n                return field.processChanges();\r\n            },\r\n            dependsOn\r\n        });\r\n    }\r\n}","\r\n\r\nexport interface ColumnDefinition {\r\n    key: string;\r\n    title: string;\r\n}\r\n\r\n\r\nexport class Column {\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport class Table {\r\n    public container: HTMLElement;\r\n    public columnDefinitions: ColumnDefinition[];\r\n    constructor({ container, columnDefinitions }: { container: HTMLElement, columnDefinitions: ColumnDefinition[] }) {\r\n        this.container = container;\r\n        this.columnDefinitions = columnDefinitions;\r\n        this.render();\r\n    }\r\n\r\n\r\n\r\n    async render() {\r\n        const tableElement = document.createElement(\"div\");\r\n        tableElement.innerHTML = `\r\n            <div class=\"ss-table\">\r\n                <div class=\"ss-table-head\">\r\n                    <div class=\"ss-table-row\">\r\n                        <div class=\"ss-table-header-columns-pinned-left\">\r\n                        </div>\r\n                        <div class=\"ss-table-header-columns\">\r\n                            \r\n                        </div>\r\n                        <div class=\"ss-table-header-columns-pinned-right\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"ss-table-body\">\r\n                    <div class=\"ss-table-body-row-columns-pinned-left\">\r\n                        \r\n                    </div>\r\n                    <div class=\"ss-table-body-rows\">\r\n                        <div class=\"ss-table-body-row\">\r\n                            <div class=\"ss-table-body-cell\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ss-table-body-row-columns-pinned-right\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"ss-table-footer\">\r\n                    <div class=\"ss-table-footer-row-columns-pinned-left\">\r\n                    </div>\r\n                    <div class=\"ss-table-footer-rows\">\r\n                        <div class=\"ss-table-footer-row\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ss-table-footer-row-columns-pinned-left\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        const headersElement = tableElement.querySelector(\".ss-table-header-columns\")!;\r\n        for (const columnDefinition of this.columnDefinitions) {\r\n            const headerElement = document.createElement(\"div\");\r\n            headerElement.classList.add(\"ss-table-cell\");\r\n            headerElement.classList.add(\"ss-table-header-column\");\r\n            headerElement.textContent = columnDefinition.title;\r\n            headersElement.append(headerElement);\r\n        }\r\n        this.container.innerHTML = '';\r\n        this.container.append(tableElement);\r\n    }\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","DependencyGraph","constructor","this","_keys","Set","_dependentMap","Map","_dependencyMap","_addedDependencies","_topologicalOrder","getDependencies","buildDependenciesMap","dependencies","dependent","dependency","add","has","set","inDegree","size","queue","degree","push","length","shift","Error","addDependency","keys","topologicalOrder","dependentMap","dependencyMap","EffectManager","_keyEffect","super","effect","dependsOn","concat","addEffect","triggerEffects","changedNames","arguments","undefined","name","intersection","changedNamesByEffect","callback","forEach","changedName","deepEqual","a","b","aKeys","bKeys","getMetaDependencyKey","fieldName","metaKey","FormTypeElementStatus","FormType","object","FormTypeObject","boolean","FormTypeBoolean","text","FormTypeText","number","FormTypeNumber","date","FormTypeDate","select","multiple","FormTypeSelect","checkbox","FormTypeCheckbox","radio","FormTypeRadio","isFormElement","element","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","fromFormElement","type","area","isEqual","isEmpty","asElementType","fetch","getFieldValue","field","getValue","getFieldMetaValue","getMetaValue","setFieldValue","newValue","setValue","setFieldMetaValue","setMetaValue","getElementValue","TYPE_MISMATCH","VALUE_SUCCESSFULLY_RECEIVED","INVALID_ELEMENT","setElementValue","VALUE_SET_SUCCESS","getElementMetaValue","disabled","META_VALUE_SUCCESSFULLY_RECEIVED","META_KEY_NOT_EXISTS","setElementMetaValue","Boolean","classList","toggle","META_VALUE_SET_SUCCESS","getInitialValue","getInitialMeta","meta","resettable","isSameType","otherType","_area","toDateString","status","checked","includes","_multiple","_of","of","options","optionValues","map","option","filter","some","optionValue","find","selected","validValue","Array","isArray","from","selectedOptions","textContent","querySelector","innerHTML","optionElement","document","createElement","FormFieldChangeType","FormFieldChangesEvent","Event","changes","cancelable","FormFieldChangeSet","maxSize","_changes","_maxSize","trimProcessedChanges","index","findIndex","c","processed","splice","change","lastChange","Value","getFieldChange","MetaValue","last","remove","indexOf","onlyCurrentState","getFieldChanges","at","stateKey","currentStateKey","hasChanges","markProcessed","asChangedName","asChangedNames","processChanges","dryRun","lastChanges","dispatchEvent","FormField","EventTarget","changeSet","effectManager","_name","_type","_initializedStateKeys","_initialValue","_valueMap","_initialMeta","_metaMap","_changeSet","_currentStateKey","initializeState","initializeDependencies","self","context","disabledIsNull","initiator","raw","clearInitialMeta","reset","full","console","log","item","entries","_ref","switchState","_ref2","oldValue","Date","getAdapter","outerContext","Proxy","target","propertyKey","receiver","innerContext","Reflect","bind","setInitialValue","setInitialMetaValue","ContextFormField","FormFieldArray","fieldArray","FormFieldLinker","FormFieldElementLinker","_fieldChangesEventListener","_elementValueInputEventListener","_elementValueChangeEventListener","_handleHideContainer","link","_getElementValue","_getElementMetaValue","parentElement","addEventListener","unlink","removeEventListener","event","_syncFieldValue","_syncFieldMetaValue","_syncElementValue","_syncElementMetaValue","warn","container","style","display","requestAnimationFrame","dataset","visible","once","FormFields","list","fields","iterator","values","FormChangesManager","FormChangesForRadioManager","manage","form","FormChangesForTriggerEffectsManager","Form","_ref3","fieldLinkers","_changesManagers","_handleChanges","setup","preventDefault","submit","then","registerChangesManager","registerElements","changesManager","getFormData","formData","updateFormData","elements","fieldElementLinker","getElement","namedItem","addDisableWhenEffect","disableWhen","async","addVisibleWhenEffect","visibleWhen","addComputedFieldEffect","fieldType","compute","addFieldAutofillEffect","autofillWith","dirty","addSelectOptionsInitializerEffect","getDefaultOption","getOptions","defaultOption","selectedValue","Column","Table","columnDefinitions","render","tableElement","headersElement","columnDefinition","headerElement","title","append"],"sourceRoot":""}