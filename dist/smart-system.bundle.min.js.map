{"version":3,"file":"smart-system.bundle.min.js","mappings":"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","sources":["webpack://SmartSystem/webpack/bootstrap","webpack://SmartSystem/webpack/runtime/define property getters","webpack://SmartSystem/webpack/runtime/hasOwnProperty shorthand","webpack://SmartSystem/webpack/runtime/make namespace object","webpack://SmartSystem/./lib/core/dependency-graph.ts","webpack://SmartSystem/./lib/core/effect-manager.ts","webpack://SmartSystem/./lib/core/form.ts","webpack://SmartSystem/./lib/core/table.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export class DependencyGraph<Key = string> {\r\n    private _keys: Set<Key>;\r\n    private _dependentMap: Map<Key, Set<Key>>;\r\n    private _dependencyMap: Map<Key, Set<Key>>;\r\n    private _addedDependencies: [Key, Key][];\r\n    private _topologicalOrder: Key[];\r\n\r\n    constructor() {\r\n        this._keys = new Set<Key>();\r\n        this._dependentMap = new Map();\r\n        this._dependencyMap = new Map();\r\n        this._addedDependencies = [];\r\n        this._topologicalOrder = [];\r\n    }\r\n\r\n    getDependencies(): readonly [Key, Key][] {\r\n        return this._addedDependencies;\r\n    }\r\n\r\n    buildDependenciesMap(): void {\r\n        this._dependentMap = new Map();\r\n        this._dependencyMap = new Map();\r\n        this._keys = new Set();\r\n        this._topologicalOrder = [];\r\n\r\n        const dependencies = this.getDependencies();\r\n\r\n        for (const [dependent, dependency] of dependencies) {\r\n            this._keys.add(dependent);\r\n            this._keys.add(dependency);\r\n            if (!this._dependentMap.has(dependent)) {\r\n                this._dependentMap.set(dependent, new Set());\r\n            }\r\n            if (!this._dependentMap.has(dependency)) {\r\n                this._dependentMap.set(dependency, new Set());\r\n            }\r\n            if (!this._dependencyMap.has(dependent)) {\r\n                this._dependencyMap.set(dependent, new Set());\r\n            }\r\n            if (!this._dependencyMap.has(dependency)) {\r\n                this._dependencyMap.set(dependency, new Set());\r\n            }\r\n            this._dependentMap.get(dependent)!.add(dependency);\r\n            this._dependencyMap.get(dependency)!.add(dependent);\r\n        }\r\n        const inDegree = new Map();\r\n        for (const [dependent, dependencies] of this._dependentMap) {\r\n            inDegree.set(dependent, dependencies.size);\r\n        }\r\n        const queue: Key[] = [];\r\n        for (const [dependent, degree] of inDegree) {\r\n            if (degree === 0) {\r\n                queue.push(dependent);\r\n            }\r\n        }\r\n        while (queue.length > 0) {\r\n            const key = queue.shift()!;\r\n            this._topologicalOrder.push(key);\r\n            for (const dependency of this._dependencyMap.get(key)!) {\r\n                inDegree.set(dependency, inDegree.get(dependency) - 1);\r\n                if (inDegree.get(dependency) === 0) {\r\n                    queue.push(dependency);\r\n                }\r\n            }\r\n        }\r\n        if (this._topologicalOrder.length !== this._keys.size) {\r\n            throw new Error(\"There are cyclic dependencies\");\r\n        }\r\n    }\r\n\r\n    addDependency(dependent: Key, dependency: Key): void {\r\n        this._addedDependencies.push([dependent, dependency]);\r\n    }\r\n\r\n    get keys(): ReadonlySet<Key> {\r\n        return this._keys;\r\n    }\r\n\r\n    get topologicalOrder(): readonly Key[] {\r\n        return this._topologicalOrder;\r\n    }\r\n\r\n    get dependentMap(): ReadonlyMap<Key, ReadonlySet<Key>> {\r\n        return this._dependentMap;\r\n    }\r\n\r\n    get dependencyMap(): ReadonlyMap<Key, ReadonlySet<Key>> {\r\n        return this._dependencyMap;\r\n    }\r\n}","import { DependencyGraph } from \"./dependency-graph\";\r\n\r\nexport interface Effect {\r\n    type: string;\r\n    callback: () => Promise<Set<string>> | Set<string>;\r\n    dependsOn: string[];\r\n}\r\n\r\nexport class EffectManager extends DependencyGraph {\r\n    private _keyEffect: Map<string, Effect> = new Map();\r\n\r\n    constructor() {\r\n        super();\r\n        this._keyEffect = new Map();\r\n    }\r\n\r\n    override getDependencies(): readonly [string, string][] {\r\n        const dependencies: [string, string][] = [];\r\n        for (const [key, effect] of this._keyEffect) {\r\n            for (const dependency of effect.dependsOn) {\r\n                dependencies.push([key, dependency])\r\n            }\r\n        }\r\n        return super.getDependencies().concat(dependencies);\r\n    }\r\n\r\n    addEffect(key: string, effect: Effect) {\r\n        this._keyEffect.set(key, effect)\r\n    }\r\n\r\n    async triggerEffects({ changedNames = null }: { changedNames?: Set<string> | null } = {}) {\r\n        for (const name of this.topologicalOrder) {\r\n            if (changedNames != null && this.dependentMap.get(name)!.intersection(changedNames).size === 0) {\r\n                continue;\r\n            }\r\n            const effect = this._keyEffect.get(name);\r\n            if (effect != null) {\r\n                const changedNamesByEffect = await effect.callback();\r\n                if (changedNames) {\r\n                    changedNamesByEffect.forEach(changedName => { changedNames.add(changedName); });\r\n                }\r\n            } else {\r\n                if (changedNames) {\r\n                    changedNames.add(name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { EffectManager } from \"./effect-manager\";\r\nexport { EffectManager };\r\n\r\nfunction deepEqual(a: any, b: any): boolean {\r\n    if (a === b) return true;\r\n\r\n    if (typeof a !== \"object\" || typeof b !== \"object\" || a === null || b === null) {\r\n        return false;\r\n    }\r\n\r\n    const aKeys = new Set(Object.keys(a));\r\n    const bKeys = new Set(Object.keys(b));\r\n\r\n    if (aKeys.size !== bKeys.size) return false;\r\n    for (const key of aKeys) {\r\n        if (!deepEqual(a[key], b[key])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getMetaDependencyKey(fieldName: string, metaKey: string) {\r\n    return `${fieldName}:${metaKey}`;\r\n}\r\n\r\nexport type FormElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\nexport enum FormTypeElementStatus {\r\n    VALUE_SUCCESSFULLY_RECEIVED = \"value-successfully-received\",\r\n    VALUE_SET_SUCCESS = \"value-set-success\",\r\n    META_VALUE_SUCCESSFULLY_RECEIVED = \"meta-value-successfully-received\",\r\n    META_VALUE_SET_SUCCESS = \"meta-value-set-success\",\r\n    FAILED_TO_SET_VALUE = \"failed-to-set-value\",\r\n    FAILED_TO_SET_META_VALUE = \"failed-to-set-meta-value\",\r\n    INVALID_ELEMENT = \"invalid-element\",\r\n    TYPE_MISMATCH = \"type-mismatch\",\r\n    META_KEY_NOT_EXISTS = \"meta-key-not-exists\"\r\n}\r\n\r\ninterface FormPrimitiveType { }\r\ninterface FormElementType { }\r\n\r\nexport class FormType {\r\n    static object() {\r\n        return new FormTypeObject();\r\n    }\r\n\r\n    static boolean() {\r\n        return new FormTypeBoolean();\r\n    }\r\n\r\n    static text() {\r\n        return new FormTypeText();\r\n    }\r\n\r\n    static number() {\r\n        return new FormTypeNumber();\r\n    }\r\n\r\n    static date() {\r\n        return new FormTypeDate();\r\n    }\r\n\r\n    static select({ multiple = false } = {}) {\r\n        return new FormTypeSelect().multiple(multiple);\r\n    }\r\n\r\n    static checkbox() {\r\n        return new FormTypeCheckbox();\r\n    }\r\n\r\n    static radio() {\r\n        return new FormTypeRadio();\r\n    }\r\n\r\n    static isFormElement(element: Element): element is FormElement {\r\n        return element instanceof HTMLInputElement || element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement;\r\n    }\r\n\r\n    static fromFormElement(element: FormElement): FormType {\r\n        switch (element.type) {\r\n            case \"select-one\":\r\n                return this.select();\r\n            case \"select-multiple\":\r\n                return this.select().multiple();\r\n            case \"number\":\r\n                return this.number();\r\n            case \"text\":\r\n                return this.text();\r\n            case \"textarea\":\r\n                return this.text().area();\r\n            case \"checkbox\":\r\n                return this.checkbox();\r\n            case \"radio\":\r\n                return this.radio();\r\n            case \"date\":\r\n                return this.date();\r\n            default:\r\n                throw new Error(`As element type ${element} not has`);\r\n        }\r\n    }\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    isEqual(a: any, b: any): boolean { return a === b; }\r\n    isEmpty() { }\r\n    asElementType() { return \"hidden\"; }\r\n\r\n    fetch() {\r\n    }\r\n\r\n    getFieldValue(field: FormField): any {\r\n        return field.getValue();\r\n    }\r\n\r\n    getFieldMetaValue(field: FormField, metaKey: string): any {\r\n        return field.getMetaValue(metaKey);\r\n    }\r\n\r\n    setFieldValue(field: FormField, newValue: any): Set<string> {\r\n        return field.setValue(newValue);\r\n    }\r\n\r\n    setFieldMetaValue(field: FormField, metaKey: string, newValue: any): Set<string> {\r\n        return field.setMetaValue(metaKey, newValue);\r\n    }\r\n\r\n    getElementValue(element: Element): [any, FormTypeElementStatus] {\r\n        if (!FormType.isFormElement(element)) {\r\n            return [null, FormTypeElementStatus.INVALID_ELEMENT];\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return [null, FormTypeElementStatus.TYPE_MISMATCH];\r\n        }\r\n        return [element.value, FormTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED];\r\n    }\r\n\r\n    setElementValue(element: Element, newValue: any): FormTypeElementStatus {\r\n        if (!FormType.isFormElement(element)) {\r\n            return FormTypeElementStatus.INVALID_ELEMENT;\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return FormTypeElementStatus.TYPE_MISMATCH;\r\n        }\r\n        element.value = newValue;\r\n        return FormTypeElementStatus.VALUE_SET_SUCCESS;\r\n    }\r\n\r\n    getElementMetaValue(element: Element, metaKey: string): [any, FormTypeElementStatus] {\r\n        if (!FormType.isFormElement(element)) {\r\n            return [undefined, FormTypeElementStatus.INVALID_ELEMENT];\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return [undefined, FormTypeElementStatus.TYPE_MISMATCH];\r\n        }\r\n        if (metaKey === \"disabled\") {\r\n            return [element.disabled, FormTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [undefined, FormTypeElementStatus.META_KEY_NOT_EXISTS]\r\n    }\r\n\r\n    setElementMetaValue(element: Element, metaKey: string, newValue: any): FormTypeElementStatus {\r\n        if (!FormType.isFormElement(element)) {\r\n            return FormTypeElementStatus.INVALID_ELEMENT;\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return FormTypeElementStatus.TYPE_MISMATCH;\r\n        }\r\n        if (metaKey === \"disabled\") {\r\n            element.disabled = Boolean(newValue);\r\n        } else if (metaKey === \"autofill\") {\r\n            element.classList.toggle(\"autofill\", Boolean(newValue));\r\n        } else {\r\n            return FormTypeElementStatus.META_KEY_NOT_EXISTS;\r\n        }\r\n        return FormTypeElementStatus.META_VALUE_SET_SUCCESS;\r\n    }\r\n\r\n    getInitialValue(): any {\r\n        return null;\r\n    }\r\n\r\n    getInitialMeta(): Map<string, InitialMetaItem> {\r\n        const meta = new Map();\r\n        meta.set(\"disabled\", { value: false, resettable: false });\r\n        meta.set(\"dirty\", { value: false, resettable: true });\r\n        return meta;\r\n    }\r\n\r\n    isSameType(otherType: FormType): boolean {\r\n        return this.name === otherType.name;\r\n    }\r\n}\r\n\r\nexport class FormTypeText extends FormType implements FormPrimitiveType, FormElementType {\r\n    private _area: boolean;\r\n\r\n    constructor() {\r\n        super(\"String\");\r\n        this._area = false;\r\n    }\r\n\r\n    area(value = true): this {\r\n        this._area = value;\r\n        return this;\r\n    }\r\n\r\n    asElementType(): string {\r\n        return this._area ? \"textarea\" : \"text\";\r\n    }\r\n}\r\n\r\nexport class FormTypeNumber extends FormType implements FormPrimitiveType, FormElementType {\r\n    constructor() {\r\n        super(\"Number\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"number\";\r\n    }\r\n}\r\n\r\nexport class FormTypeDate extends FormType implements FormPrimitiveType, FormElementType {\r\n    constructor() {\r\n        super(\"Date\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"date\";\r\n    }\r\n\r\n    isEqual(a: any, b: any): boolean {\r\n        return a.toDateString() === b.toDateString();\r\n    }\r\n}\r\n\r\nexport class FormTypeBoolean extends FormType implements FormPrimitiveType, FormElementType {\r\n    constructor() {\r\n        super(\"Boolean\");\r\n    }\r\n}\r\n\r\nexport class FormTypeRadio extends FormType implements FormElementType {\r\n    constructor() {\r\n        super(\"Radio\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"radio\";\r\n    }\r\n\r\n    getInitialMeta(): Map<string, InitialMetaItem> {\r\n        const meta = super.getInitialMeta();\r\n        meta.set(\"checked\", { value: false, resettable: true });\r\n        return meta;\r\n    }\r\n\r\n    override getFieldValue(field: FormField): any {\r\n        return field.getMetaValue(\"checked\") ? field.getValue() : null;\r\n    }\r\n\r\n    override setFieldValue(field: FormField, newValue: any): any {\r\n        return field.setMetaValue(\"checked\", newValue != null && field.getValue() === newValue);\r\n    }\r\n\r\n    override getElementMetaValue(element: HTMLInputElement, metaKey: string): [any, FormTypeElementStatus] {\r\n        const [value, status] = super.getElementMetaValue(element, metaKey);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) {\r\n            return [value, status];\r\n        }\r\n        if (metaKey === \"checked\") {\r\n            return [element.checked, FormTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [undefined, FormTypeElementStatus.META_KEY_NOT_EXISTS];\r\n    }\r\n\r\n    override setElementMetaValue(element: HTMLInputElement, metaKey: string, newValue: any): FormTypeElementStatus {\r\n        const status = super.setElementMetaValue(element, metaKey, newValue);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) return status;\r\n        if (metaKey === \"checked\") {\r\n            element.checked = Boolean(newValue);\r\n            return FormTypeElementStatus.META_VALUE_SET_SUCCESS;\r\n        }\r\n        return FormTypeElementStatus.META_KEY_NOT_EXISTS;\r\n    }\r\n}\r\n\r\nexport class FormTypeCheckbox extends FormType implements FormElementType {\r\n    constructor() {\r\n        super(\"Checkbox\");\r\n    }\r\n\r\n    asElementType(): string {\r\n        return \"checkbox\";\r\n    }\r\n\r\n    getInitialMeta(): Map<string, InitialMetaItem> {\r\n        const meta = super.getInitialMeta();\r\n        meta.set(\"checked\", { value: false, resettable: true });\r\n        return meta;\r\n    }\r\n\r\n    override getFieldValue(field: FormField): any {\r\n        const value = field.getValue();\r\n        if ([\"\", \"on\"].includes(value)) return field.getMetaValue(\"checked\");\r\n        return field.getMetaValue(\"checked\") ? value : null;\r\n    }\r\n\r\n    override setFieldValue(field: FormField, newValue: any): any {\r\n        if ([\"\", \"on\"].includes(field.getValue())) return field.setMetaValue(\"checked\", newValue);\r\n        return field.setMetaValue(\"checked\", newValue != null && field.getValue() === newValue);\r\n    }\r\n\r\n    override getElementMetaValue(element: HTMLInputElement, metaKey: string): [any, FormTypeElementStatus] {\r\n        const [value, status] = super.getElementMetaValue(element, metaKey);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) {\r\n            return [value, status];\r\n        }\r\n        if (metaKey === \"checked\") {\r\n            return [element.checked, FormTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [undefined, FormTypeElementStatus.META_KEY_NOT_EXISTS];\r\n    }\r\n\r\n    override setElementMetaValue(element: HTMLInputElement, metaKey: string, newValue: any): FormTypeElementStatus {\r\n        const status = super.setElementMetaValue(element, metaKey, newValue);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) return status;\r\n        if (metaKey === \"checked\") {\r\n            element.checked = Boolean(newValue);\r\n            return FormTypeElementStatus.META_VALUE_SET_SUCCESS;\r\n        }\r\n        return FormTypeElementStatus.META_KEY_NOT_EXISTS;\r\n    }\r\n}\r\n\r\nexport class FormTypeSelect extends FormType implements FormElementType {\r\n    private _multiple: boolean;\r\n    private _of: FormType;\r\n\r\n    constructor() {\r\n        super(\"select\");\r\n        this._multiple = false;\r\n        /**\r\n         * @type {FormType}\r\n         */\r\n        this._of = FormType.text();\r\n    }\r\n\r\n    asElementType(): string {\r\n        return this._multiple ? \"select-multiple\" : \"select-one\";\r\n    }\r\n\r\n    getInitialMeta(): Map<string, InitialMetaItem> {\r\n        const meta = super.getInitialMeta();\r\n        meta.set(\"options\", { value: [], resettable: false });\r\n        return meta;\r\n    }\r\n\r\n    multiple(value: boolean = true): this {\r\n        this._multiple = value;\r\n        return this;\r\n    }\r\n\r\n    of(type: FormType): this {\r\n        this._of = type;\r\n        return this;\r\n    }\r\n\r\n    override getFieldValue(field: FormField): any {\r\n        const value = field.getValue();\r\n        const options = field.getMetaValue(\"options\") as SelectOption[];\r\n        const optionValues = options.map(option => option.value);\r\n\r\n        if (this._multiple) {\r\n            return value.filter((value: any) => optionValues.includes(value));\r\n        } else {\r\n            return optionValues.includes(value) ? value : options.find((option) => option.selected)?.value ?? options.find(option => !option.disabled)?.value ?? null;\r\n        }\r\n    }\r\n\r\n    override setFieldValue(field: FormField, newValue: any): Set<string> {\r\n        const options = field.getMetaValue(\"options\") as SelectOption[];\r\n        const optionValues = options.map((option: SelectOption) => option.value)\r\n        const validValue = this._multiple\r\n            ? Array.isArray(newValue)\r\n                ? newValue.filter((value: any) => optionValues.includes(value))\r\n                : []\r\n            : optionValues.includes(newValue)\r\n                ? newValue\r\n                : options.find((option) => option.selected)?.value ?? options.find(option => !option.disabled)?.value ?? null;\r\n        return field.setValue(validValue, { raw: true });\r\n    }\r\n\r\n    override getElementValue(element: HTMLSelectElement): [any, FormTypeElementStatus] {\r\n        if (!FormType.isFormElement(element)) {\r\n            return [undefined, FormTypeElementStatus.INVALID_ELEMENT];\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return [undefined, FormTypeElementStatus.TYPE_MISMATCH];\r\n        }\r\n        if (this._multiple) {\r\n            return [Array.from(element.selectedOptions, option => option.value), FormTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [element.value, FormTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED];\r\n    }\r\n\r\n    override getElementMetaValue(element: HTMLSelectElement, metaKey: string): [any, FormTypeElementStatus] {\r\n        const [value, status] = super.getElementMetaValue(element, metaKey);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) {\r\n            return [value, status];\r\n        }\r\n        if (metaKey === \"options\") {\r\n            return [Array.from(element.options, option => ({ value: option.value || option.textContent, disabled: option.disabled, selected: option.selected, textContent: option.textContent })), FormTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED];\r\n        }\r\n        return [undefined, FormTypeElementStatus.META_KEY_NOT_EXISTS];\r\n    }\r\n\r\n    override setElementValue(element: HTMLSelectElement, newValue: any): FormTypeElementStatus {\r\n        if (!FormType.isFormElement(element)) {\r\n            return FormTypeElementStatus.INVALID_ELEMENT;\r\n        }\r\n        if (element.type !== this.asElementType()) {\r\n            return FormTypeElementStatus.TYPE_MISMATCH;\r\n        }\r\n        Array.from(element.selectedOptions).forEach(option => {\r\n            option.selected = false;\r\n        });\r\n        (this._multiple ? newValue as any[] : [newValue]).map((value: any): HTMLOptionElement | null => {\r\n            return element.querySelector(`option[value=\"${value}\"]`);\r\n        }).filter(option => option != null).forEach(option => {\r\n            option.selected = true;\r\n        });\r\n        return FormTypeElementStatus.VALUE_SET_SUCCESS;\r\n    }\r\n\r\n    override setElementMetaValue(element: HTMLSelectElement, metaKey: string, newValue: any): FormTypeElementStatus {\r\n        const status = super.setElementMetaValue(element, metaKey, newValue);\r\n        if (status !== FormTypeElementStatus.META_KEY_NOT_EXISTS) return status;\r\n        if (metaKey === \"options\") {\r\n            element.innerHTML = \"\";\r\n            for (const option of newValue) {\r\n                const optionElement = document.createElement(\"option\");\r\n                optionElement.value = option.value;\r\n                optionElement.disabled = option.disabled;\r\n                optionElement.selected = option.selected;\r\n                optionElement.textContent = option.textContent;\r\n                element.options.add(optionElement);\r\n            }\r\n            return FormTypeElementStatus.META_VALUE_SET_SUCCESS;\r\n        }\r\n        return FormTypeElementStatus.META_KEY_NOT_EXISTS;\r\n    }\r\n}\r\n\r\nexport class FormTypeObject extends FormType implements FormPrimitiveType {\r\n    constructor() {\r\n        super(\"Object\");\r\n    }\r\n\r\n    isEqual(a: any, b: any): boolean {\r\n        return deepEqual(a, b);\r\n    }\r\n}\r\n\r\nexport enum FormFieldChangeType {\r\n    Value,\r\n    MetaValue\r\n}\r\n\r\nexport interface FormFieldValueChange {\r\n    stateKey: string;\r\n    type: FormFieldChangeType.Value;\r\n    field: FormField;\r\n    oldValue: any;\r\n    newValue: any;\r\n    initiator: any;\r\n    processed: boolean;\r\n    last: boolean;\r\n    date: Date;\r\n}\r\n\r\nexport interface FormFieldMetaValueChange {\r\n    stateKey: string;\r\n    type: FormFieldChangeType.MetaValue;\r\n    field: FormField;\r\n    metaKey: string;\r\n    oldValue: any;\r\n    newValue: any;\r\n    initiator: any;\r\n    processed: boolean;\r\n    last: boolean;\r\n    date: Date;\r\n}\r\n\r\nexport type FormFieldChange = FormFieldValueChange | FormFieldMetaValueChange;\r\n\r\nexport class FormFieldChangesEvent extends Event {\r\n    constructor(public changes: FormFieldChange[]) {\r\n        super(\"changes\", { cancelable: true });\r\n    }\r\n}\r\n\r\ninterface FormFieldChangeFilter {\r\n    type?: FormFieldChangeType | null;\r\n    onlyCurrentState?: boolean;\r\n    last?: boolean | null;\r\n    processed?: boolean | null;\r\n}\r\n\r\ninterface FormFieldAnyChangeFilter extends FormFieldChangeFilter {\r\n    type?: FormFieldChangeType | null;\r\n    metaKey?: never;\r\n}\r\n\r\ninterface FormFieldValueChangeFilter extends FormFieldChangeFilter {\r\n    type: FormFieldChangeType.Value;\r\n    metaKey?: never;\r\n}\r\n\r\ninterface FormFieldMetaValueChangeFilter extends FormFieldChangeFilter {\r\n    type: FormFieldChangeType.MetaValue;\r\n    metaKey?: string | null;\r\n}\r\n\r\nexport class FormFieldChangeSet {\r\n    private _changes: FormFieldChange[];\r\n    private _maxSize: number;\r\n\r\n    constructor(maxSize = 128) {\r\n        this._changes = [];\r\n        this._maxSize = maxSize;\r\n    }\r\n\r\n    trimProcessedChanges() {\r\n        while (this._changes.length > this._maxSize) {\r\n            const index = this._changes.findIndex(c => c.processed);\r\n            if (index === -1) break;\r\n            this._changes.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    add(change: FormFieldChange): void {\r\n        let lastChange: FormFieldChange | undefined | null = null;\r\n        if (change.type === FormFieldChangeType.Value) {\r\n            lastChange = this.getFieldChange(change.field, { type: FormFieldChangeType.Value });\r\n        } else if (change.type === FormFieldChangeType.MetaValue) {\r\n            lastChange = this.getFieldChange(change.field, { type: FormFieldChangeType.MetaValue, metaKey: change.metaKey });\r\n        }\r\n        if (lastChange != null) {\r\n            lastChange.last = false;\r\n        }\r\n        this._changes.push(change);\r\n        this.trimProcessedChanges();\r\n    }\r\n\r\n    remove(change: FormFieldChange): void {\r\n        this._changes.splice(this._changes.indexOf(change), 1);\r\n    }\r\n\r\n    getFieldChange(field: FormField, filter: FormFieldValueChangeFilter): FormFieldValueChange | undefined;\r\n    getFieldChange(field: FormField, filter: FormFieldMetaValueChangeFilter): FormFieldMetaValueChange | undefined;\r\n    getFieldChange(field: FormField, filter: FormFieldAnyChangeFilter): FormFieldChange | undefined;\r\n    getFieldChange(field: FormField, { onlyCurrentState = true, last = true, processed = false, type = null, metaKey = null }: FormFieldAnyChangeFilter | FormFieldValueChangeFilter | FormFieldMetaValueChangeFilter = {}): FormFieldChange | undefined {\r\n        let changes = this.getFieldChanges(field, { onlyCurrentState, last, processed, type });\r\n        if (type === FormFieldChangeType.MetaValue && metaKey != null) {\r\n            changes = (changes as FormFieldMetaValueChange[]).filter(change => change.metaKey === metaKey);\r\n        }\r\n        return changes.at(-1);\r\n    }\r\n\r\n    getFieldChanges(field: FormField, filter?: FormFieldValueChangeFilter): FormFieldValueChange[];\r\n    getFieldChanges(field: FormField, filter?: FormFieldMetaValueChangeFilter): FormFieldMetaValueChange[];\r\n    getFieldChanges(field: FormField, filter?: FormFieldAnyChangeFilter): FormFieldChange[];\r\n    getFieldChanges(field: FormField, { onlyCurrentState = true, last = true, processed = false, type = null }: FormFieldAnyChangeFilter | FormFieldValueChangeFilter | FormFieldMetaValueChangeFilter = {}): FormFieldChange[] {\r\n        let changes = this._changes.filter(change => change.field === field);\r\n        if (type != null) { changes = changes.filter(change => change.type === type); }\r\n        if (last != null) { changes = changes.filter(change => change.last === last); }\r\n        if (processed != null) { changes = changes.filter(change => change.processed === processed); }\r\n        if (onlyCurrentState) { changes = changes.filter(change => change.stateKey === field.currentStateKey); }\r\n        return changes\r\n    }\r\n\r\n    hasChanges(field: FormField): boolean {\r\n        return this.getFieldChanges(field, { onlyCurrentState: true, last: true }).length !== 0;\r\n    }\r\n\r\n    markProcessed(changes: FormFieldChange[]): void {\r\n        changes.forEach(change => { change.processed = true; });\r\n        this.trimProcessedChanges();\r\n    }\r\n\r\n    static asChangedName(change: FormFieldChange): string | null {\r\n        if (change.type === FormFieldChangeType.Value) {\r\n            return change.field.name;\r\n        }\r\n        if (change.type === FormFieldChangeType.MetaValue) {\r\n            return getMetaDependencyKey(change.field.name, change.metaKey);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static asChangedNames(changes: FormFieldChange[]): Set<string> {\r\n        const changedNames = new Set<string>();\r\n        for (const change of changes) {\r\n            const changedName = this.asChangedName(change);\r\n            if (changedName == null) continue;\r\n            changedNames.add(changedName);\r\n        }\r\n        return changedNames;\r\n    }\r\n\r\n    processChanges(field: FormField, type: FormFieldChangeType | null = null, dryRun: boolean = false): Set<string> {\r\n        const lastChanges = this.getFieldChanges(field, { onlyCurrentState: true, type });\r\n        if (!dryRun) {\r\n            this.markProcessed(this.getFieldChanges(field, { onlyCurrentState: true, last: null, type }));\r\n            field.dispatchEvent(new FormFieldChangesEvent(lastChanges));\r\n        }\r\n        return FormFieldChangeSet.asChangedNames(lastChanges);\r\n    }\r\n}\r\n\r\nexport interface FormFieldContext {\r\n    stateKey?: string | null;\r\n    initiator?: any | null;\r\n    processChanges?: boolean;\r\n    disabledIsNull?: boolean;\r\n    raw?: boolean;\r\n}\r\n\r\nexport interface InitialMetaItem {\r\n    value: any;\r\n    resettable: boolean;\r\n}\r\n\r\nexport class FormField extends EventTarget {\r\n    private _name: string;\r\n    private _type: FormType;\r\n    private _changeSet: FormFieldChangeSet;\r\n    private _initializedStateKeys: Set<string>;\r\n    private _initialValue: any;\r\n    private _valueMap: Map<string, any>;\r\n    private _initialMeta: Map<string, InitialMetaItem>;\r\n    private _metaMap: Map<string, Map<string, any>>;\r\n    private _currentStateKey: string;\r\n\r\n    constructor(name: string, type: FormType, { changeSet = null, effectManager = null }: { changeSet?: FormFieldChangeSet | null, effectManager?: EffectManager | null } = {}) {\r\n        super();\r\n        this._name = name;\r\n        this._type = type;\r\n        this._initializedStateKeys = new Set();\r\n\r\n        this._initialValue = this.type.getInitialValue();\r\n        this._valueMap = new Map();\r\n\r\n        this._initialMeta = this.type.getInitialMeta();\r\n        this._metaMap = new Map();\r\n\r\n        this._changeSet = changeSet ?? new FormFieldChangeSet(32);\r\n        this._currentStateKey = \"default\";\r\n        this.initializeState({ stateKey: \"default\" });\r\n        if (effectManager != null) {\r\n            this.initializeDependencies(effectManager);\r\n        }\r\n    }\r\n\r\n    get self(): this {\r\n        return this;\r\n    }\r\n\r\n    get currentStateKey() {\r\n        return this._currentStateKey;\r\n    }\r\n\r\n    get context(): FormFieldContext {\r\n        return {\r\n            disabledIsNull: true,\r\n            initiator: null,\r\n            stateKey: null,\r\n            raw: false,\r\n            processChanges: false\r\n        };\r\n    }\r\n\r\n    get changeSet(): FormFieldChangeSet {\r\n        return this._changeSet;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get type(): FormType {\r\n        return this._type;\r\n    }\r\n\r\n    clearInitialMeta(): void {\r\n        this._initialMeta = new Map();\r\n    }\r\n\r\n    reset({ stateKey = null, initiator = null, processChanges = false, full = false }: FormFieldContext & { full?: boolean } = {}): Set<string> {\r\n        stateKey ??= this._currentStateKey;\r\n        console.log(\"[FormField.reset] Reset state `%s` for field `%s`\", stateKey, this.name);\r\n        this.setValue(this._initialValue, { raw: true, stateKey, initiator });\r\n        if (full) {\r\n            this._metaMap.set(stateKey, new Map());\r\n        }\r\n        for (const [metaKey, item] of this._initialMeta.entries()) {\r\n            if (!full && !item.resettable) continue;\r\n            this.setMetaValue(metaKey, item.value, { raw: true, stateKey, initiator });\r\n        }\r\n        return this.processChanges(null, !processChanges);\r\n    }\r\n\r\n    initializeState({ stateKey, initiator = null }: FormFieldContext & { stateKey: string }): void {\r\n        if (!this._initializedStateKeys.has(stateKey)) {\r\n            console.log(\"[FormField.initializeState] Initializing state key `%s` for field `%s`\", stateKey, this.name);\r\n            this._initializedStateKeys.add(stateKey);\r\n            this.reset({ stateKey, initiator, processChanges: true, full: true });\r\n        }\r\n    }\r\n\r\n    switchState({ stateKey, initiator = null, processChanges = false }: FormFieldContext & { stateKey: string }): Set<string> {\r\n        console.log(\"[FormField.switchState] Switching state for field `%s` from `%s` to `%s`\", this.name, this._currentStateKey, stateKey);\r\n        this.initializeState({ stateKey, initiator });\r\n        const oldValue = this._valueMap.get(this._currentStateKey);\r\n        const newValue = this._valueMap.get(stateKey);\r\n        if (!this.type.isEqual(oldValue, newValue)) {\r\n            const change: FormFieldChange = {\r\n                stateKey,\r\n                type: FormFieldChangeType.Value,\r\n                field: this,\r\n                initiator,\r\n                oldValue,\r\n                newValue,\r\n                date: new Date(),\r\n                last: true,\r\n                processed: false\r\n            };\r\n            this.changeSet.add(change);\r\n        }\r\n\r\n        for (const [metaKey, newValue] of this._metaMap.get(stateKey)!.entries()) {\r\n            const oldValue = this._metaMap.get(this._currentStateKey)!.get(metaKey);\r\n            if (oldValue !== newValue) {\r\n                const change: FormFieldChange = {\r\n                    stateKey,\r\n                    type: FormFieldChangeType.MetaValue,\r\n                    field: this,\r\n                    initiator,\r\n                    metaKey,\r\n                    oldValue,\r\n                    newValue,\r\n                    date: new Date(),\r\n                    last: true,\r\n                    processed: false\r\n                };\r\n                this.changeSet.add(change);\r\n            }\r\n        }\r\n        this._currentStateKey = stateKey;\r\n        return this.processChanges(null, !processChanges);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {EffectManager} effectManager \r\n     */\r\n    initializeDependencies(effectManager: EffectManager) {\r\n        effectManager.addDependency(this.name, getMetaDependencyKey(this.name, \"disabled\"));\r\n        switch (this.type.asElementType()) {\r\n            case \"checkbox\":\r\n            case \"radio\":\r\n                effectManager.addDependency(this.name, getMetaDependencyKey(this.name, \"checked\"));\r\n                break;\r\n        }\r\n    }\r\n\r\n    getAdapter(outerContext: FormFieldContext) {\r\n        return new Proxy(this, {\r\n            get(target, propertyKey, receiver) {\r\n                switch (propertyKey) {\r\n                    case \"self\":\r\n                        return target;\r\n                    case \"context\":\r\n                        return outerContext;\r\n                    case \"getAdapter\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getAdapter({ ...outerContext, ...innerContext });\r\n                    case \"getValue\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getValue({ ...outerContext, ...innerContext });\r\n                    case \"getMetaValue\":\r\n                        return (metaKey: string, innerContext: FormFieldContext = {}) => target.getMetaValue(metaKey, { ...outerContext, ...innerContext });\r\n                    case \"setValue\":\r\n                        return (newValue: any, innerContext: FormFieldContext = {}) => target.setValue(newValue, { ...outerContext, ...innerContext });\r\n                    case \"setMetaValue\":\r\n                        return (metaKey: string, newValue: any, innerContext: FormFieldContext = {}) => target.setMetaValue(metaKey, newValue, { ...outerContext, ...innerContext });\r\n                    default:\r\n                        const value = Reflect.get(target, propertyKey, receiver);\r\n                        return typeof value === \"function\" ? value.bind(target) : value;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getValue({ stateKey = null, raw = false, disabledIsNull = true }: FormFieldContext = {}): any {\r\n        if (!raw) {\r\n            if (disabledIsNull && this.getMetaValue(\"disabled\", { stateKey })) {\r\n                return null;\r\n            }\r\n            return this.type.getFieldValue(this.getAdapter({ stateKey, raw: true }));\r\n        }\r\n\r\n        stateKey ??= this._currentStateKey\r\n        this.initializeState({ stateKey });\r\n        return this._valueMap.get(stateKey);\r\n    }\r\n\r\n    setInitialValue(newValue: any): void {\r\n        this._initialValue = newValue;\r\n    }\r\n\r\n    setValue(newValue: any, { stateKey = null, raw = false, initiator = null, processChanges = false }: FormFieldContext = {}): Set<string> {\r\n        if (!raw) {\r\n            return this.type.setFieldValue(this.getAdapter({ stateKey, raw: true, processChanges, initiator }), newValue);\r\n        }\r\n        initiator ??= this;\r\n        stateKey ??= this._currentStateKey;\r\n        this.initializeState({ stateKey, initiator });\r\n        const oldValue = this.getValue({ stateKey, raw: true });\r\n        if (this.type.isEqual(oldValue, newValue)) return new Set();\r\n        this._valueMap.set(stateKey, newValue);\r\n        const change: FormFieldChange = {\r\n            stateKey,\r\n            type: FormFieldChangeType.Value,\r\n            field: this,\r\n            initiator,\r\n            oldValue,\r\n            newValue,\r\n            date: new Date(),\r\n            last: true,\r\n            processed: false\r\n        };\r\n        console.log(\"[FormField.setValue] Value changed:\", { oldValue, newValue, stateKey });\r\n        this.changeSet.add(change);\r\n        return this.processChanges(FormFieldChangeType.Value, !processChanges);\r\n    }\r\n\r\n    getMetaValue(metaKey: string, { stateKey = null, raw = false }: FormFieldContext = {}): any {\r\n        if (!raw) {\r\n            return this.type.getFieldMetaValue(this.getAdapter({ raw: true, stateKey }), metaKey);\r\n        }\r\n        stateKey ??= this._currentStateKey\r\n        this.initializeState({ stateKey });\r\n        const meta = this._metaMap.get(stateKey);\r\n        return meta!.get(metaKey);\r\n    }\r\n\r\n    setInitialMetaValue(metaKey: string, newValue: any, { resettable = true }: { resettable?: boolean } = {}): void {\r\n        this._initialMeta.set(metaKey, { value: newValue, resettable });\r\n    }\r\n\r\n    setMetaValue(metaKey: string, newValue: any, { stateKey = null, initiator = null, processChanges = false, raw = false }: FormFieldContext = {}): Set<string> {\r\n        if (!raw) {\r\n            return this.type.setFieldMetaValue(this.getAdapter({ stateKey, raw: true, initiator, processChanges }), metaKey, newValue);\r\n        }\r\n        initiator ??= this;\r\n        stateKey ??= this._currentStateKey;\r\n        this.initializeState({ stateKey, initiator });\r\n        const oldValue = this.getMetaValue(metaKey, { stateKey });\r\n        if (oldValue === newValue) return new Set();\r\n        this._metaMap.get(stateKey)!.set(metaKey, newValue);\r\n        const change: FormFieldChange = {\r\n            stateKey,\r\n            type: FormFieldChangeType.MetaValue,\r\n            field: this,\r\n            initiator,\r\n            metaKey,\r\n            oldValue,\r\n            newValue,\r\n            date: new Date(),\r\n            last: true,\r\n            processed: false\r\n        };\r\n        this.changeSet.add(change);\r\n        console.log(\"[FormField.setMetaValue] Meta\", getMetaDependencyKey(this.name, metaKey), \"value changed:\", { oldValue, newValue, stateKey });\r\n        return this.processChanges(FormFieldChangeType.MetaValue, !processChanges);\r\n    }\r\n\r\n    processChanges(type: FormFieldChangeType | null = null, dryRun: boolean = false): Set<string> {\r\n        return this.changeSet.processChanges(this, type, dryRun);\r\n    }\r\n}\r\n\r\nexport class ContextFormField {\r\n    constructor(public readonly field: FormField, public readonly context: FormFieldContext) { }\r\n}\r\n\r\nexport class FormFieldArray {\r\n    constructor(public fieldArray: FormField[]) { }\r\n\r\n    getAdapter(outerContext: FormFieldContext) {\r\n        return new Proxy(this, {\r\n            get(target, propertyKey, receiver) {\r\n                switch (propertyKey) {\r\n                    case \"self\":\r\n                        return target;\r\n                    case \"context\":\r\n                        return outerContext;\r\n                    case \"getAdapter\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getAdapter({ ...outerContext, ...innerContext });\r\n                    case \"getValue\":\r\n                        return (innerContext: FormFieldContext = {}) => target.getValue({ ...outerContext, ...innerContext });\r\n                    case \"getMetaValue\":\r\n                        return (metaKey: string, innerContext: FormFieldContext = {}) => target.getMetaValue(metaKey, { ...outerContext, ...innerContext });\r\n                    case \"setValue\":\r\n                        return (newValue: any, innerContext: FormFieldContext = {}) => target.setValue(newValue, { ...outerContext, ...innerContext });\r\n                    case \"setMetaValue\":\r\n                        return (metaKey: string, newValue: any, innerContext: FormFieldContext = {}) => target.setMetaValue(metaKey, newValue, { ...outerContext, ...innerContext });\r\n                    default:\r\n                        const value = Reflect.get(target, propertyKey, receiver);\r\n                        return typeof value === \"function\" ? value.bind(target) : value;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getValue({ stateKey = null, disabledIsNull = true, raw = false }: FormFieldContext = {}): any {\r\n        return this.fieldArray.map(field => field.getValue({ stateKey, disabledIsNull, raw })).find(value => value != null);\r\n    }\r\n\r\n    getMetaValue(metaKey: string, { stateKey = null, raw = false }: FormFieldContext = {}): any {\r\n        return this.fieldArray.map(field => field.getMetaValue(metaKey, { stateKey, raw })).find(value => value != null);\r\n    }\r\n\r\n    setValue(value: any, { stateKey = null, initiator = null, processChanges = false, raw = false }: FormFieldContext = {}): Set<string> {\r\n        return this.fieldArray.map(field => field.setValue(value, { stateKey, initiator, processChanges, raw })).find(changedNames => changedNames.size !== 0) ?? new Set();\r\n    }\r\n\r\n    setMetaValue(metaKey: string, value: any, { stateKey = null, initiator = null, processChanges = false, raw = false }: FormFieldContext = {}): Set<string> {\r\n        return this.fieldArray.map(field => field.setMetaValue(metaKey, value, { stateKey, initiator, processChanges, raw })).find(changedNames => changedNames.size !== 0) ?? new Set();\r\n    }\r\n\r\n    processChanges(type: FormFieldChangeType | null = null, dryRun: boolean = false): Set<string> {\r\n        return this.fieldArray.map(field => field.processChanges(type, dryRun)).find(changedNames => changedNames.size !== 0) ?? new Set();\r\n    }\r\n}\r\n\r\nexport abstract class FormFieldLinker {\r\n    public field: FormField;\r\n    public type: FormType;\r\n\r\n    constructor(field: FormField) {\r\n        this.field = field;\r\n        this.type = field.type;\r\n    }\r\n\r\n    abstract link(): void;\r\n    abstract unlink(): void;\r\n}\r\n\r\nexport class FormFieldElementLinker extends FormFieldLinker {\r\n    public element: FormElement;\r\n    private _handleHideContainer: ((event: Event) => void) | null;\r\n    /**\r\n     * \r\n     * @param {FormField} field \r\n     * @param {Element} element \r\n     */\r\n    constructor(field: FormField, element: FormElement) {\r\n        super(field);\r\n        this.element = element;\r\n        if (this.type.asElementType() !== this.element.type) {\r\n            throw new Error(\"For link type is equal\")\r\n        }\r\n        this._fieldChangesEventListener = this._fieldChangesEventListener.bind(this);\r\n        this._elementValueInputEventListener = this._elementValueInputEventListener.bind(this);\r\n        this._elementValueChangeEventListener = this._elementValueChangeEventListener.bind(this);\r\n        this._handleHideContainer = null;\r\n    }\r\n\r\n    override link(): void {\r\n        this.field.setInitialValue(this._getElementValue());\r\n        this.field.setInitialMetaValue(\"disabled\", this._getElementMetaValue(\"disabled\"), { resettable: false });\r\n        this.field.setInitialMetaValue(\"container\", this.element.parentElement, { resettable: false });\r\n        if ([\"radio\", \"checkbox\"].includes(this.type.asElementType())) {\r\n            this.field.setInitialMetaValue(\"checked\", this._getElementMetaValue(\"checked\"));\r\n        }\r\n        if ([\"select-one\", \"select-multiple\"].includes(this.type.asElementType())) {\r\n            this.field.setInitialMetaValue(\"options\", this._getElementMetaValue(\"options\"), { resettable: false })\r\n        }\r\n        this.field.reset({ processChanges: true, initiator: this, full: true });\r\n\r\n        this.field.addEventListener(\"changes\", this._fieldChangesEventListener);\r\n        if ([\"text\", \"number\", \"textarea\"].includes(this.type.asElementType())) {\r\n            this.element.addEventListener(\"input\", this._elementValueInputEventListener);\r\n        } else {\r\n            this.element.addEventListener(\"change\", this._elementValueChangeEventListener);\r\n        }\r\n    }\r\n\r\n    override unlink(): void {\r\n        this.field.removeEventListener(\"changes\", this._fieldChangesEventListener);\r\n        if ([\"text\", \"number\", \"textarea\"].includes(this.type.asElementType())) {\r\n            this.element.removeEventListener(\"input\", this._elementValueInputEventListener);\r\n        } else {\r\n            this.element.removeEventListener(\"change\", this._elementValueChangeEventListener);\r\n        }\r\n    }\r\n\r\n    _elementValueInputEventListener(event: Event): void {\r\n        console.log(\"[FormFieldElementLinker._elementValueInputEventListener] Event\")\r\n        this.field.setMetaValue(\"dirty\", true, { initiator: this, processChanges: true });\r\n        this._syncFieldValue();\r\n    }\r\n\r\n    _elementValueChangeEventListener(event: Event): void {\r\n        this.field.setMetaValue(\"dirty\", true, { initiator: this, processChanges: true });\r\n        if ([\"radio\", \"checkbox\"].includes(this.type.asElementType())) {\r\n            this._syncFieldMetaValue(\"checked\");\r\n        } else {\r\n            this._syncFieldValue();\r\n        }\r\n    }\r\n\r\n    _fieldChangesEventListener(event: Event) {\r\n        const changes = (event as FormFieldChangesEvent).changes.filter(change => change.initiator !== this);\r\n        for (const change of changes) {\r\n            if (change.type === FormFieldChangeType.Value) {\r\n                this._syncElementValue();\r\n            } else if (change.type === FormFieldChangeType.MetaValue) {\r\n                this._syncElementMetaValue(change.metaKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    _syncElementValue(): void {\r\n        console.log(\"[FormFieldElementLinker._syncElementValue] Syncing element value\");\r\n        const value = this.field.getValue({ raw: true });\r\n        const status = this.type.setElementValue(this.element, value);\r\n        if (status !== FormTypeElementStatus.VALUE_SET_SUCCESS) {\r\n            console.log(\"[FormFieldElementLinker._syncElementMetaValue] Failed to set element value, status `%s`\", status);\r\n            return;\r\n        }\r\n    }\r\n\r\n    _getElementValue(): any {\r\n        const [value, status] = this.type.getElementValue(this.element);\r\n        if (status !== FormTypeElementStatus.VALUE_SUCCESSFULLY_RECEIVED) {\r\n            console.warn(\"[FormFieldElementLinker._getElementValue] Failed to get value from element, status `%s`\", status);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    _syncFieldValue(): void {\r\n        console.log(\"[FormFieldElementLinker._syncFieldValue] Syncing field value\");\r\n        this.field.setValue(this._getElementValue(), { initiator: this, processChanges: true, raw: true });\r\n    }\r\n\r\n    _syncElementMetaValue(metaKey: string): void {\r\n        console.log(\"[FormFieldElementLinker._syncElementMetaValue] Syncing element meta value\");\r\n        const value = this.field.getMetaValue(metaKey, { raw: true });\r\n        const status = this.type.setElementMetaValue(this.element, metaKey, value);\r\n        if (status === FormTypeElementStatus.META_VALUE_SET_SUCCESS) {\r\n            return;\r\n        }\r\n        if (status === FormTypeElementStatus.META_KEY_NOT_EXISTS) {\r\n            switch (metaKey) {\r\n                case \"visible\":\r\n                    const container = this.field.getMetaValue(\"container\") as HTMLElement;\r\n                    if (this._handleHideContainer != null) {\r\n                        container.removeEventListener(\"transitionend\", this._handleHideContainer);\r\n                        this._handleHideContainer = null;\r\n                    }\r\n                    if (value) {\r\n                        if (container.style.display === \"none\") {\r\n                            container.style.display = \"\";\r\n                            requestAnimationFrame(() => {\r\n                                container.dataset.visible = \"true\";\r\n                            });\r\n                        } else {\r\n                            container.dataset.visible = \"true\";\r\n                        }\r\n                    } else {\r\n                        if (container.style.display !== \"none\") {\r\n                            this._handleHideContainer = (event: Event) => {\r\n                                container.style.display = \"none\";\r\n                            };\r\n                            container.addEventListener(\"transitionend\", this._handleHideContainer, { once: true });\r\n                        }\r\n                        container.dataset.visible = \"false\";\r\n                    }\r\n                    break;\r\n\r\n                case \"options\":\r\n                    if (value.length !== 0) {\r\n                        this._syncElementValue();\r\n                    }\r\n                    break;\r\n            }\r\n            return;\r\n        }\r\n\r\n        console.log(\"[FormFieldElementLinker._syncElementMetaValue] Failed to set element meta value, status `%s`\", status);\r\n    }\r\n\r\n    _getElementMetaValue(metaKey: string): any {\r\n        const [value, status] = this.type.getElementMetaValue(this.element, metaKey);\r\n        if (status !== FormTypeElementStatus.META_VALUE_SUCCESSFULLY_RECEIVED) {\r\n            console.warn(\"[FormFieldElementLinker._getElementMetaValue] Failed to get value from element, status `%s`\", status);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    _syncFieldMetaValue(metaKey: string): void {\r\n        console.log(\"[FormFieldElementLinker._syncFieldMeta] Syncing field meta value\");\r\n        this.field.setMetaValue(metaKey, this._getElementMetaValue(metaKey), { initiator: this, processChanges: true });\r\n    }\r\n}\r\n\r\nexport class FormFields extends EventTarget {\r\n    public list: FormField[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.list = [];\r\n        this._fieldChangesEventListener = this._fieldChangesEventListener.bind(this);\r\n    }\r\n\r\n    _fieldChangesEventListener(event: Event) {\r\n        this.dispatchEvent(new FormFieldChangesEvent((event as FormFieldChangesEvent).changes));\r\n    }\r\n\r\n    add(field: FormField) {\r\n        field = field.self;\r\n        if (this.list.includes(field)) return false;\r\n        field.addEventListener(\"changes\", this._fieldChangesEventListener);\r\n        this.list.push(field);\r\n        return true;\r\n    }\r\n\r\n    remove(field: FormField) {\r\n        field = field.self;\r\n        if (!this.list.includes(field)) return false;\r\n        field.removeEventListener(\"changes\", this._fieldChangesEventListener);\r\n        this.list.splice(this.list.indexOf(field), 1);\r\n        return true;\r\n    }\r\n\r\n    get(fieldName: string): FormField | FormFieldArray {\r\n        const fields = this.list.filter(field => field.name === fieldName)\r\n        return fields.length === 1 ? fields[0] : new FormFieldArray(fields);\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<string> {\r\n        return new Set(this.list.map(field => field.name)).values();\r\n    }\r\n}\r\n\r\nexport interface SelectOption {\r\n    value: string;\r\n    textContent: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n}\r\n\r\nexport abstract class FormChangesManager {\r\n    abstract manage(form: Form, changes: FormFieldChange[]): void;\r\n}\r\n\r\nexport class FormChangesForRadioManager extends FormChangesManager {\r\n    override manage(form: Form, changes: FormFieldChange[]): void {\r\n        changes.filter(change =>\r\n            change.initiator !== form &&\r\n            change.field.type.asElementType() === \"radio\" &&\r\n            change.type === FormFieldChangeType.MetaValue &&\r\n            change.metaKey === \"checked\" &&\r\n            change.newValue\r\n        ).forEach(change => {\r\n            form.fields.list.filter(field =>\r\n                field.name === change.field.name &&\r\n                field.type.asElementType() === \"radio\" &&\r\n                field != change.field &&\r\n                field.getMetaValue(\"checked\")\r\n            ).forEach(field => {\r\n                field.setMetaValue(\"checked\", false, { initiator: form, processChanges: true });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport class FormChangesForTriggerEffectsManager extends FormChangesManager {\r\n    override manage(form: Form, changes: FormFieldChange[]): void {\r\n        changes = changes.filter(change => change.initiator !== form);\r\n        if (changes.length === 0) return;\r\n        form.effectManager.triggerEffects({ changedNames: FormFieldChangeSet.asChangedNames(changes) });\r\n    }\r\n}\r\n\r\nexport class Form extends EventTarget {\r\n    public form: HTMLFormElement;\r\n    public effectManager: EffectManager;\r\n    public fields: FormFields;\r\n    public fieldLinkers: FormFieldLinker[];\r\n    public changeSet: FormFieldChangeSet;\r\n    private _changesManagers: FormChangesManager[];\r\n\r\n    constructor({ form }: { form: HTMLFormElement }) {\r\n        super();\r\n        this.form = form;\r\n        this.changeSet = new FormFieldChangeSet();\r\n        this.effectManager = new EffectManager();\r\n        this.fields = new FormFields();\r\n        this.fieldLinkers = [];\r\n        this._changesManagers = [];\r\n        this._handleChanges = this._handleChanges.bind(this);\r\n    }\r\n\r\n    async setup() {\r\n        if (this.form != null) {\r\n            this.form.classList.add(\"ss-form\");\r\n            this.form.addEventListener(\"submit\", (event) => {\r\n                event.preventDefault();\r\n                this.submit().then(() => this.reset());\r\n            });\r\n\r\n            this.form.addEventListener(\"reset\", (event) => {\r\n                event.preventDefault();\r\n                this.reset();\r\n            });\r\n\r\n            this.fields.addEventListener(\"changes\", this._handleChanges);\r\n            this.registerChangesManager(new FormChangesForRadioManager());\r\n            this.registerChangesManager(new FormChangesForTriggerEffectsManager());\r\n            this.registerElements();\r\n        }\r\n    }\r\n\r\n    _handleChanges(event: Event) {\r\n        const changes = (event as FormFieldChangesEvent).changes;\r\n        for (const changesManager of this._changesManagers) {\r\n            changesManager.manage(this, changes);\r\n        }\r\n    }\r\n\r\n    switchState(stateKey: string) {\r\n        for (const field of this.fields.list) {\r\n            field.switchState({ stateKey, initiator: this, processChanges: true });\r\n        }\r\n        this.effectManager.triggerEffects();\r\n    }\r\n\r\n    registerChangesManager(changesManager: FormChangesManager) {\r\n        this._changesManagers.push(changesManager);\r\n    }\r\n\r\n    getFormData(): Record<string, any> {\r\n        const formData: Record<string, any> = {};\r\n        for (const fieldName of this.fields) {\r\n            formData[fieldName] = this.fields.get(fieldName).getValue();\r\n        }\r\n        return formData;\r\n    }\r\n\r\n    updateFormData(formData: Record<string, any>) {\r\n        for (const fieldName of this.fields) {\r\n            if (!(fieldName in formData)) continue;\r\n            this.fields.get(fieldName).setValue(formData[fieldName], { initiator: this });\r\n        }\r\n        this.effectManager.triggerEffects();\r\n    }\r\n\r\n    registerElements(): void {\r\n        for (const element of this.form.elements) {\r\n            if (!FormType.isFormElement(element)) {\r\n                continue;\r\n            }\r\n            if (element.name === \"\") continue;\r\n            const field = new FormField(element.name, FormType.fromFormElement(element), { changeSet: this.changeSet, effectManager: this.effectManager });\r\n            const fieldElementLinker = new FormFieldElementLinker(field, element);\r\n            fieldElementLinker.link();\r\n            this.fieldLinkers.push(fieldElementLinker);\r\n            this.fields.add(field);\r\n        }\r\n    }\r\n\r\n    getElement(name: string): Element | RadioNodeList | null {\r\n        return this.form.elements.namedItem(name);\r\n    }\r\n\r\n    async submit(): Promise<void> {\r\n\r\n    }\r\n\r\n    reset(): void {\r\n        for (const field of this.fields.list) {\r\n            field.reset({ initiator: this });\r\n        }\r\n        this.effectManager.triggerEffects();\r\n    }\r\n\r\n    addDisableWhenEffect(fieldName: string, disableWhen: () => Promise<boolean> | boolean, dependsOn: string[]): void {\r\n        this.effectManager.addEffect(getMetaDependencyKey(fieldName, \"disabled\"), {\r\n            type: \"disable-when\",\r\n            callback: async () => {\r\n                const disabled = await disableWhen();\r\n                // console.log(`[Effect.DisableWhen] Field ${fieldName} disabled: `, disabled);\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                return field.setMetaValue(\"disabled\", disabled, { processChanges: true });\r\n            },\r\n            dependsOn,\r\n        });\r\n    }\r\n\r\n    addVisibleWhenEffect(fieldName: string, visibleWhen: () => Promise<boolean> | boolean, dependsOn: string[]): void {\r\n        this.addDisableWhenEffect(fieldName, async () => !await visibleWhen(), dependsOn);\r\n        this.effectManager.addEffect(getMetaDependencyKey(fieldName, \"visible\"), {\r\n            type: \"visible-when\",\r\n            callback: async () => {\r\n                const visible = await visibleWhen();\r\n                // console.log(`[Effect.VisibleWhen] Field ${fieldName} visible: `, visible);\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                return field.setMetaValue(\"visible\", visible, { processChanges: true });\r\n            },\r\n            dependsOn: [getMetaDependencyKey(fieldName, \"disabled\")]\r\n        });\r\n    }\r\n\r\n    addComputedFieldEffect(fieldName: string, fieldType: FormType, compute: () => Promise<any> | any, dependsOn: string[]): void {\r\n        this.fields.add(new FormField(fieldName, fieldType, { changeSet: this.changeSet, effectManager: this.effectManager }))\r\n        this.effectManager.addEffect(fieldName, {\r\n            type: \"computed-field\",\r\n            callback: async () => {\r\n                const value = await compute();\r\n                // console.log(`[Effect.ComputedField] Field ${fieldName} value: `, value);\r\n                const field = this.fields.get(fieldName);\r\n                return field.setValue(value, { initiator: this, processChanges: true });\r\n            },\r\n            dependsOn\r\n        });\r\n    }\r\n\r\n    addFieldAutofillEffect(fieldName: string, autofillWith: () => Promise<any> | any, dependsOn: string[]): void {\r\n        this.effectManager.addDependency(fieldName, getMetaDependencyKey(fieldName, \"autofill\"));\r\n        this.effectManager.addEffect(getMetaDependencyKey(fieldName, \"autofill\"), {\r\n            type: \"field-autofill\",\r\n            callback: async () => {\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                const dirty = field.getMetaValue(\"dirty\");\r\n                field.setMetaValue(\"autofill\", !dirty);\r\n                if (dirty) {\r\n                    return field.processChanges();\r\n                }\r\n                const value = await autofillWith();\r\n                // console.log(`[Effect.FieldAutofill] Field ${fieldName} value: `, value);\r\n                field.setMetaValue(\"autofill\", field.setValue(value).size !== 0);\r\n                return field.processChanges();\r\n            },\r\n            dependsOn: [getMetaDependencyKey(fieldName, \"dirty\"), ...dependsOn]\r\n        });\r\n    }\r\n\r\n    addSelectOptionsInitializerEffect(fieldName: string, getDefaultOption: () => Promise<SelectOption> | SelectOption, getOptions: () => Promise<SelectOption[]> | SelectOption[], dependsOn: string[]): void {\r\n        this.effectManager.addDependency(getMetaDependencyKey(fieldName, \"disabled\"), getMetaDependencyKey(fieldName, \"options\"));\r\n        this.effectManager.addEffect(getMetaDependencyKey(fieldName, \"options\"), {\r\n            type: \"select-options-initializer\",\r\n            callback: async () => {\r\n                const defaultOption = await getDefaultOption();\r\n                const options = await getOptions();\r\n                const field = this.fields.get(fieldName).getAdapter({ initiator: this });\r\n                const selectedValue = field.getValue({ disabledIsNull: false });\r\n                field.setValue(selectedValue);\r\n                field.setMetaValue(\"disabled\", options.length === 0);\r\n                field.setMetaValue(\"options\", [defaultOption, ...options]);\r\n                return field.processChanges();\r\n            },\r\n            dependsOn\r\n        });\r\n    }\r\n}","\r\n\r\nexport interface ColumnDefinition {\r\n    key: string;\r\n    title: string;\r\n}\r\n\r\n\r\nexport class Column {\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport class Table {\r\n    public container: HTMLElement;\r\n    public columnDefinitions: ColumnDefinition[];\r\n    constructor({ container, columnDefinitions }: { container: HTMLElement, columnDefinitions: ColumnDefinition[] }) {\r\n        this.container = container;\r\n        this.columnDefinitions = columnDefinitions;\r\n        this.render();\r\n    }\r\n\r\n\r\n\r\n    async render() {\r\n        const tableElement = document.createElement(\"div\");\r\n        tableElement.innerHTML = `\r\n            <div class=\"ss-table\">\r\n                <div class=\"ss-table-head\">\r\n                    <div class=\"ss-table-row\">\r\n                        <div class=\"ss-table-header-columns-pinned-left\">\r\n                        </div>\r\n                        <div class=\"ss-table-header-columns\">\r\n                            \r\n                        </div>\r\n                        <div class=\"ss-table-header-columns-pinned-right\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"ss-table-body\">\r\n                    <div class=\"ss-table-body-row-columns-pinned-left\">\r\n                        \r\n                    </div>\r\n                    <div class=\"ss-table-body-rows\">\r\n                        <div class=\"ss-table-body-row\">\r\n                            <div class=\"ss-table-body-cell\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ss-table-body-row-columns-pinned-right\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"ss-table-footer\">\r\n                    <div class=\"ss-table-footer-row-columns-pinned-left\">\r\n                    </div>\r\n                    <div class=\"ss-table-footer-rows\">\r\n                        <div class=\"ss-table-footer-row\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ss-table-footer-row-columns-pinned-left\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        const headersElement = tableElement.querySelector(\".ss-table-header-columns\")!;\r\n        for (const columnDefinition of this.columnDefinitions) {\r\n            const headerElement = document.createElement(\"div\");\r\n            headerElement.classList.add(\"ss-table-cell\");\r\n            headerElement.classList.add(\"ss-table-header-column\");\r\n            headerElement.textContent = columnDefinition.title;\r\n            headersElement.append(headerElement);\r\n        }\r\n        this.container.innerHTML = '';\r\n        this.container.append(tableElement);\r\n    }\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","DependencyGraph","constructor","this","_keys","Set","_dependentMap","Map","_dependencyMap","_addedDependencies","_topologicalOrder","getDependencies","buildDependenciesMap","dependencies","dependent","dependency","add","has","set","inDegree","size","queue","degree","push","length","shift","Error","addDependency","keys","topologicalOrder","dependentMap","dependencyMap","EffectManager","_keyEffect","super","effect","dependsOn","concat","addEffect","triggerEffects","changedNames","arguments","undefined","name","intersection","changedNamesByEffect","callback","forEach","changedName","deepEqual","a","b","aKeys","bKeys","getMetaDependencyKey","fieldName","metaKey","FormTypeElementStatus","FormType","object","FormTypeObject","boolean","FormTypeBoolean","text","FormTypeText","number","FormTypeNumber","date","FormTypeDate","select","multiple","FormTypeSelect","checkbox","FormTypeCheckbox","radio","FormTypeRadio","isFormElement","element","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","fromFormElement","type","area","isEqual","isEmpty","asElementType","fetch","getFieldValue","field","getValue","getFieldMetaValue","getMetaValue","setFieldValue","newValue","setValue","setFieldMetaValue","setMetaValue","getElementValue","TYPE_MISMATCH","VALUE_SUCCESSFULLY_RECEIVED","INVALID_ELEMENT","setElementValue","VALUE_SET_SUCCESS","getElementMetaValue","disabled","META_VALUE_SUCCESSFULLY_RECEIVED","META_KEY_NOT_EXISTS","setElementMetaValue","Boolean","classList","toggle","META_VALUE_SET_SUCCESS","getInitialValue","getInitialMeta","meta","resettable","isSameType","otherType","_area","toDateString","status","checked","includes","_multiple","_of","of","options","optionValues","map","option","filter","find","selected","validValue","Array","isArray","raw","from","selectedOptions","textContent","querySelector","innerHTML","optionElement","document","createElement","FormFieldChangeType","FormFieldChangesEvent","Event","changes","cancelable","FormFieldChangeSet","maxSize","_changes","_maxSize","trimProcessedChanges","index","findIndex","c","processed","splice","change","lastChange","Value","getFieldChange","MetaValue","last","remove","indexOf","onlyCurrentState","getFieldChanges","at","stateKey","currentStateKey","hasChanges","markProcessed","asChangedName","asChangedNames","processChanges","dryRun","lastChanges","dispatchEvent","FormField","EventTarget","changeSet","effectManager","_name","_type","_initializedStateKeys","_initialValue","_valueMap","_initialMeta","_metaMap","_changeSet","_currentStateKey","initializeState","initializeDependencies","self","context","disabledIsNull","initiator","clearInitialMeta","reset","full","console","log","item","entries","_ref","switchState","_ref2","oldValue","Date","getAdapter","outerContext","Proxy","target","propertyKey","receiver","innerContext","Reflect","bind","setInitialValue","setInitialMetaValue","ContextFormField","FormFieldArray","fieldArray","FormFieldLinker","FormFieldElementLinker","_fieldChangesEventListener","_elementValueInputEventListener","_elementValueChangeEventListener","_handleHideContainer","link","_getElementValue","_getElementMetaValue","parentElement","addEventListener","unlink","removeEventListener","event","_syncFieldValue","_syncFieldMetaValue","_syncElementValue","_syncElementMetaValue","warn","container","style","display","requestAnimationFrame","dataset","visible","once","FormFields","list","fields","iterator","values","FormChangesManager","FormChangesForRadioManager","manage","form","FormChangesForTriggerEffectsManager","Form","_ref3","fieldLinkers","_changesManagers","_handleChanges","setup","preventDefault","submit","then","registerChangesManager","registerElements","changesManager","getFormData","formData","updateFormData","elements","fieldElementLinker","getElement","namedItem","addDisableWhenEffect","disableWhen","async","addVisibleWhenEffect","visibleWhen","addComputedFieldEffect","fieldType","compute","addFieldAutofillEffect","autofillWith","dirty","addSelectOptionsInitializerEffect","getDefaultOption","getOptions","defaultOption","selectedValue","Column","Table","columnDefinitions","render","tableElement","headersElement","columnDefinition","headerElement","title","append"],"sourceRoot":""}